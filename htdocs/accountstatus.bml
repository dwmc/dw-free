<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('acctstatus');

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

    # visibility status name mappings
    my %statusvis = ( "V" => "$ML{'.journalstatus.select.activated'}",
                      "D" => "$ML{'.journalstatus.select.deleted'}" );
    if ($u->is_suspended) {
        %statusvis = ("S" => "$ML{'.journalstatus.select.suspended'}");
    }

    # process form submission
    if (LJ::did_post() && LJ::check_referer('/accountstatus.bml')) {
        my $ret;

        my $ok = sub {
            return "<?h1 $ML{'.header.success'} h1?>\n<?p " . $_[0] . " p?>";
        };

        my $dberr = sub {
            return "<?h1 $ML{'Error'} h1?>\n<?p " . $_[0] . " p?>";
        };

        return $dberr->($ML{'error.invalidform'})
            unless LJ::check_form_auth();

        # are they suspended?
        return LJ::bad_input($ML{'.error.nochange.suspend'})
            if $u->is_suspended;

        # are they expunged?
        return LJ::bad_input($ML{'.error.nochange.expunged'})
            if $u->is_expunged;

        # invalid statusvis
        return LJ::bad_input($ML{'.error.invalid'})
            unless $POST{'statusvis'} eq 'D' || $POST{'statusvis'} eq 'V';

        # no need to change?
        return $ok->(BML::ml('.message.nochange', {'statusvis' => $statusvis{$POST{'statusvis'}} }))
            if $u->statusvis eq $POST{'statusvis'};

        my $res = 0;

        my $ip = BML::get_remote_ip();

        my @date = localtime(time);
        my $date = sprintf("%02d:%02d %02d/%02d/%04d", @date[2,1], $date[3], $date[4]+1, $date[5]+1900);

        if ($POST{'statusvis'} eq 'D') {
            
            $res = $u->set_deleted;
            
            if($res) {
                # sending ESN status was changed
                LJ::Event::SecurityAttributeChanged->new($u, { 
                    action   => 'account_deleted',
                    ip       => BML::get_remote_ip(),
                    datetime => $date,
                })->fire;
            }
        } elsif ($POST{'statusvis'} eq 'V') {
            
            $res = $u->set_visible;
            
            if($res) {
                LJ::Event::SecurityAttributeChanged->new($u ,  { 
                    action   => 'account_activated',
                    ip       => BML::get_remote_ip(),
                    datetime => $date,
                })->fire;
            }
        }

        # error updating?
        return $dberr->($ML{'.error.db'})
            unless $res;

        # success
        $ret .= $ok->(BML::ml('.message.success', {'statusvis' => $statusvis{$POST{'statusvis'}} }));

        if ($POST{statusvis} eq 'D') {
            $ret .= "<?p $ML{'.message.deleted'} p?>";

            if ( $u->is_person ) {
                # are they leaving any community maintainerless?
                my $cids = LJ::load_rel_target( $remote, "A" );
                my @warn_comm_ids;

                if ( $cids ) {
                    # verify there are visible maintainers for each community
                    foreach my $cid ( @$cids ) {
                        push @warn_comm_ids, $cid
                            unless
                                grep { $_->is_visible }
                                values %{ LJ::load_userids(
                                              @{ LJ::load_rel_user( $cid, 'A' ) }
                                          ) };
                    }

                    # and if not, warn them about it
                    if ( @warn_comm_ids ) {
                        my $commlist = '<ul>';
                        $commlist .= '<li>' . $_->ljuser_display . '</li>'
                            foreach values %{ LJ::load_userids( @warn_comm_ids ) };
                        $commlist .= '</ul>';

                        $ret .= '<?p ' . BML::ml( '.message.noothermaintainer',
                                { commlist => $commlist, aopts => "href='$LJ::SITEROOT/community/manage.bml'",
                                  pagetitle => BML::ml( '/community/manage.bml.title2' ) } ) . 'p?>';
                    }
                }
            }

            # optional stuff that gets printed after deletion
            $ret .= LJ::run_hook("accountstatus.bml_after_deletion", $u, \%POST);
        }

        return $ret;
    }

    # update form

    my $ret;

    # authas switcher form
    $ret .= "<form method='get' action='accountstatus.bml'>\n";
    $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'}, 'showall' => 1}) . "\n";
    $ret .= "</form>\n\n";

    my $getextra = "?authas=$authas" unless $authas eq $remote->{'user'};
    $ret .= "<form method='post' action='accountstatus.bml$getextra'>\n";
    $ret .= LJ::form_auth();

    $ret .= "<?p $ML{'.journalstatus.about'} p?>\n";

    $ret .= LJ::run_hook("accountstatus_delete_text", $u);

    $ret .= "<div style='margin-left: 30px'>$ML{'.journalstatus.select.head'}\n";
    $ret .= LJ::html_select({ 'name' => 'statusvis', 'selected' => $u->statusvis },
                              map { $_, $statusvis{$_} }
                              reverse sort keys %statusvis) . "\n";

    $ret .= LJ::html_submit(undef, $ML{'.btn.status'},
                            { 'disabled' => $u->is_suspended }) . "\n";
    $ret .= "</div>\n</form>\n";

    return $ret;
}
_code?>
<=body
page?>

