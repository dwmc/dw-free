<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code
{
    use strict;
    use vars qw($title $head $body %GET %POST);
    use LJ::OpenID;
    LJ::set_active_crumb("openid_login");

    $title = $ML{".title"};
    $head = "";

    my $err = sub {
        $title = $ML{".error.title"};
        $body = shift;
        return;
    };

    return $err->($ML{'.error.no_support'})
        unless LJ::OpenID::consumer_enabled();

    my $query_args = $POST{'continue_to'} ? "?continue_to=" .  LJ::eurl( $POST{'continue_to'} ) : "";
    
    my $return_to = "$LJ::SITEROOT/openid/login" . $query_args;

    my $remote = LJ::get_remote();
    if ($remote) {
        $body .= "<?h1 " . $ML{'.error.logout.heading'} . " h1?><?p " . BML::ml( '.error.logout.content', { user => LJ::ljuser($remote) } ) . " p?>";
        return;
    }

    if ($GET{'openid.mode'}) {
        my $csr = LJ::OpenID::consumer(\%GET);

        if ($csr->user_cancel) {
            return BML::redirect("$LJ::SITEROOT/openid/");
        }

        if (my $setup = $csr->user_setup_url) {
            return BML::redirect($setup);
        }

        if ($GET{'openid.return_to'} && $GET{'openid.return_to'} !~ /^\Q$return_to\E/) {
            return $err->(BML::ml( '.error.invalidparam', { item => "return_to" } ) );
        }

        my $vident = eval { $csr->verified_identity; };
        return $err->($@) if $@;
        return $err->($csr->err) unless $vident;

        my $url = $vident->url;
        return $err->( $ML{'.error.invalidchars'} ) if $url =~ /[\<\>\s]/;

        my $u = LJ::User::load_identity_user("O", $url, $vident);
        return $err->( BML::ml( '.error.notvivified', { url => LJ::ehtml( $url ) } ) ) unless $u;

        my $sess_opts = {
            'exptype' => 'short',
            'ipfixed' => 0,
        };
        my $etime = 0;
        if ($POST{'expire'} eq "never") {
            $etime = time()+60*60*24*60;
            $sess_opts->{'exptype'} = "long";
        }

        $u->make_login_session($sess_opts->{'exptype'}, $sess_opts->{'ipfixed'});
        LJ::set_remote($u);

        my $redirect = "$LJ::SITEROOT/login";
        # handle the continue_to url, if it's a valid URL to redirect to.
        my $continue_to = $GET{'continue_to'};
        if ( $continue_to && DW::Controller::validate_redirect_url( $continue_to ) ) {
            # if the account is validated, then go ahead and redirct
            if ( $u->is_validated ) {
                $redirect = $continue_to;
            } else {
                $redirect .= "?continue_to=" . LJ::eurl( $continue_to );
            }
        }
        return BML::redirect( $redirect );
    }

    if (LJ::did_post()) {
        my $csr = LJ::OpenID::consumer();
        my $url = $POST{'openid_url'};
        return $err->( $ML{'.error.invalidchars'} ) if $url =~ /[\<\>\s]/;

        my $tried_local_ref = LJ::OpenID::blocked_hosts($csr);

        my $claimed_id = eval { $csr->claimed_identity($url); };
        return $err->($@) if $@;

        unless ($claimed_id) {
            return $err->(BML::ml( '.error.cantuseownsite', { sitename => $LJ::SITENAMESHORT } ) ) if $$tried_local_ref;
            return $err->(LJ::bad_input($csr->err));
        }

        my $check_url = $claimed_id->check_url(
                                               return_to => $return_to,
                                               trust_root => "$LJ::SITEROOT/",
                                               delayed_return => 1,
                                               );
        return BML::redirect($check_url);
    }

return undef;

}
 _code?><?_info
nocache=>1
_info?><?page
title=><?_code return $title; _code?>
body=><?_code return $body; _code?>
page?>
