<?_c
#
# shop/cart.bml
#
# Allows for viewing and manipulating the shopping cart.
#
# Authors:
#      Mark Smith <mark@dreamwidth.org>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself. For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#
_c?><?page
body<=
<?_code
{
    use strict;
    use vars qw/ %GET %POST $title /;

    # this page uses new style JS
    LJ::need_res( 'stc/widget/shop.css' );
    LJ::set_active_resource_group( 'jquery' );

    # build a cart
    my $cart = DW::Shop->get->cart
        or return 'Failed to get a shopping cart for you, please try again later.';

    # if they want us to remove...
    my $cartid = $GET{cartid}+0;
    my $itemid = $GET{itemid}+0;
    my $action = $GET{action};

    # remove the item then render the current cart
    if ( $action eq 'remove' ) {
        return 'Invalid cartid'
            if $cart->id != $cartid;
        return 'Failed to remove item'
            unless $cart->remove_item( $itemid );
    }

    # setup the output
    my $ret = DW::Widget::ShopCartStatusBar->render( %GET );

    # now render the contents of the cart
    $ret .= '<ul>';
    foreach my $item ( @{$cart->items} ) {
        # FIXME: should require a POST to remove items
        $ret .= '<li>[' . $item->id . ", <a href='$LJ::SITEROOT/shop/cart?cartid=" . $cart->id . "&itemid=";
        $ret .= $item->id . "&action=remove'>remove</a>] ";
        $ret .= $item->permanent ? '(permanent)' : ( '(' . $item->months . ' months)' );
        $ret .= ' ' . $item->class . ' account for ' . $item->t_html;
    }
    $ret .= '</ul>';

    # all done
    return $ret;
}
_code?>
<=body
title=>Your Shopping Cart
page?>
