<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
head<=
<style>
    div.tagcloud a { text-decoration: none; }
    ul.contentlist li { padding-bottom: 3px; }
</style>
<=head

body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::need_res( qw( stc/interests.css ) );

    LJ::set_active_crumb('searchinterests');

    return "<?badinput?>"
        unless LJ::text_in(\%GET) && LJ::text_in(\%POST);

    my $did_post = LJ::did_post();

    my $remote = LJ::get_remote();

    my $maxinterests = $remote ? $remote->count_max_interests : 0;

    my $table = sub { $_[0]->is_community ? 'comminterests' : 'userinterests' };

    if (!$did_post && $GET{'view'} eq "popular") {
        return $ML{'.popular.disabled'} unless LJ::is_enabled('interests-popular');
        my $ret = '';
        $ret .= "<?h1 $ML{'.popular.head'} h1?><?p $ML{'.popular.text'} ";

        $ret .= BML::ml('.popular.textmode', { 'aopts' => "href='$LJ::SITEROOT/interests?view=popular&mode=text'" })
            unless $GET{mode} eq 'text';

        $ret .= " p?>";

        my $rows = LJ::Stats::get_popular_interests();
        return $ML{'.error.nodata'} unless @$rows;

        my %interests;
        foreach my $int_array (@$rows)
        {
            my ($int, $count) = @$int_array;
            $interests{$int} = {
                                int   => $int,
                                eint  => LJ::ehtml($int),
                                url   => "/interests?int=" . LJ::eurl($int),
                                value => $count,
                                };
        }

        unless ($GET{'mode'} eq 'text') {
            $ret .= LJ::tag_cloud(\%interests);
        } else {
            $ret .= "<p><table><tr><td><b>$ML{'.interest'}</b></td><td><b>$ML{'.count'}</b></td></tr>";
            foreach my $i (sort { $b->{value} <=> $a->{value} } values %interests) {
                $ret .= "<tr><td><a href='$i->{url}'>$i->{eint}</a></td><td>$i->{value}</td></tr>";
            }
            $ret .= "</table>";
        }

        return $ret;
    }

    if ((!$did_post && $GET{'mode'} eq "add" && $GET{'intid'}) ||
        ($did_post && $POST{'mode'} eq "add" && $POST{'intid'})) {

        my $intid = $did_post ? $POST{'intid'}+0 : $GET{'intid'}+0;

        my $ret = '';
        unless ($remote) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.add.mustlogin'} p?>";
            return $ret;
        }

        # force them to either come from the interests page, or have posted the request.
        # if both fail, ask them to confirm with a post form.

        unless ( $did_post || LJ::check_referer('/interests.bml') )
        {
            my $int = LJ::get_interest( $intid );
            LJ::text_out(\$int);

            $ret .= "<?h1 $ML{'.add.confirm.head'} h1?>";
            $ret .= "<?p " . BML::ml(".add.confirm.text", {'interest' => $int});
            $ret .= "<form method='post' action='interests'><div align='center'>";
            $ret .= LJ::html_hidden('mode' => 'add', 'intid' => $intid);
            $ret .= LJ::html_submit(undef, BML::ml(".add.btn.text", {'interest' => $int}));
            $ret .= LJ::form_auth();
            $ret .= "</div></form> p?>";
            return $ret;
        }

        my $rints = $remote->get_interests();
        my $count = scalar(@$rints);

        # account for the case where we bypass the POST due to the referer
        return $ML{'error.invalidform'} unless !$did_post || LJ::check_form_auth();

        if ($count >= $maxinterests) {
            $ret .= "<?h1 $ML{'.add.toomany.head'} h1?><?p " .BML::ml(".add.toomany.text", {'maxinterests' => $maxinterests}) ." p?>";
            return $ret;
        }

        my $dbh = LJ::get_db_writer();
        my $uitable = $table->($remote);
        $dbh->do("INSERT INTO $uitable (userid, intid) VALUES (?, ?)",
                 undef, $remote->userid, $intid);
        LJ::memcache_kill($remote, "intids");
        unless ($dbh->err) {
            $dbh->do("UPDATE interests SET intcount=intcount+1 WHERE intid=?", undef, $intid);
        }

        # if a community, remove any old rows from userinterests
        if ( $remote->is_community ) {
            $dbh->do( "DELETE FROM userinterests WHERE userid=?", undef, $remote->userid );
        }

        $ret .= "<?h1 $ML{'.add.added.head'} h1?><?p $ML{'.add.added.text'} p?>";
        return $ret;
    }

    if (!$did_post && $GET{'mode'} eq "findsim_do") {
        return $ML{'error.tempdisabled'} unless LJ::is_enabled('interests-findsim');

        return $ML{'.findsim_do.account.notallowed'} unless $remote && $remote->can_find_similar;

        my $ret = "";
        my $u = LJ::load_user($GET{'user'});
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.username_notfound'} p?>" unless $u;

        my @ints;
        my %intcount;
        my $dbr = LJ::get_db_reader();
        my $sth = $dbr->prepare("SELECT i.intid, i.intcount FROM userinterests ui, interests i ".
                                "WHERE ui.userid=? AND ui.intid=i.intid");
        $sth->execute( $u->userid );
        while (my ($intid, $count) = $sth->fetchrow_array) {
            push @ints, $intid;
            $intcount{$intid} = $count || 1;
        }
        unless (@ints) {
            my $msg = BML::ml('.findsim_do.notdefined', { 'user' => LJ::ljuser($u) });
            return "<?h1 $ML{'Error'} h1?><?p $msg p?>";
        }

        my %pt_count;
        my %pt_weight;
        foreach my $int (@ints) {
            # the magic's in this limit clause.  that's what makes this work.  perfect 
            # results?  no.  but who cares if somebody that lists "music" or "reading"
            # doesn't get an extra point towards matching you.  we care about more unique interests.
            my $sth = $dbr->prepare("SELECT userid FROM userinterests WHERE intid=? LIMIT 500");
            $sth->execute($int);
            while (my $uid = $sth->fetchrow_array) {
                next if $uid == $u->userid;
                $pt_weight{$uid} += (1 / log($intcount{$int}+1));
                $pt_count{$uid}++;
            }
        }

        my %magic;  # balanced points
        foreach (keys %pt_count) {
            $magic{$_} = $pt_weight{$_}*10 + $pt_count{$_};
        }

        my @matches = sort { $magic{$b} <=> $magic{$a} } keys %magic;
        if (@matches > $maxinterests) { @matches = @matches[0..( $maxinterests - 1 )]; }
        my $sth = $dbr->prepare("SELECT userid, user FROM useridmap WHERE userid IN (" . join(",",@matches) . ")");
        $sth->execute;
        my %username;
        while (my ($id, $name) = $sth->fetchrow_array) {
            $username{$id} = $name;
        }

        unless (@matches) {
            return "<?h1 $ML{'.findsim_do.nomatch.head'} h1?><?p " .BML::ml(".findsim_do.nomatch.text", {'user' => LJ::ljuser($u)}) ." p?>";
        }

        $ret .= "<?h1 $ML{'.findsim_do.similar.head'} h1?><?p " .BML::ml(".findsim_do.similar.text", {'user' => LJ::ljuser($u)}) ." p?>";

        $ret .= "<p><table cellpadding='3'><tr valign='bottom'><td><b>#</b></td><td width='250'><b>$ML{'User'}</b></td><td><b>$ML{'.findsim_do.magic'}</b></td></tr>";
        my $count;
        foreach my $uid (@matches)
        {
            $count++;
            $ret .= "<tr><td>$count</td><td>";
            $ret .= LJ::ljuser($username{$uid});
            $ret .= sprintf("</td><td>%.3f</td></tr>", $magic{$uid});
        }
        $ret .= "</table></p>";

        $ret .= "<?h1 $ML{'.findsim_do.magic.head'} h1?><?p $ML{'.findsim_do.magic.text'} p?>";
        return $ret;
    }

    if (!$did_post && $GET{'mode'} eq "enmasse")
    {
        return "<?needlogin?>" unless $remote;

        my $authas = $GET{'authas'} || $remote->{'user'};
        my $u = LJ::get_authas_user($authas);
        return LJ::bad_input(BML::ml('.error.enmasse.noaccess', {'user' => LJ::ljuser($authas)})) unless $u;

        my $altauthas = $remote->{'user'} ne $u->{'user'};
        my $getextra = $altauthas ? "?authas=$u->{'user'}" : '';

        my $userid = $u->userid;
        my $username = $u->user;
        my $fromu = LJ::load_user($GET{'fromuser'} || $username);

        return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.nointerests'} p?>" unless $fromu;

        my %uint;

        my %fromint;
        my $fints = $fromu->get_interests();
        foreach (@$fints) {
            $fromint{$_->[1]} = $_->[0]+0;
        }

        return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.nointerests'} p?>" unless %fromint;

        my $ret = "<?p <form method='get' action='interests'>";
        $ret .= LJ::html_hidden(mode => 'enmasse', fromuser => $fromu->{'user'});
        $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
        $ret .= "</form> p?><form method='post' action='interests$getextra'>";
        $ret .= "<?h1 $ML{'.enmasse.header'} h1?><?p ";

        if ( $u->equals( $fromu ) ) {
            %uint = %fromint;
            $ret .= $ML{'.enmasse.body.you'};
        } else {
            my $in = join (",", map { $fromint{$_} } keys %fromint);

            my $uints = $u->get_interests();
            foreach (@$uints) {
                $uint{$_->[1]} = $_->[0];
            }

            if ($altauthas) {
                $ret .= BML::ml('.enmasse.body.other_authas', { 'user' => LJ::ljuser($fromu),
                                                                'target' => LJ::ljuser($u) });
            } else {
                $ret .= BML::ml('.enmasse.body.other', { 'user' => LJ::ljuser($fromu) });
            }
        }

        $ret .= " p?><div style='margin-left: 40px; margin-top: 20px;'>";
        $ret .= "<table cellpadding='0' cellspacing='0' border='0' width='100%'>";
        my @fromintsorted = sort keys %fromint;
        my $cols = 3;
        my $rows = int((scalar(@fromintsorted) + $cols - 1) / $cols);
        for (my $i = 0; $i < $rows; $i++) {
            $ret .= "<tr valign='middle'>";
            for (my $j = 0; $j < $cols; $j++) {
                my $index = $rows * $j + $i;
                if ($index < scalar(@fromintsorted)) {
                    my $checked = $uint{$fromintsorted[$index]} ? 1 : undef;
                    $ret .= "<td align='left' nowrap='nowrap'>";
                    $ret .= LJ::html_check({name     => "int_$fromint{$fromintsorted[$index]}",
                                            id       => "int_$fromint{$fromintsorted[$index]}",
                                            selected => $checked,
                                            value    => 1});
                    my $bold1 = $checked ? "<strong>" : "";
                    my $bold2 = $checked ? "</strong>" : "";
                    $ret .= "&nbsp;<label for='int_$fromint{$fromintsorted[$index]}'>";
                    $ret .= "$bold1$fromintsorted[$index]$bold2</label></td>";
                } else {
                    $ret .= "<td></td>";
                }
            }
            $ret .= "</tr>";
        }
        $ret .= "</table></div>";

        $ret .= LJ::html_hidden('mode',        'enmasse_do');
        $ret .= LJ::html_hidden('fromuser',    $fromu->{'user'});
        $ret .= LJ::html_hidden('allintids',   join (",", values %fromint));

        $ret .= "<?h1 $ML{'.finished.header'} h1?><?p $ML{'.finished.about'} p?><?standout ";
        $ret .= LJ::html_submit(undef, $ML{'.finished.save_button'}) . " standout?></form>";

        return $ret;
    }

    if ($did_post && $POST{'mode'} eq "enmasse_do") {
        return "<?needlogin?>" unless $remote;

        my $authas = $GET{'authas'} || $remote->{'user'};
        my $u = LJ::get_authas_user($authas);
        return LJ::bad_input($ML{'.error.noauth'}) unless $u;

        my $uitable = $table->($u);
        my %uint;
        my $intcount = 0;

        my $uints = $u->get_interests();
        foreach (@$uints) {
            $uint{$_->[0]} = $_->[1];  # uint{intid} = interest
            $intcount++;
        }

        my @fromints = map { $_+0 } split (/\s*,\s*/, $POST{'allintids'});
        my @todel;
        my @toadd;
        foreach my $fromint (@fromints) {
            next unless $fromint > 0;    # prevent adding zero or negative intid
            push (@todel, $fromint) if  $uint{$fromint} && !$POST{'int_'.$fromint};
            push (@toadd, $fromint) if !$uint{$fromint} &&  $POST{'int_'.$fromint};
        }
        my ($deleted, $added, $toomany) = (0, 0, 0);
        if (@todel) {
            my $intid_in = join(",", @todel);
            my $dbh = LJ::get_db_writer();
            $dbh->do("DELETE FROM $uitable WHERE userid=? AND intid IN ($intid_in)",
                     undef, $u->userid);
            $dbh->do("UPDATE interests SET intcount=intcount-1 WHERE intid IN ($intid_in)");
            $deleted = 1;
        }
        if (@toadd) {
            if ($intcount + scalar @toadd > $maxinterests) {
                $toomany = 1;
            } else {
                my $dbh = LJ::get_db_writer();
                my $sqlp = "(?,?)" . (",(?,?)" x (scalar(@toadd) - 1));
                my @bindvars = map { ( $u->userid, $_ ) } @toadd;
                $dbh->do("REPLACE INTO $uitable (userid, intid) VALUES $sqlp", undef, @bindvars);

                my $intid_in = join(",", @toadd);
                $dbh->do("UPDATE interests SET intcount=intcount+1 WHERE intid IN ($intid_in)");
                $added = 1;
            }
        }

        # if a community, remove any old rows from userinterests
        if ( $u->is_community ) {
            my $dbh = LJ::get_db_writer();
            $dbh->do( "DELETE FROM userinterests WHERE userid=?", undef, $u->userid );
        }

        my $ret = "<?h1 $ML{'.results.header'} h1?><?p ";
        if ($deleted) {
            $ret .= $added   ? $ML{'.results.both'}
                  : $toomany ? BML::ml('.results.del_and_toomany', {'intcount' => $maxinterests})
                  : $ML{'.results.deleted'};
        } else {
            $ret .= $added   ? $ML{'.results.added'}
                  : $toomany ? BML::ml('.results.toomany', {'intcount' => $maxinterests})
                  : $ML{'.results.nothing'};
        }

        my $profile_url = $u->profile_url;
        my $u_other = LJ::load_user($POST{'fromuser'});
        my $profile_url_other = $u_other ? $u_other->profile_url : "";
        
        $ret .= " p?><?p " . BML::ml('.results.message2', {'aopts' => "href='$profile_url'"});
        $ret .= " " . BML::ml('.results.goback2', {'user' => LJ::ljuser($POST{'fromuser'}), 'aopts' => "href='$profile_url_other'"})
            if ($POST{'fromuser'} ne "" && $POST{'fromuser'} ne $u->{'user'});
        $ret .= " p?>";
        LJ::memcache_kill($u, "intids");
        return $ret;
    }

    if ( ! $did_post && ( $GET{intid} || $GET{int} ) ) {
        my $intid = $GET{intid} ? $GET{intid} :
            LJ::get_sitekeyword_id( $GET{int}, 0 );
        my ( $interest, $intcount ) = LJ::get_interest( $intid );
        
        my $check_int = $GET{int} || $interest;
        if (LJ::Hooks::run_hook("interest_search_ignore", query => $check_int, intid => $intid)) {
            return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.ignored'} p?>";
        }

        my $e_int = LJ::ehtml($GET{int});

        my $ret = '';

        # determine whether the interest is too long: if the interest already exists, a long interest will result in $e_int and the return value of LJ::get_interest not matching
        # if it didn't already exist, we fall back on just checking the length of $e_int
        my $exists = $interest;
        if ( ( $exists && $e_int ne $interest ) || length( $e_int ) > LJ::CMAX_SITEKEYWORD ) {

            # if the searched-for interest is too long, we use the short version from here on
            $interest = $exists ? $interest : substr ( $e_int, 0, LJ::CMAX_SITEKEYWORD );
            $ret .= "<?p " . BML::ml( '.error.longinterest', { sitename => $LJ::SITENAMESHORT, old_int => $e_int, new_int => $interest, maxlen => LJ::CMAX_SITEKEYWORD } ) . " p?>";
        }

        $ret .= "<table>";
        $ret .= "<tr valign='middle'><td class='findandmodify'>$ML{'.interested.in'}</td>";
        $ret .= "<td class='findandmodify'><form method='get' action='interests'>";
        $ret .= LJ::html_text({name => 'int', size => 20, value => $interest || $e_int}) . "&nbsp;";
        $ret .= LJ::html_submit(undef, $ML{'.interested.btn.find'});
        $ret .= "</form></td></tr>";
        $ret .= "<tr valign='middle'><td class='findandmodify'>$ML{'.enmasse.intro'}</td>";
        $ret .= "<td class='findandmodify'><form method='get' action='interests'>";
        $ret .= LJ::html_text({name => 'fromuser', size => 20}) . "&nbsp;";
        $ret .= LJ::html_submit(undef, $ML{'.enmasse.btn'});
        $ret .= LJ::html_hidden('mode', 'enmasse');
        $ret .= "</form></td></tr>";
        $ret .= "</table>";

        # no results
        unless ( $exists ) {
            $ret .= "<?h1 $ML{'.nocomms.header'} h1?><?p ";
            $ret .= BML::ml( '.nocomms.text', { 'int' => $e_int, 'aopts' => qq(href="$LJ::SITEROOT/community/create") } );
            $ret .= " p?><?h1 $ML{'.nousers.header'} h1?><?p ";
            $ret .= BML::ml( '.nousers.text', { 'int' => $e_int, 'aopts_manage' => "href='$LJ::SITEROOT/manage/profile/'", 'aopts_int' => "href='$LJ::SITEROOT/interests'" } );
            $ret .= " p?>";
            return $ret;
        } 

        $intid += 0;

        ### hook
        LJ::Hooks::run_hooks("interests_bml", {
            'intid'   => $intid,
            'int'     => $interest,
            'ret'     => \$ret,
        });

        ### communities
        my $dbr = LJ::get_db_reader();
        my $LIMIT = 500;

        my $int_query = sub {
            my $i = shift;  # comminterests or userinterests
            my $q = "SELECT $i.userid FROM $i, userusage
                     WHERE $i.intid = ? AND $i.userid = userusage.userid
                     ORDER BY userusage.timeupdate DESC LIMIT $LIMIT";
            my $uref = $dbr->selectall_arrayref( $q, undef, $intid );
            return LJ::load_userids( map { $_->[0] } @$uref );
            # can't trust LJ::load_userids to maintain sort order
        };
 
        my $should_show = sub {
            my $u = shift;
            return $u->should_show_in_search_results( for => $remote );
        };

        if ( LJ::is_enabled( 'interests-community' ) ) {
            my $us = $int_query->( "comminterests" );
            my $updated = LJ::get_timeupdate_multi( keys %$us );
            my @cl = sort { $updated->{$b->id} <=> $updated->{$a->id} || $a->user cmp $b->user }
                     grep { $_ && $_->is_visible && $should_show->( $_ ) } values %$us;

            my $count = @cl;
            my $list;

            my $show_comm_promos = LJ::is_enabled('community_themes');

            foreach (@cl) {
                my $name = $_->{name};
                LJ::text_out(\$name);
                $list .= "<li class='commname'>" . LJ::ljuser($_) . " - " . LJ::ehtml($name);

                $list .= " <small class='lastupdated'>(";
                if ($updated->{$_->id} > 0) {
                    $list .= BML::ml( '.lastupdated.true', { 'time' => LJ::ago_text( time() - $updated->{$_->id} ) } );
                } else {
                    $list .= BML::ml( '.lastupdated.false' );
                }
                $list .= ")</small>";

                $list .= "<br />&nbsp;&nbsp;&nbsp;<em>" . LJ::ehtml($_->prop("comm_theme")) . "</em>"
                    if $show_comm_promos && $_->prop("comm_theme");

                $list .= "</li>";
            }

            if (@cl) {
                $ret .= "<h1>" . BML::ml(".communities.header", {'interest' => $interest}) ."</h1>";
                $ret .= "<p class='matches'><b>" . BML::ml('.matches2', {'num' => $count}) . "</b><ul class='contentlist'>$list</ul></p>";
            }
        }

        ##### users

        $ret .= "<h1>" . BML::ml(".users.header", {'interest' => $interest}) . "</h1>\n<p class='interestinfo'>";
        if ($remote) {
            $ret .= " " . BML::ml('.addint2', {'aopts' => "href='$LJ::SITEROOT/interests?mode=add&amp;intid=$intid'"});
        }
        $ret .= " " . BML::ml('.morestuff2', {'aopts' => "href='$LJ::SITEROOT/interests'"}) . "</p>";

        my $us = $int_query->( "userinterests" );
        my @ul = grep { $_
                            && $_->is_visible              # visible users
                            && !$_->is_community           # that aren't communities
                            && (!$_->age || $_->age > 13)  # are over 13
                            && $should_show->($_)          # and should show to the remote user
                        } values %$us;

        $ret .= "<p class='matches'><b>" . BML::ml('.matches2', {'num' => scalar @ul}) . "</b></p>";

        my $navbar;
        my $results = LJ::user_search_display(
                                              users      => \@ul,
                                              timesort   => 1,
                                              perpage    => 50,
                                              curpage    => $GET{'page'} || 1,
                                              navbar     => \$navbar,
                                              );

        $ret .= "<div style='text-align: center'>$navbar</div><br />";
        $ret .= $results;
        $ret .= "<div style='text-align: center; clear: both'>$navbar</div><br />";

        return $ret;
    }

    my $ret = "";
    $ret .= "<?p $ML{'.interests.text'} p?>";
    $ret .= "<table cellspacing='5' style='margin-top: 10px; margin-left: 30px; margin-bottom: 10px;'>";

    if ( LJ::is_enabled('interests-popular') ) {
        $ret .= "<tr valign='top'><td colspan='2'>";
        $ret .= "<a href=\"interests?view=popular\">$ML{'.interests.viewpop'}</a></td></tr>";
    }

    $ret .= "<tr valign='top'><td align='left'>$ML{'.interested.in'}</td>";
    $ret .= "<td><form method='get' action='interests'>";
    $ret .= LJ::html_text({name => 'int', size => 20}) . "&nbsp;";
    $ret .= LJ::html_submit(undef, $ML{'.interested.btn.find'});
    $ret .= "</form></td></tr>";

    if ( LJ::is_enabled('interests-findsim') && $remote && $remote->can_find_similar ) {
        $ret .= "<tr valign='top'><td>$ML{'.interests.findsim'}</td><td><form method='get' action='interests'>";
        $ret .= LJ::html_hidden('mode', 'findsim_do');
        $ret .= LJ::html_text({name => 'user', value => $remote->{'user'}, size => 20}) . "&nbsp;";
        $ret .= LJ::html_submit(undef, $ML{'.interested.btn.find'});
        $ret .= "</form></td></tr>";
    }

    $ret .= "<tr valign='top'><td>$ML{'.enmasse.intro'}</td>";
    $ret .= "<td><form method='get' action='interests'>";
    $ret .= LJ::html_text({name => 'fromuser', size => 20}) . "&nbsp;";
    $ret .= LJ::html_submit(undef, $ML{'.enmasse.btn'});
    $ret .= LJ::html_hidden('mode', 'enmasse');
    $ret .= "</form></td></tr>";

    $ret .= "</table>";
    $ret .= BML::ml('.nointerests.text2', {'aopts' => "href='$LJ::SITEROOT/manage/profile/'"});

    return $ret;
}
_code?>
<=body
page?>
