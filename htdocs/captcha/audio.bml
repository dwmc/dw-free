<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code
{
    my ($capid, $anum) = ($GET{capid}, $GET{anum});
    ($capid, $anum) = LJ::Captcha::session($GET{chal}, 'audio', $GET{cid}) if $GET{chal};
    return "Error" unless $capid && $anum;

    # determine if we are talking to someone interested in reproxying for us
    my $can_reproxy = 0;
    unless ($LJ::REPROXY_DISABLE{captchas}) {
        my $hdr = BML::get_client_header('X-Proxy-Capabilities');
        $can_reproxy = $hdr && $hdr =~ m{\breproxy-file\b}i;
    }

    my $wav;
    eval { $wav = LJ::Captcha::get_audio_data($capid, $anum, $can_reproxy); };
    print STDERR "$can_reproxy\n";
    if (ref $wav eq 'ARRAY') {
        return "Error: unable to handle array without reproxy\n" unless $can_reproxy;
        return "Error: captcha not available (no paths)\n" unless scalar @$wav;
        if ($wav->[0] =~ m!http://!) {
            BML::get_request()->header_out('X-REPROXY-URL', join(' ', @$wav));
        } else {
            BML::get_request()->header_out('X-REPROXY-FILE', $wav->[0]);
        }
        BML::set_content_type("audio/x-wav");
        
    } elsif ($wav) {
        BML::set_content_type("audio/x-wav");
        return BML::noparse($wav);
    } else {
        return "Error: $@";
    }
           
}
_code?>
