<?_code
{

    use strict;
    use vars qw(%GET);
    use MIME::Base64;

    # Return a vCard for a user.
    # If mode=jabber, Return a Jabber vCard as per JEP-0054
    # For invalid users, just returns nothing.
    # FIXME: Should probably return 404 Not Found or something

    if ($GET{'user'}) {
        my $user = LJ::canonical_username($GET{'user'});

        if ($user) {
            my $u = LJ::load_user($user);

            if ($u && $u->is_person) {

                BML::set_content_type("text/xml; charset=utf-8");

                my $ret = "<!-- Note: Polite data miners cache on their end.  Impolite ones get banned. -->";

                my $xmlns = $GET{'mode'} eq 'jabber' ? 'vcard-temp' : 'http://www.w3.org/2001/vcard-rdf/3.0#';

                $ret .= "<vCard xmlns='$xmlns'>";
                $ret .= "<NICKNAME>$user</NICKNAME>";
                $ret .= "<URL>".LJ::exml($u->journal_base."/")."</URL>";

                if ($u->{bdate} && $u->{bdate} ne "0000-00-00" && $u->can_show_full_bday) {
                    $ret .= "<BDAY>".$u->bday_string."</BDAY>";
                }

                my $email = $u->email_visible;
                $ret .= "<EMAIL>".LJ::exml($email)."</EMAIL>" if $email;
                $ret .= "<FN>".LJ::exml($u->{name})."</FN>";

                if (my $pic = $u->userpic) {

                    my $type = {
                        'jpg' => 'image/jpeg',
                        'gif' => 'image/gif',
                        'png' => 'image/png',
                    }->{$pic->extension};

                    my $imagedata = $pic->imagedata;

                    # TODO: If mode=jabber, scale the userpic to 96x96px.

                    $ret .= "<PHOTO>";
                    $ret .= "<TYPE>".LJ::exml($type)."</TYPE>";
                    $ret .= "<BINVAL>".LJ::exml(MIME::Base64::encode_base64($imagedata))."</BINVAL>";
                    $ret .= "</PHOTO>";
                }

                $ret .= "</vCard>";

                BML::noparse();
                BML::finish();
                return $ret;

            }
        }
    }

}
_code?>
