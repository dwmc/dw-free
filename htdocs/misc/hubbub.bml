<?_c
#
# hubbub.bml
#
# This is the main PubSubHubbub interface script.  We expect hubs to ping us
# on this URL and tell us about things that are going on.
#
# Authors:
#     Mark Smith <mark@dreamwidth.org>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself. For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#
_c?><?_code
{
    use strict;
    use vars qw/ %GET %POST /;
    use LJ::SynSuck;

    # general purpose handler sub
    my $ret = sub {
        my ( $status, $msg ) = @_;
        BML::set_status( $status );
        warn "[$$] PubSubHubbub error: ip=" . BML::get_remote_ip() . ", message=$msg.\n";
        return "";
    };

    # errors are handled as 404s, that tells the hub "uh, we don't know what
    # you're doing, but it's wrong."
    my $err = sub { $ret->( 404, $_[0] || '(unknown error)' ) };

    # per spec, 5xx will cause a retry later
    my $fail = sub { $ret->( 500, $_[0] || '(unknown failure)' ) };

    # if hubbub is not enabled, error out now
    return $err->( 'hubbub not enabled' ) unless LJ::is_enabled( 'hubbub' );

    # if it's a POST, then it's new content we should look at
    if ( LJ::did_post() ) {
        # dev server noise
        if ( $LJ::IS_DEV_SERVER ) {
            warn "[$$] PubSubHubbub notification received.\n";
        }

        # get the content they're sending us and pass it off to the synsuck pipeline
        my $body = eval { DW::Request->get->content }
            or return $fail->( 'failed to get body' );
        LJ::SynSuck::process_hubbub_notification( \$body );

        # they don't actually expect anything.  returning this gives them a 200
        # which is perfect.
        return "";
    }

    # if we get here, we're going to be processing a subscription or some
    # other sort of mode change.  right now, only subscriptions, as we never
    # unsubscribe.
    return $err->( 'unsupported mode' ) unless $GET{'hub.mode'} eq 'subscribe';

    # now figure out what they want
    my ( $topicurl, $leasetime, $verifytoken, $challenge ) =
        map { $GET{$_} } qw/ hub.topic hub.lease_seconds hub.verify_token hub.challenge /;
    $topicurl = LJ::durl( $topicurl );

    # sanity check the hub
    return $err->( 'invalid topic' ) unless $topicurl =~ /^https?:/;
    return $err->( 'invalid verify_token' ) unless $verifytoken =~ /^\w+$/;
    return $err->( 'invalid lease_seconds' ) unless $leasetime > 0;

    # validate the token matches something we know about
    my $dbh = LJ::get_db_writer() or return $fail->();
    my ( $id, $uid, $topicurldb )  = $dbh->selectrow_array(
        'SELECT id, userid, topicurl FROM syndicated_hubbub2 WHERE verifytoken = ?',
        undef, $verifytoken
    );
    return $fail->( $dbh->errstr ) if $dbh->err;

    # must have a uid, and the topic url must match
    return $err->( 'no matching row found: ' . $verifytoken ) unless $uid;

    # if the topic url doesn't match, then that's a terrible thing and we're not sure
    # why, so log extra information
    return $err->( 'topic_url mismatch: db=' . $topicurldb . ', hub=' . $topicurl )
        unless $topicurl eq $topicurldb;

    # validate the user is still valid (didn't get suspended or anything)
    my $u = LJ::load_userid( $uid ) or return $fail->( 'failed to load user' );
    return $err->( 'user no longer visible' ) unless $u->is_visible;
    
    # okay, great; let's update our subscription record
    $dbh->do( 'UPDATE syndicated_hubbub2 SET leasegoodto = UNIX_TIMESTAMP() + ? WHERE id = ?',
              undef, $leasetime, $id );

    # if we're a development server, warn some debugging so we know the hub hit us
    if ( $LJ::IS_DEV_SERVER ) {
        warn "[$$] PubSubHubbub subscription for " . $u->user . "(" . $u->id . ") extended for $leasetime seconds.\n";
    }

    # we're good!
    BML::finish();
    BML::set_content_type( 'text/plain' );
    return $challenge;
}
_code?>
