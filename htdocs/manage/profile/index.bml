<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_code return $ML{'.title'}; _code?>
body<=
<?_code
{
    use strict;
    use vars qw(%POST %GET $headextra @errors);
    use LJ::Setting;

    LJ::set_active_crumb('editprofile');
    LJ::need_res('stc/lj_base.css', 'stc/lj_settings.css');

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    my $remote = LJ::get_remote()
        or return "<?needlogin?>";

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input("You could not be authenticated as the specified user.")
        unless $u;

    return $LJ::MSG_READONLY_USER if $u->readonly;

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';
    my $getsep = $getextra ? "&" : "?";

    ### user is now authenticated ###

    # The settings used on this page
    my @settings = ();
    push @settings, "LJ::Setting::UserMessaging" if LJ::is_enabled('user_messaging');
    push @settings, "LJ::Setting::FindByEmail" if LJ::is_enabled('opt_findbyemail');

    my $dbr = LJ::get_db_reader();
    my $sth;

    # load user props
    LJ::load_user_props(
        $u, { use_master => 1 },
        qw/ country state city zip timezone
          icq aolim yahoo msn url jabber
          google_talk skype gizmo
          twitter delicious
          urlname gender last_fm_user opt_hidefriendofs
          sidx_bdate sidx_bday sidx_loc
          opt_showmutualfriends
          opt_showbday opt_showlocation
          opt_sharebday
          comm_theme opt_showljtalk opt_showonlinestatus/
    );

    # to store values before they undergo normalisation
    my %saved = ();
    $saved{'name'} = $u->{'name'};

    # clean userprops
    foreach (values %$u) { LJ::text_out(\$_); }

    # load and clean bio
    $u->{'bio'} = LJ::get_bio($u);
    $saved{'bio'} = $u->{'bio'};
    LJ::EmbedModule->parse_module_embed($u, \$u->{'bio'}, edit => 1);
    LJ::text_out(\$u->{'bio'}, "force");

    # load interests
    my $uints = $u->get_interests( { forceids => 1 } );
    my %interests = ();
    foreach (@$uints) {
        $interests{$_->[1]} = $_->[0];  # $interests{name} = intid
    }

    ###
    ### no post, show edit form
    ###
    unless (LJ::did_post()) {

        my $ret;

        $ret .= "<div>";
        # user switcher
        $ret .= "<form method='get' action='./'>\n";
        $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
        $ret .= "</form>\n\n";

        $ret .= "<?p " . BML::ml(".intro1", { 'aopts1' => "href='$LJ::SITEROOT/manage/comments/$getextra'",
                                             'aopts2' => "href='$LJ::SITEROOT/manage/settings/$getextra${getsep}cat=display'"} )
                . " p?>";

        $ret .= "</div>\n";

        $ret.= "<div class='ljclear'></div>\n";


        $ret .= "<form method='post' action='./$getextra'>\n";
        $ret .= LJ::form_auth();

        # personal information
        $ret .= "<div class='section_head'> $ML{'.section.id'} </div>\n";

        ### Picture Settings
        $ret .= "<table class='field_block'>\n";

        $ret .= "<tr><td class='field_name'>$ML{'.fn.userpic'}</td>\n";
        $ret .= "<td><div style='width: 100px; height: 100px; float: left; text-align: center; border: 1px solid #ddd'>";
        if ($u->{'defaultpicid'}) {
            my $picid = $u->{'defaultpicid'};
            my %userpics = ();
            # FIXME: this repetitive load will be fixed in bug
            # 513. For now, memcache keeps this from hitting the
            # db twice.
            LJ::load_userpics(\%userpics, [ $u, $picid ]);
            my $userpic_obj = LJ::Userpic->new( $u, $picid );
            $ret .= $userpic_obj->imgtag;
        } else {
            $ret .= "<br /><i>($ML{'.userpic.none'})</i>";
        }
        $ret .= "</div><div style='margin-left: 110px'>\n";
        $ret .= "<span class='helper'>$ML{'.userpic'}</span>";
        $ret .= LJ::help_icon('upic_keywords');
        $ret .= "<?p <a href='$LJ::SITEROOT/editpics$getextra'>$ML{'.userpic.change'}</a> p?>\n";
        $ret .= "</td>";
        $ret .= "</tr>\n";

        # name
        $ret .= "<tr><td class='field_name'>$ML{'.fn.name'}</td>\n";
        if (LJ::text_in($saved{'name'})) {
            $ret .= "<td><div style='float: left'>";
            $ret .= LJ::html_text({ 'name' => 'name', 'value' => $u->{'name'},
                                    'size' => '40', 'maxlength' => '50' });
            $ret .= "&nbsp; </div><div class='helper'>$ML{'.name'}</div>";
            $ret .= "</td></tr>\n";
        } else {
            $ret .= "<td>" . LJ::html_hidden('name_absent', 'yes');
            $ret .= "<?inerr " . BML::ml('.error.invalidname2', {'aopts' => "href='$LJ::SITEROOT/utf8convert'"}) . " inerr?></td></tr>\n";
        }

        if ( $u->is_individual ) {
            # gender
            $ret .= "<tr><td class='field_name'>$ML{'.fn.gender'}</td><td>";
            $ret .= LJ::html_select({ name => 'gender', selected => $u->prop( 'gender' ) || 'U' },
                                      F => $ML{'.gender.female'},
                                      M => $ML{'.gender.male'},
                                      O => $ML{'.gender.other'},
                                      U => $ML{'.gender.unspecified'}, );
            $ret .= "</td></tr>\n";
        }

        # birthday
        $ret .= "<tr><td class='field_name'>$ML{'.fn.birthday'}</td><td>";
        my %bdpart;
        if ($u->{'bdate'} =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/) {
            ($bdpart{'year'}, $bdpart{'month'}, $bdpart{'day'}) = ($1, $2, $3);
            if ($bdpart{'year'} eq "0000") { $bdpart{'year'} = ""; }
            if ($bdpart{'day'} eq "00") { $bdpart{'day'} = ""; }
        }

        $ret .= LJ::html_select({ 'name' => 'month', 'selected' => int($bdpart{'month'}) },
                                '', '', map { $_, LJ::Lang::month_long_ml($_) } (1..12)) . " ";
        $ret .= LJ::html_text({ 'name' => 'day', 'value' => $bdpart{'day'}, 'size' => '3', 'maxlength' => '2' }) . " ";
        $ret .= LJ::html_text({ 'name' => 'year', 'value' => $bdpart{'year'}, 'size' => '5', 'maxlength' => '4' });

        $ret .= "<div style=\"padding-top: .5em;\">\n";
        $ret .= " <label for='opt_sharebday'>$ML{'.share.birthday'}</label>\n";
        my $opt_sharebday = ($u->opt_sharebday =~ m/^(A|F|N|R)$/) ? $u->opt_sharebday : 'F';
        $ret .= LJ::html_select({ 'name' => 'opt_sharebday',
                                  'selected' => $opt_sharebday },
                                  { text => BML::ml(".security.visibility.everybody"),
                                    value => "A",},
                                  { text => BML::ml(".security.visibility.regusers"),
                                    value => "R",},
                                  { text => BML::ml(".security.visibility.friends"),
                                    value => "F",},
                                  { text => BML::ml(".security.visibility.nobody"),
                                    value => "N",});

        $ret .= "</div>\n";

        $ret .= "<div style=\"padding-top: .5em;\">\n";
        $ret .= " <label for='opt_showbday'>$ML{'.show.birthday'}</label>\n";
        $u->{'opt_showbday'} = "D" unless $u->{'opt_showbday'} =~ m/^(D|F|N|Y)$/;
        $ret .= LJ::html_select({ 'name' => 'opt_showbday',
                                  'selected' => $u->{'opt_showbday'} },
                                "N" => BML::ml(".show.birthday.nothing"),
                                "D" => BML::ml(".show.birthday.day"),
                                "Y" => BML::ml(".show.birthday.year"),
                                "F" => BML::ml(".show.birthday.full"));
        $ret .= "</div>\n";

        $ret .= "</td></tr>\n";

        $ret .= "</table>\n";

        ## COMMUNITY THEME

        if ($u->is_community) {
            $ret .= "<div class='section_head'>$ML{'.section.description'}</div>\n";
            $ret .= $ML{'.theme'} . "<br />";
            $ret .= LJ::html_text({ 'name' => 'comm_theme', 'value' => $u->{comm_theme},
                                    'size' => '50', 'maxlength' => '100' });
        }

        ## INTERESTS

        {
            ### Interests
            $ret .= "<a name='interests'></a><div class='section_head'>$ML{'.section.interests'}</div>\n";
            my @eintsl;
            foreach (sort keys %interests) {
                push @eintsl, $_ if LJ::text_in($_);
            }

            $ret .= "<table>\n";

            $ret .= "<tr><td colspan='2'>$ML{'.fn.interests'}</td></tr>";
            $ret .= "<tr><td>";
            $ret .= LJ::html_textarea({ 'name' => 'interests', 'value' => join(", ", @eintsl),
                                        'rows' => '10', 'cols' => '50', 'wrap' => 'soft' });
            $ret .= "</td><td class='example'>";
            $ret .= "<?p $ML{'.interest.line1'} p?>";
            $ret .= "<?p $ML{'.interest.line2'} p?>";
            $ret .= "<?p $ML{'.interest.line3'} p?>";
            $ret .= "<?p $ML{'.interest.line4'} p?>";
            $ret .= "<?p $ML{'.interest.line5'} p?>";
            $ret .= "</td></tr>\n\n";

            $ret .= "</table>\n";
        }

        ## BIO

        ### User bio
        $ret .= "<a name='bio'></a><div class='section_head'>$ML{'.section.bio'}</div>";
        if (LJ::text_in($saved{'bio'})) {
            $ret .= "<table class='field_block'>";
            if ($u->is_identity) {
                $ret .= "<tr><td colspan='2'>$ML{'.fn.bio.openid'}<br />\n";
            } else {
                $ret .= "<tr><td colspan='2'>$ML{'.fn.bio'}<br />\n";
            }
            $ret .= LJ::html_textarea({ 'name' => 'bio', 'rows' => '10', 'cols' => '50',
                                        'wrap' => 'soft', 'value' => $u->{'bio'}, 'style' => "width: 90%", }) . "</td></tr>\n";
            $ret .= "</table>\n";
        } else {
            $ret .= LJ::html_hidden('bio_absent', 'yes');
            $ret .= "<?p <?inerr " . BML::ml('.error.invalidbio', {'aopts' => "href='$LJ::SITEROOT/utf8convert'"}) . " inerr?> p?>\n";
        }

        $ret .= "<div class='section_head'>$ML{'.section.web'}</div>\n";

        $ret .= "<table class='field_block'>\n";
        # url
        $ret .= "<tr><td class='field_name'>$ML{'.fn.link'}</td><td>";
        $ret .= LJ::html_text({ 'name' => 'url', 'value' => $u->{'url'}, 'size' => '40', 'maxlength' => '255' });
        $ret .= " <span class='helper'>($ML{'.optional'})</span></td></tr>\n";

        # urlname
        $ret .= "<tr><td class='field_name'>$ML{'.fn.sitename'}</td><td>";
        $ret .= LJ::html_text({ 'name' => 'urlname', 'value' => $u->{'urlname'}, 'size' => '40', 'maxlength' => '255' });
        $ret .= " <span class='helper'>($ML{'.optional'})</span></td></tr>\n";
        $ret .= "</table>\n";

        $ret .= "<div class='section_head'>$ML{'.section.location'}\n";
        $ret .= "<span class='view_options'>";
        $ret .= "<label for='opt_showlocation'>$ML{'.location'}</label> ";
        $ret .= LJ::html_select({ 'name' => 'opt_showlocation',
                                   'selected' => $u->opt_showlocation },
                                "Y" => BML::ml(".security.visibility.everybody"),
                                "R" => BML::ml(".security.visibility.regusers"),
                                "F" => BML::ml(".security.visibility.friends"),
                                "N" => BML::ml(".security.visibility.nobody"));
        $ret .= "</span></div>";

        $ret .= LJ::Widget::Location->render( skip_timezone => 1 );


        ## CONTACT INFO
        $ret .= "<div class='section_head'>$ML{'.section.contact'} \n";

        # contactshow_sec
        $ret .= "<span class='view_options'>$ML{'.fn.contactinfo'} ";
        $ret .= LJ::html_select({ 'name' => 'allow_contactshow',
                                      'selected' => $u->opt_showcontact},
                                      { text => BML::ml(".security.visibility.everybody"),
                                        value => "Y",},
                                      { text => BML::ml(".security.visibility.regusers"),
                                        value => "R",},
                                      { text => BML::ml(".security.visibility.friends"),
                                        value => "F",},
                                      { text => BML::ml(".security.visibility.nobody"),
                                        value => "N",});


        $ret .= "</span></div>\n";

        $ret .= "<table class='field_block'>\n";
        $ret .= "</td></tr>\n";

        # email

        $ret .= "<tr><td class='field_name'> $ML{'.fn.email.system'}</td><td>\n";
        $ret .= "<b>" . $u->email_raw . "</b> &nbsp; <a href='$LJ::SITEROOT/changeemail$getextra'>$ML{'.email.change.system'}</a></td></tr>";

        $ret .= "<tr><td class='field_name'> $ML{'.fn.email.display'}</td><td>\n";

        my $emailsettingurl = $getextra ? "<a href='$LJ::SITEROOT/manage/settings/$getextra&cat=privacy'>" : "<a href='$LJ::SITEROOT/manage/settings/?cat=privacy'>";

        $ret .= "<b>" . $u->prop( 'opt_profileemail' ) . "</b> &nbsp; " . $emailsettingurl . "$ML{'.email.change.display'}</a></td></tr>";

        # opt_whatemailshow
        $ret .= "<tr><td class='field_name'> $ML{'.fn.emaildisplay'}</td><td> ";
        my $cur = $u->opt_whatemailshow;
        my @vals = ( ( $LJ::USER_EMAIL && $u->can_have_email_alias )
                     ? ("A" => BML::ml(".email.opt.actual"),
                        "D" => BML::ml(".email.opt.display"),
                        "L" => BML::ml(".email.opt.site", { sitenameshort => $LJ::SITENAMESHORT } ),
                        "B" => BML::ml(".email.opt.both.actual", { sitenameshort => $LJ::SITENAMESHORT } ),
                        "V" => BML::ml(".email.opt.both.display", { sitenameshort => $LJ::SITENAMESHORT } ),
                        "N" => BML::ml(".email.opt.none"))
                     : ("A" => BML::ml(".email.opt.actual"),
                        "D" => BML::ml(".email.opt.display"),
                        "N" => BML::ml(".email.opt.none")));
        $ret .= LJ::html_select({ 'name' => 'opt_whatemailshow', 'selected' => $cur }, @vals) . "\n";

        $ret .= "</td></tr>\n";


        if ($u->is_person) {

        # opt_findbyemail
        if ( LJ::is_enabled('opt_findbyemail') ) {
            $ret .= "<tr><td class='field_name'>" .
                    LJ::Setting::FindByEmail->label . "</td><td>";
            $ret .= LJ::Setting::FindByEmail->as_html($u);
            $ret .= "</td></tr>\n";
        }

        # opt_usermsg
        if ( LJ::is_enabled('user_messaging') ) {
            $ret .= "<tr><td class='field_name'>" . BML::ml('.section.usermessaging', { siteabbrev => $LJ::SITENAMEABBREV } ) ."</td><td>";
            $ret .= LJ::Setting::UserMessaging->as_html($u);
            $ret .= "</td></tr>\n";
        }

        # chat thingies
        $ret .= "<tr><td colspan='2'></td></tr><tr><td class='field_name' colspan='2' style='text-align: center;'><a name='iminfo'></a>$ML{'.fn.imservices3'}</td></tr>";


        $u->{'gizmo'} = $u->gizmo_account();

        my $ljtalk_title = '<a href="' . LJ::Hooks::run_hook('jabber_link') . '">' .
            LJ::Hooks::run_hook('jabber_title') . '</a>';

        foreach my $p (
                       ["ljtalk", $ljtalk_title, 40],
                       ["aolim", $ML{'.chat.aolim'}, 28], ["icq", $ML{'.chat.icquin'}, 12],
                       ["yahoo", $ML{'.chat.yahooid'}, 33], ["msn", $ML{'.chat.msnusername'}, 60],
                       ["jabber", $ML{'.chat.jabber'}, 60], ["google_talk", $ML{'.chat.googletalk'}, 60],
                       ["skype", $ML{'.chat.skype'}, 40],
                       ["gizmo", $ML{'.chat.gizmo'}, 40],
                       ["twitter", $ML{ '.services.twitter' }, 40],
                       ["delicious", $ML{ '.services.delicious' }, 40],
)

        {
            next if $p->[0] eq "ljtalk" && ! LJ::is_enabled('ljtalk');

            $ret .= "<tr><td class='field_name'>$p->[1]</td><td>";
            unless ($p->[0] eq "ljtalk") {
                $ret .= LJ::html_text({ 'name' => $p->[0], 'value' => $u->{$p->[0]}, 'size' => '20', 'maxlength' => $p->[2] });
            } else {
                $ret .= $u->ljtalk_id;
                # Don't show LJ Talk field? (opt_showljtalk)
                $ret .= LJ::html_check({ 'type' => 'check',
                                         'name' => 'opt_showljtalk',
                                         'id' => 'opt_showljtalk',
                                         'selected' => $u->hide_ljtalk });
                $ret .= "<label for='opt_showljtalk' style='font-size: 10px;'>$ML{'.showljtalk'}</label>";

                # Jabber Online Status
                my $jabber_title = LJ::Hooks::run_hook("jabber_title") || $ML{'/manage/settings/index.bml.jabber.title'};
                $ret .= "<br />";
                $ret .= BML::ml('/manage/settings/index.bml.jabber', {'jabbertitle' => $jabber_title}) . " ";
                $ret .= LJ::html_select({ 'name' => 'opt_showonlinestatus',
                                          'id' => 'opt_showonlinestatus',
                                          'selected' => $u->opt_showonlinestatus },
                                          "Y" => BML::ml("/manage/settings/index.bml.security.visibility.everybody"),
                                          "F" => BML::ml("/manage/settings/index.bml.security.visibility.friends"),
                                          "N"  => BML::ml("/manage/settings/index.bml.security.visibility.nobody") );
                $ret .= "<br />\n<span class='helper'>" . BML::ml('/manage/settings/index.bml.jabber.text', {'jabbertitle' => $jabber_title}) . "</span>";
            }
            $ret .= "</td></tr>\n";
        }

        # last_fm_user
        $ret .= "<tr><td class='field_name'>$ML{'.fn.last_fm'}</td><td>";
        $ret .= LJ::html_text({ 'name' => 'last_fm_user', 'value' => $u->{'last_fm_user'}, 'size' => '20', 'maxlength' => '255' });
        $ret .= "</td></tr>";
        $ret .= "</td></tr>\n";

        } # end is_person check

        $ret .= "</table>\n";

        ## TEXT MESSAGING

        $ret .= "<a name='txtmsg'></a><div class='section_head'>$ML{'.section.textmsg'}\n";
        unless ( $u->can_use_textmessaging ) {
            my $inline;
            if ($inline .= LJ::Hooks::run_hook("cprod_inline", $u, 'TextMessaging')) {
                $ret .= "</div>$inline";
            } else {
                $ret .= "</div>".BML::ml('cprod.textmessaging.text3.v1');
            }
        }
        if ( $u->can_use_textmessaging ) {
            my $tminfo = LJ::TextMessage->tm_info($u, remap_result => 1);
            foreach (values %$tminfo) { LJ::text_out(\$_); }
            $tminfo->{'security'} = "N" if ($u->{'txtmsg_status'} eq 'off' || $u->{'txtmsg_status'} eq 'none');

            $ret .= "<span class='view_options'>$ML{'.fn.txtmsg'}";
            $ret .= LJ::html_select({ 'name' => 'txtmsg_security', 'selected' => $tminfo->{'security'} },
                                      "all" => BML::ml(".security.visibility.everybody"),
                                      "reg" => BML::ml(".security.visibility.regusers"),
                                      "friends" => BML::ml(".security.visibility.friends"),
                                      "N"   => BML::ml(".security.visibility.nobody") );
            $ret .= "</span></div>\n";

            $ret .= "<table class='field_block'>\n";

            foreach (values %$tminfo) { LJ::text_out(\$_); }

            $ret .= "<tr><td class='field_name'>$ML{'.fn.servprov'}</td><td>";
            {
                my @opts = ("", "");
                foreach my $p (LJ::TextMessage::providers()) {
                    my $info = LJ::TextMessage::provider_info($p);
                    push @opts, ($p, $info->{'name'});
                }
                $ret .= LJ::html_select({ 'name' => 'txtmsg_provider',
                                          'selected' => $tminfo->{'provider'}, },
                                          @opts);
            }

            $ret .= " " . BML::ml('.txt.details', {'aopts' => "href='$LJ::SITEROOT/tools/textmessage?mode=details'"}) . "</td></tr>\n";
            $ret .= "<tr><td class='field_name'>$ML{'.fn.txtnum'}</td><td>";
            $ret .= LJ::html_text({ 'name' => 'txtmsg_number',  'value' => $tminfo->{'number'},
                                    'size' => '15', 'maxlength' => '40' });
            $ret .= "</td></tr>\n";
            $ret .= "</table>\n";
        }

        ## FRIENDS
        if ($u->is_community) {
            $ret .= "<div class='section_head'>$ML{'.section.members'}</div>\n";
        }
        else {
            $ret .= "<div class='section_head'>$ML{'.section.friends'}</div>\n";
        }

        $ret .= "<table class='field_block'>\n";

        # opt_showmutualfriends
        unless ($u->is_community) {
            $ret .= "<tr><td class='field_name'><label for='opt_showmutualfriends'>$ML{'.fn.mutualfriends'}</label></td><td>";
            $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_showmutualfriends', 'id' => 'opt_showmutualfriends',
                                 'selected' => $u->{'opt_showmutualfriends'} });
            $ret .= " <label for='opt_showmutualfriends'>$ML{'.mutualfriends'}</label></td></tr>\n";
       } 

        # opt_hidefriendofs
        if ($u->is_community) {
            $ret .= "<tr><td class='field_name'><label for='opt_hidefriendofs'>$ML{'.fn.subscriberof'}</label></td><td>";
        }
        else {
            $ret .= "<tr><td class='field_name'><label for='opt_hidefriendofs'>$ML{'.fn.friendof'}</label></td><td>";
        }
        $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_hidefriendofs', 'id' => 'opt_hidefriendofs',
                                 'selected' => ! $u->{'opt_hidefriendofs'} });
        if ($u->is_community) {
            $ret .= " <label for='opt_hidefriendofs'>$ML{'.subscriberof'}</label></td></tr>\n";
        }
        else { 
            $ret .= " <label for='opt_hidefriendofs'>$ML{'.friendof'}</label></td></tr>\n";
        }

        $ret .= "</table>\n";

        $ret .= LJ::Hooks::run_hook("profile_settings_extra", $u);

        # ending submit block
        $ret .= "<?standout " . LJ::html_submit(undef, $ML{'.save_button'}) . " standout?>\n";
        $ret .= "</form>\n";

        return $ret;
    }


    ###
    ### we have a post, process edits
    ###

    if (LJ::did_post()) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>" unless LJ::check_form_auth();

        return "<?badinput?>" unless LJ::text_in(\%POST);

        # name
        unless (LJ::trim($POST{'name'}) || defined($POST{'name_absent'})) {
            push @errors, $ML{'.error.noname'};
        }

        # name is stored in an 80-char column
        if (length $POST{'name'} > 80) {
            push @errors, $ML{'.error.name.toolong'};
        }
        # birthday
        my $this_year = (localtime())[5]+1900;

        if ($POST{'year'} && $POST{'year'} < 100) {
            push @errors, $ML{'.error.year.notenoughdigits'};
        }

        if ($POST{'year'} && $POST{'year'} >= 100 && ($POST{'year'} < 1890 || $POST{'year'} > $this_year)) {
            push @errors, $ML{'.error.year.outofrange'};
        }

        if ($POST{'month'} && ($POST{'month'} < 1 || $POST{'month'} > 12)) {
            push @errors, $ML{'.error.month.outofrange'};
        }

        if ($POST{'day'} && ($POST{'day'} < 1 || $POST{'day'} > 31)) {
            push @errors, $ML{'.error.day.outofrange'};
        }

        if (@errors == 0 && $POST{'day'} > LJ::days_in_month($POST{'month'}, $POST{'year'})) {
            push @errors, $ML{'.error.day.notinmonth'};
        }

        if ($POST{'LJ__Setting__UserMessaging_opt_usermsg'} && !$POST{'LJ__Setting__UserMessaging_opt_usermsg'} =~ /^[MFNY]$/) {
            push @errors, BML::ml(".error.usermessaging");
        }

        if ($POST{'LJ__Setting__FindByEmail_opt_findbyemail'} && !$POST{'LJ__Setting__FindByEmail_opt_findbyemail'} =~ /^[HNY]$/) {
            push @errors, BML::ml(".error.findbyemail");
        }

        # bio
        if (length($POST{'bio'}) >= LJ::BMAX_BIO) {
            push @errors, $ML{'.error.bio.toolong'};
        }

        # text messaging
        if ($POST{'txtmsg_security'} =~ m/^(all|reg|friends)$/) {
            unless ($POST{'txtmsg_provider'}) {
                push @errors, $ML{'.error.txt.require_provider'};
            }
            unless ($POST{'txtmsg_number'}) {
                push @errors, $ML{'.error.txt.require.number'};
            }
        }

        # FIXME: validation AND POSTING are handled by widgets' handle_post() methods
        # (introduce validate_post() ?)
        my $save_search_index = $POST{'opt_showlocation'} =~ /^[YR]$/;
        LJ::Widget->handle_post(\%POST, 'Location' => {save_search_index => $save_search_index});

        return LJ::error_list( @errors ) if @errors;

        ### no errors

        my $dbh = LJ::get_db_writer();

        $POST{'url'} =~ s/\s+$//; $POST{'url'} =~ s/^\s+//;
        if ($POST{'url'} && $POST{'url'} !~ /^https?:\/\//) {
            $POST{'url'} =~ s/^http\W*//;
            $POST{'url'} = "http://$POST{'url'}";
        }

        my $newname = defined $POST{'name_absent'} ? $saved{'name'} : $POST{'name'};
        $newname =~ s/[\n\r]//g;
        $newname = LJ::text_trim($newname, LJ::BMAX_NAME, LJ::CMAX_NAME);

        my $newbio = defined($POST{'bio_absent'}) ? $saved{'bio'} : $POST{'bio'};
        my $has_bio = ($newbio =~ /\S/) ? "Y" : "N";
        my $txtmsg_status = $POST{'txtmsg_security'} =~ m/^(all|reg|friends)$/ ? "on" : "off";
        # setup what we're gonna update in the user table:
        my %update = (
                      'name' => $newname,
                      'bdate' => sprintf("%04d-%02d-%02d", $POST{'year'}, $POST{'month'}, $POST{'day'}),
                      'has_bio' => $has_bio,
                      'allow_getljnews' => $POST{'allow_getljnews'} ? "Y" : "N",
                      'txtmsg_status' => $txtmsg_status,
                      );

        if ($POST{'allow_contactshow'}) {
            $update{'allow_contactshow'} = $POST{'allow_contactshow'} if $POST{'allow_contactshow'} =~ m/^(N|R|Y|F)$/;
        }

        if (defined $POST{'oldenc'}) {
            $update{'oldenc'} = $POST{'oldenc'};
        }

        my $save_rv = LJ::Setting->save_all($remote, \%POST, \@settings);

        LJ::update_user($u, \%update);

        ### change any of the userprops ?
        {
            # opts
            $POST{'opt_showmutualfriends'} = $POST{'opt_showmutualfriends'} ? 1 : 0;
            $POST{'opt_hidefriendofs'} = $POST{'opt_hidefriendofs'} ? 0 : 1;
            $POST{'gender'} = 'U' unless $POST{'gender'} =~ m/^[UMFO]$/;
            $POST{'opt_sharebday'} = undef unless $POST{'opt_sharebday'} =~ m/^(A|F|N|R)$/;
            $POST{'opt_showbday'} = 'D' unless $POST{'opt_showbday'} =~ m/^(D|F|N|Y)$/;
            # undefined means show to everyone, "N" means don't show
            $POST{'opt_showlocation'} = undef unless $POST{'opt_showlocation'} =~ m/^(N|R|Y|F)$/;
            # Does the user want to show the LJ Talk field?  Y=Yes, N=No
            # In this case, the question is actually if they want to hide
            # it, hence looking for a value of 'N' before 'Y'.
            $POST{'opt_showljtalk'} = $POST{'opt_showljtalk'} ? 'N' : 'Y';
            $POST{'opt_showonlinestatus'} = '' unless $POST{'opt_showonlinestatus'} =~ m/^(Y|F|N)$/;

            # for the directory.
            $POST{'sidx_bdate'} = undef;
            $POST{'sidx_bday'}  = undef;

            # if they share their birthdate publically
            if ($POST{'opt_sharebday'} =~ /^[AR]$/) {
                # and actually provided a birthday
                if ($POST{'month'} > 0 && $POST{'day'} > 0) {
                    # and allow the entire thing to be displayed
                    if ($POST{'opt_showbday'} eq "F" && $POST{'year'}) {
                        $POST{'sidx_bdate'} = sprintf("%04d-%02d-%02d", map { $POST{$_} } qw(year month day));
                    }

                    # or allow the date portion to be displayed
                    if ($POST{'opt_showbday'} =~ /^[FD]$/) {
                        $POST{'sidx_bday'} = sprintf("%02d-%02d", map { $POST{$_} } qw(month day));
                    }
                }
            }

            my @uprops = qw(
              opt_whatemailshow comm_theme
              icq aolim yahoo msn url jabber
              google_talk skype
              twitter delicious
              urlname gender last_fm_user opt_hidefriendofs
              sidx_bdate sidx_bday
              opt_showmutualfriends
              opt_showbday opt_showlocation opt_showljtalk
              opt_sharebday opt_showonlinestatus
            );

            # reset the gizmo account for this user account
            $u->gizmo_account( $POST{'gizmo'} )
                if $u->gizmo_account ne $POST{'gizmo'};

            # set userprops
            foreach my $uprop (@uprops) {
                my $eff_val = $POST{$uprop};   # effective value, since 0 isn't stored
                $eff_val = "" unless $eff_val;
                my $mem_only = $eff_val eq $u->{$uprop};
                LJ::set_userprop($u, $uprop, $eff_val, $mem_only);
            }

            # location or bday could've changed... (who cares about checking exactly)
            $u->invalidate_directory_record;

            # bday might've changed
            $u->set_next_birthday;
        }

        # update their bio text
        LJ::EmbedModule->parse_module_embed($u, \$POST{'bio'});
        $u->set_bio($POST{'bio'}, $POST{'bio_absent'});

        # update their text messaging info
        my $tminfo = LJ::TextMessage->tm_info($u);
        # Check that text messaging is turned off and either
        # the provider or number have been set to null
        if ($txtmsg_status eq "off" &&
            (($tminfo->{'provider'} && ! $POST{'txtmsg_provider'}) ||
            ($tminfo->{'number'} && ! $POST{'txtmsg_number'})) )
        {
            $dbh->do("DELETE FROM txtmsg WHERE userid=?", undef, $u->{'userid'});
        } elsif ($txtmsg_status eq "on") {
            $dbh->do("REPLACE INTO txtmsg (userid, provider, number, security) VALUES (?, ?, ?, ?)",
                     undef, $u->{'userid'}, $POST{'txtmsg_provider'}, $POST{'txtmsg_number'}, $POST{'txtmsg_security'});
        }

        # clear text message security caches
        my $userid = $u->id;
        delete $u->{_txtmsgsecurity};
        my $memkey = [$userid, "txtmsgsecurity:$userid"];
        LJ::MemCache::delete($memkey);

        # update interests
        unless ($POST{'interests_absent'}) {
            my $maxinterests = $u->count_max_interests;

            my @ints = LJ::interest_string_to_list($POST{'interests'});
            my $intcount = scalar(@ints);
            my @interrors = ();

            # Don't bother validating the interests if there are already too many
            return LJ::bad_input( BML::ml('error.interest.excessive2', { intcount => $intcount, maxinterests => $maxinterests } ) ) if $intcount > $maxinterests;

            # Clean interests, and make sure they're valid
            my @valid_ints = LJ::validate_interest_list(\@interrors, @ints);
            if (@interrors > 0) {
                return LJ::bad_input( map { BML::ml(@$_) } @interrors );
            }

            $u->set_interests( \%interests, \@valid_ints );
        }

        LJ::Hooks::run_hooks('profile_save', $u);
        LJ::Hooks::run_hook('set_profile_settings_extra', $u, \%POST);

        # tell the user all is well
        my $base = $u->journal_base;
        my $profile_url = $u->profile_url;
        return "<?h1 $ML{'.success.header'} h1?>\n" .
                         "<?p $ML{'.success.text'} p?>" .
                         "<?p $ML{'.success.gonext'} p?>" .
                         "<ul><li><a href='$profile_url'>$ML{'.success.viewprofile'}</a></li>" .
                         "<li><a href='$LJ::SITEROOT/manage/profile/$getextra'>$ML{'.success.editprofile'}</a></li>" .
                         "<li><a href='$LJ::SITEROOT/editpics$getextra'>$ML{'.success.editpics'}</a></li></ul>";
    }

    # should never happen
    return "<?h1 $ML{'Error'} h1?><?p $ML{'error.unknownmode'} p?>";

}
_code?>
<=body
<?_comment head=><?_code return $headextra; _code?> _comment?>
page?>
