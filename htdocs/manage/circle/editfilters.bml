<?_code
{
    use strict;
    use vars qw(%GET %POST $title $body);

    LJ::set_active_crumb('managefriendgrps');

    $title = $ML{'.title2'};
    $body = "";

    my $print_with_ad = sub {
        my $str = shift;

        my $ad_box = LJ::get_ads({ location => 'bml.friends.editgroups/error', ljadwrapper => 1 });
        return $ad_box . $str;
    };

    my $err = sub {
        $title = $ML{'Error'};
        $body = $print_with_ad->(LJ::bad_input(@_));
        return;
    };

    # these are only used by the client-side for JS to play with.
    # we delete them because they may contain embedded NULLs, which
    # text_in won't like.
    delete $POST{'list_in'};
    delete $POST{'list_out'};
    
    unless (LJ::text_in(\%POST)) {
        $body = $print_with_ad->("<?badinput?>");
        return;
    }
    
    my $remote = LJ::get_remote();
    unless ($remote) {
        $body = $print_with_ad->("<?needlogin?>");
        return;
    }

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return $print_with_ad->($err->($ML{'error.invalidauth'}))
        unless $u;

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';
    
    my $trust_groups = $u->trust_groups;

    if ( $POST{mode} eq 'save' ) {
        unless (LJ::check_form_auth()) {
            $body = $print_with_ad->("<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>");
            return;
        }

        # add/edit/delete groups
        for ( my $i = 1; $i <= 60; $i++ ) {
            if ( $POST{"efg_delete_$i"} ) {
                # FIXME: delete the group!
            } elsif ( $POST{"efg_set_${i}_name"} ) {
                my $create = ref $trust_groups->{$i} eq 'HASH' ? 0 : 1;
                my $name = $POST{"efg_set_${i}_name"};
                my $sort = $POST{"efg_set_${i}_sort"};
                my $public = $POST{"efg_set_${i}_public"} ? 1 : 0;
                if ( $create ) {
                    $u->create_trust_group( id => $i, groupname => $name, sortorder => $sort, is_public => $public );
                } else {
                    $u->edit_trust_group( id => $i, groupname => $name, sortorder => $sort, is_public => $public );
                }
            }
        }

        # update users' trustmasks
        foreach my $post_key ( keys %POST ) {
            next unless $post_key =~ /^editfriend_groupmask_(\w+)$/;

            my $trusted_u = LJ::load_user( $1 );
            next unless $trusted_u;
            my $groupmask = $POST{$post_key};

            $u->add_edge( $trusted_u, trust => {
                mask => $groupmask,
                nonotify => 1,
            } );
        }

        $body .= LJ::get_ads({ 
            location    => 'bml.friends.editgroups/main', 
            ljadwrapper => 1,
            below_ad    => LJ::CProd->full_box_for($remote, width => 300)
        });
        $body .= "<?h1 $ML{'.saved.header'} h1?><?p $ML{'.saved.text'} p?>";

        return;
    }

    my @trusted_userids = $u->trusted_userids;
    my $trusted_us = LJ::load_userids( @trusted_userids );

    # authas switcher form
    $body .= "<form method='get' action='editfilters.bml'>\n";
    $body .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} }) . "\n";
    $body .= "</form>\n\n";

    $body .= "<?p $ML{'.text'} p?><?p $ML{'.text.sec'} p?><p>";
    $body .= "<form method='post' name='fg' action='editfilters.bml$getextra'>";
    $body .= LJ::form_auth();
    $body .= "<input type='hidden' name='mode' value='save' />";
    for ( my $i = 1; $i <= 60; $i++ ) {
        my $sort = 255;
        my $name = "";
        my $public = 0;

        if ( ref $trust_groups->{$i} eq 'HASH' ) {
            $sort = $trust_groups->{$i}->{sortorder}+0;
            $name = LJ::ehtml( $trust_groups->{$i}->{groupname} );
            $public = $trust_groups->{$i}->{is_public}+0;
        }

        $body .= "<input type='hidden' name='efg_set_${i}_name' value='$name' />";
        $body .= "<input type='hidden' name='efg_set_${i}_sort' value='$sort' />";
        $body .= "<input type='hidden' name='efg_delete_${i}' value='0' />";
        $body .= "<input type='hidden' name='efg_set_${i}_public' value='$public' />";
    }
    foreach my $uid ( @trusted_userids ) {
        my $trusted_u = $trusted_us->{$uid};
        next unless LJ::isu( $trusted_u );

        my $user = $trusted_u->user;
        my $mask = $u->trustmask( $trusted_u ) || 1;
        $body .= "<input type='hidden' name='editfriend_groupmask_$user' value='$mask' />";

        if ( $trusted_u->is_identity ) {
            my $dn = $trusted_u->display_name;
            $body .= "<input type='hidden' name='nameremap_$user' id='nameremap_$user' value='$dn' />";
        }
    }

    # escape strings for JavaScript
    my %T = qw(public  .group.public
               rename  .prompt.rename
               newname .prompt.newname
               delete  .confirm.delete
               max60   .error.max60
               );
    foreach (keys %T) { $T{$_} = LJ::ejs($ML{$T{$_}}); }
    
    $body .= <<"END_JS";
<SCRIPT LANGUAGE="JavaScript"><!--

 var selectedGroup = 0;

 function eraseList (list)
 {
     while (list.length) {
         list.options[0] = null;
     }
 }
 
 function groupClicked ()
 {
     var selIndex;

     var form = document.fg;
     var grouplist = form.list_groups;
     var inlist = form.list_in;
     var outlist = form.list_out;
     
     // figure out what they clicked, and bring their focus up to first free blank

     selIndex = grouplist.selectedIndex;
     if (selIndex == -1) { return; }
     var groupname = grouplist.options[selIndex].text;

     var newSelGroup = grouplist.options[selIndex].value;
     if (newSelGroup == selectedGroup) { return; }
     selectedGroup = newSelGroup;
     
     // clears the other "not in" and "in" boxes
     eraseList(inlist);
     eraseList(outlist);
   
     // iterate over all friends, putting them in one group or the other
     var i;
     for (i=0; i<form.elements.length; i++) {
         var name = form.elements[i].name;
         var mask = form.elements[i].value;
         if (name.substring(0, 21) == "editfriend_groupmask_") {
             var user = name.substring(21, name.length);

             // see if we remap their display name
             var display = user;
             if (document.getElementById) {
                 display = document.getElementById('nameremap_' + user);
                 if (display) {
                     display = display.value;
                 } else {
                     display = user;
                 }
             }

             var list = mask & (1 << selectedGroup) ? inlist : outlist;
             var optionName = new Option(display, user, false, false)
                 list.options[list.length] = optionName;
         }
     }
 }

 function moveItems (from, to, bitstatus)
 {
     var selindex;
     while ((selindex=from.selectedIndex) != -1)
     {
         var i;
         var item = new Option(from.options[selindex].text,
                               from.options[selindex].value,
                               false, true);

         from.options[selindex] = null;
         //to.options[to.options.length] = item;

         // find spot to put new item
         for (i=0; i<to.options.length && to.options[i].text < item.text; i++) { }
         var newindex = i;

         // move everything else down
         for (i=to.options.length; i>newindex; i--) {
                  to.options[i] = new Option(to.options[i-1].text,
                                        to.options[i-1].value,
                                        false,
                                        to.options[i-1].selected);
         }
         to.options[newindex] = item;

         // turn the groupmask bit on or off
         var user = item.value;
         var element = document.fg["editfriend_groupmask_"+user];
         var mask = element.value;
         if (bitstatus) {
             mask |= (1 << selectedGroup);
         } else {
             mask &= ~(1 << selectedGroup);
         }
         element.value = mask;
     }
 }

 function moveIn ()
 {
     if (! selectedGroup) { return; }
     var form = document.fg;
     var inlist = form.list_in;
     var outlist = form.list_out;
     moveItems(document.fg.list_out, document.fg.list_in, true);
 }
 function moveOut ()
 {
     if (! selectedGroup) { return; }
     moveItems(document.fg.list_in, document.fg.list_out, false);
 }

 function moveGroup (dir)
 {
     var list = document.fg.list_groups;
     var selindex = list.selectedIndex;
     if (selindex==-1) { return; }
     var toindex = selindex+dir;
     if (toindex < 0 || toindex >= list.options.length) { return; }
     var selopt = new Option(list.options[selindex].text,
                             list.options[selindex].value,
                             false,
                             list.options[selindex].selected);
     var toopt = new Option(list.options[toindex].text,
                            list.options[toindex].value,
                            false,
                            list.options[toindex].selected);
     list.options[toindex] = selopt;
     list.options[selindex] = toopt;    

     // stupid mozilla necessity:
     list.selectedIndex = toindex;

     setSortOrders();
 }

 function setSortOrders ()
 {
     var list = document.fg.list_groups;

     // set all their sort orders now
     var i;
     for (i=0; i<list.options.length; i++) {
         var item = list.options[i];
         var key = "efg_set_"+item.value+"_sort";
         document.fg[key].value = (i+1)*5;
     }
 }

 function realName (name)
 {
     var rname = name;
     var index = name.lastIndexOf(" $T{'public'}");
     if (index != -1) {
         rname = name.substr(0, index);
     }
     return rname;
 }
    
 function renameGroup ()
 {
     var list = document.fg.list_groups;
     var selindex = list.selectedIndex;
     if (selindex==-1) { return; }
     var item = list.options[selindex];

     var newtext = realName(item.text);
     newtext = prompt("$T{'rename'}", newtext);
     if (newtext==null || newtext == "") { return; }

     var gnum = item.value;
     document.fg["efg_set_"+gnum+"_name"].value = newtext;     
     if (document.fg["efg_set_"+gnum+"_public"].value == 1) {
         newtext = newtext + " $T{'public'}";
     }
     item.text = newtext;
 }

 function deleteGroup ()
 {
     var list = document.fg.list_groups;
     var selindex = list.selectedIndex;
     if (selindex==-1) { return; }
     var item = list.options[selindex];

     var conf = confirm("$T{'delete'}");
     if (!conf) { return; }

     // mark it to be deleted later
     var gnum = item.value;
     document.fg["efg_delete_"+gnum].value = "1";
     document.fg["efg_set_"+gnum+"_name"].value = "";

     // as per the protocol documentation, unset bit on all friends
     var i;
     var form = document.fg;
     for (i=0; i<form.elements.length; i++) {
         var name = form.elements[i].name;
         if (name.substring(0, 21) == "editfriend_groupmask_") {
             var user = name.substring(21, name.length);
             var mask = form.elements[i].value;
             mask &= ~(1 << gnum);
             form.elements[i].value = mask;
         }
     }

     // clean up the UI
     list.options[selindex] = null;
     eraseList(document.fg.list_in);
     eraseList(document.fg.list_out);
 }

 function makePublic ()
 {
     var list = document.fg.list_groups;
     var selindex = list.selectedIndex;
     if (selindex==-1) { return; }
     var item = list.options[selindex];

     var name = realName(item.text);
     item.text = name + " $T{'public'}";
   
     var gnum = item.value;
     document.fg["efg_set_"+gnum+"_public"].value = "1";
 }

 function makePrivate ()
 {
     var list = document.fg.list_groups;
     var selindex = list.selectedIndex;
     if (selindex==-1) { return; }
     var item = list.options[selindex];

     var name = realName(item.text);
     item.text = name;     

     var gnum = item.value;
     document.fg["efg_set_"+gnum+"_public"].value = "0";
 }

 function newGroup ()
 {
     var form = document.fg;
     var i;
     var foundg = false;
     for (i=1; i<=60; i++) {
         if (form["efg_delete_"+i].value==1) { continue; }
         if (form["efg_set_"+i+"_name"].value!="") { continue; }
         foundg = true;
         break;	 
     }
     if (! foundg) {
         alert("$T{'max60'}");
         return;
     }
     var gnum = i;
     var groupname = prompt("$T{'newname'}", "");
     if (groupname==null || groupname=="") { return; }

     form["efg_set_"+gnum+"_name"].value = groupname;
     var item = new Option(groupname, gnum, false, true);
     var list = form.list_groups;
     list.options[list.options.length] = item;
     list.options.selectedIndex = list.options.length-1;
     setSortOrders();
     groupClicked();
 }

// --></SCRIPT>
END_JS

    $body .= "<table class='editfilters'><tr style='vertical-align: bottom;'>";
    $body .= "<td nowrap='1' colspan='2'><strong>$ML{'.yourgroups'}</strong></td>";
    $body .= "<td nowrap='1' colspan='2'><strong>$ML{'.ingroup.not'}</strong></td>";
    $body .= "<td nowrap='1'><strong>$ML{'.ingroup'}</strong></td></tr>";

    $body .= "<tr style='vertical-align: top;'>";
    $body .= "<td><select name='list_groups' style='width: 150px;' size='15' onchange='groupClicked();'>";
    foreach my $trustgroupid ( sort { $trust_groups->{$a}->{sortorder} <=> $trust_groups->{$b}->{sortorder} } keys %$trust_groups ) {
        my $listname = $trust_groups->{$trustgroupid}->{groupname};
        $listname .= " $ML{'.group.public'}" if $trust_groups->{$trustgroupid}->{is_public};
        $body .= "<option value='$trustgroupid'>" . LJ::ehtml($listname);
    }
    $body .= "</select></td>";
 
    $body .= "<td style='vertical-align: middle;'>";
    $body .= "<input type='button' value='$ML{'.btn.mv.up'}' onClick='moveGroup(-1);' /><br /><br />";
    $body .= "<input type='button' value='$ML{'.btn.mv.down'}' onClick='moveGroup(1);' /></td>";

    $body .= "<td><select name='list_out' multiple='1' size='15'>";
    $body .= "<option value=''>---------------</option></select></td>";

    $body .= "<td style='vertical-align: middle;'>";
    $body .= "<input type='button' onClick='moveIn();' value='&gt;&gt;' /><br /><br />";
    $body .= "<input type='button' onClick='moveOut();' value='&lt;&lt;' /></td>";

    $body .= "<td><select name='list_in' multiple='1' size='15'>";
    $body .= "<option value=''>---------------</option></select></td>";

    $body .= "</tr><tr><td colspan='2'>";
    $body .= "<nobr>";
    $body .= "<input type='button' value='$ML{'.btn.ge.new'}' onClick='newGroup();' /> ";
    $body .= "<input type='button' value='$ML{'.btn.ge.del'}' onClick='deleteGroup();' /> ";
    $body .= "<input type='button' value='$ML{'.btn.ge.ren'}' onClick='renameGroup();' />";
    $body .= "</nobr></td><td></td><td></td><td></td>";

    $body .= "</tr></table>";

    $body .= "<?h1 $ML{'.done.header'} h1?><?p $ML{'.done.text'} p?>";
    $body .= "<?p <input type='submit' value='$ML{'.done.btn'}' /> p?>";
    $body .= "</form>";

    $body = $print_with_ad->($body);
    return;
}
_code?><?page
title=><?_code return $title; _code?>
body=><?_code return $body; _code?>
page?><?_c <LJDEP>
link: htdocs/login.bml
post: htdocs/manage/circle/editfilters.bml
</LJDEP> _c?>
