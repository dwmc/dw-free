<?page
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST $title $headextra @errors @warnings);

    $title = "$LJ::SMS_TITLE Settings";

    LJ::need_res(qw(
                    stc/sms.css
                    stc/sms-local.css
                    ));

    my $u = LJ::get_remote()
        or return "<?needlogin?>";

    return "Your account must be active to use this page"
        unless $u->is_visible;

    return "This feature is currently disabled." 
        unless $u->can_use_sms;

    # get friend groups
    my $fgroupsref = LJ::get_friend_group($u);
    my @fgroups = $fgroupsref ? sort { $a->{sortorder} <=> $b->{sortorder} } values %$fgroupsref : ();

    # perhaps a hook wants us to redirect
    my $redir;

    LJ::run_hook('sms_bml_init', $u);

    # process changes
    if (LJ::did_post()) {

        # sms notification checkbox
        if ($POST{notif} eq 'on') {
            $u->set_prop('sms_post_notify', 'SMS');
        } else {
            $u->set_prop('sms_post_notify', '');
        }

        # set carrier
        {
            if (%LJ::SMS_CARRIERS && $POST{carrier} && grep { $_ eq $POST{carrier} } keys %LJ::SMS_CARRIERS) {
                $u->set_prop('sms_carrier', $POST{carrier});

            # invalid carrier
            } elsif ($POST{carrier}) {
                push @errors, 'Invalid carrier selection';

            # clear carrier
            } elsif (! $POST{carrier} && ! $POST{msisdn}) {
                $u->set_prop('sms_carrier' => undef);
            }
        }

        my $new_msisdn = $POST{msisdn};

        # user posted but with blank msisdn, clear it if it's mapped
        unless ($new_msisdn) {
            $u->delete_sms_number;
            $u->set_prop('sms_carrier' => undef);
        }

        # strip out invalid characters
        $new_msisdn =~ s/[^\+\d]//g if $new_msisdn;

        # normalize given number to actual msisdn for storage in db
        if ($new_msisdn =~ /^\+?1?(\d{10})$/ && $1 !~ /^555/ && $u->prop('sms_carrier')) {
            # strip off leading + and leading 1, then re-add to normalize
            $new_msisdn =~ s/^\+//;
            $new_msisdn =~ s/^1//;

            # keep around a stripped version of the new msisdn, but also 
            # make $new_msisdn a canonicalized version with +1
            my $new_msisdn_stripped = $new_msisdn;
            $new_msisdn = "+1$new_msisdn";

            # check for sysban on this msisdn
            if (LJ::sysban_check('msisdn', $new_msisdn_stripped)) {
                LJ::sysban_note($u->id, "Tried to register a banned MSISDN", { msisdn => $new_msisdn });
                  return LJ::error_list("The number $new_msisdn could not be registered.");
            }

            # if user has clicked reregister or entered a number which doesn't
            # match their current mapping...
            if ($POST{reregister} || $u->sms_mapped_number ne $new_msisdn) {
                # in this instance we're looking to see if someone already has this
                # number verified in order to check for number stealing below
                my $existing_num_uid = LJ::SMS->num_to_uid($new_msisdn, verified_only => 1);

                # don't let them steal a number!
                if ($existing_num_uid && $existing_num_uid != $u->id) {
                    push @errors, "That number is currently in use by another user.";

                # check rate limiting
                } elsif (! $u->rate_log('sms_register', 1)) {
                    push @errors, "You have tried to register a number too many times in one day. " .
                        "Please wait and try again.";

                } else {
                    # map the number
                    $u->set_sms_number($new_msisdn, verified => 'N'); # not verified

                    # run the post-reg hook
                    LJ::run_hook('sms_post_register', u => $u, redir => \$redir, errors => \@errors);
                }
            }
        } elsif (! $u->prop('sms_carrier') && $POST{msisdn}) {
            # tried to set number but no carrier set
            push @errors, "You must select a carrier in order to register";
        } else {
            # user has not entered a valid number for registration
            push @errors, "You must enter a valid U.S. 10-digit phone number" if $POST{msisdn};
        }

        if ($POST{fgroup} && grep { $_->{groupname} eq $POST{fgroup} } @fgroups) {
            $u->set_prop('sms_friend_group', $POST{fgroup});
        } elsif ($POST{fgroup}) {
            push @errors, "Invalid friend group";
        } else {
            # no friend group, clear the prop
            $u->set_prop('sms_friend_group', '');
        }

        LJ::run_hook('sms_bml_post', u => $u, POST => \%POST,
                     errors => \@errors, warnings => \@warnings,
                     redir => \$redir);

        return BML::redirect($redir) if $redir;
    }

    my $status = LJ::run_hook("sms_status_msg", $u);

    my $current_msisdn = $POST{msisdn} || $u->sms_mapped_number;
    my ($area, $prefix, $num) = $current_msisdn =~ /\+1(\d{3})(\d{3})(\d{4})/ if $current_msisdn;
    $current_msisdn = "$area-$prefix-$num" if $area && $prefix && $num;

    my $msisdn = LJ::html_text({
        name => 'msisdn',
        value => $current_msisdn
    });

    # build list of carriers for display
    my $carrier;
    if (%LJ::SMS_CARRIERS) {
        my @carriers = ();

        my @keys = @LJ::SMS_CARRIER_ORDER ? @LJ::SMS_CARRIER_ORDER : keys %LJ::SMS_CARRIERS;

        foreach my $k (@keys) {
            my $v = $LJ::SMS_CARRIERS{$k} or next;
            $v .= '<super>&reg;</super>' unless $k eq 'other';
            push @carriers, ($k, $v);
        }

        $carrier = LJ::html_select({noescape => 1, name => 'carrier', selected => $u->prop('sms_carrier')},
                                   ('', '(Select Carrier)'), @carriers);
    }

    my $fgroup = LJ::html_select({name => 'fgroup', selected => $u->prop('sms_friend_group')},
                                ('', '(All Friends)'), map { $_, $_ } map { $_->{groupname} } @fgroups);

    my $body = '';

    my $carrier_html = $carrier || '';

    my $extra_fields = LJ::run_hook("sms_manage_extra_fields", $u);

    my $notif = LJ::html_check({
        name     => "notif",
        selected => ($u->prop('sms_post_notify') eq 'SMS'),
        id       => "notif",
        label    => "Notify me of comments to posts made using $LJ::SMS_TITLE by text message",
    });

    $body .= qq {
        <p>$LJ::SMS_TITLE allows you to send and receive text messages with $LJ::SITENAMESHORT to post to your journal, add a friend and <a href="$LJ::HELPURL{sms_about}">more...</a></p>

        <table cellspacing='6' cellpadding='0' border='0' id="settings">
        <tr><td width='35%' class='setup'>
        <h2>Setup</h2>
        <div>Enter in your full phone number and carrier below. A confirmation message will be sent to your phone. Once you get it, reply "YES" and you are set up.</div>

        <form method="POST" action="$LJ::SITEROOT/manage/sms/index.bml">

        <table id="SMS_Setup">
        <tr><td><span class="Label">Status</span><br/>$status</td></tr>
        <tr><td><span class="Label">Full Phone Number</span><br/>$msisdn<br/><small>(e.g. 555-555-1212)</small></td></tr>
        <tr><td><span class="Label">Carrier</span><br/>$carrier</td></tr>
        <tr><td><span class="Label">Default Text Friends Page Display</span><br/>$fgroup</td></tr>
    };

    { # disable flag/subref for this sub-feature
        my $dis = $LJ::DISABLED{'sms_post_auto_subscribe'};
        $dis = $dis->() if ref $dis eq 'CODE';
        unless ($dis) {
            $body .= qq{<tr><td><span class="Label">$notif</td></tr>};
        }
    }

    $body .= qq {
        $extra_fields
        </table>
        </td>
    };

    $body .= "<td width='65%' style='padding: 0 0 0 .9em'>";
    $body .= LJ::run_hook('sms_bml_content', $u);
    $body .= LJ::run_hook('sms_tos') || '';
    $body .= "</td></tr></table>";

    my $btn_label = $u->sms_active ? "Save Changes" : "Continue";
    $body .= "<div class='standout'><table class='container'>";
    $body .= "<tr><td><input type='submit' value='$btn_label' id='sms_submit' /></td></tr>";
    $body .= "</table></div></form>";

    $body .= LJ::run_hook('sms_footer') || '';

    return $body;
}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<?_code return $headextra; _code?>
<=head
<=body
page?>
