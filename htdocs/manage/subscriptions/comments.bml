<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    use strict;
    use vars qw (%POST %GET $body $title $headextra @errors);
    use Carp qw(croak);
    use LJ::Subscription;

    $title = 'Manage Message Settings';

    return "Not ready" unless LJ::is_enabled('esn');

    use Class::Autouse qw(
                          LJ::NotificationMethod
                          LJ::Event
                          LJ::Comment
                          );

    BML::decl_params(
                     lj_form_auth => qr/./,
                     journal      => 'word',
                     dtalkid     => 'digits',
                     ditemid     => 'digits',
                     talkid      => 'digits',
                     itemid      => 'digits',
                     );

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $ditemid = $POST{'itemid'} || $GET{'itemid'} || $POST{'ditemid'} || $GET{'ditemid'};
    my $dtalkid = $POST{'talkid'} || $GET{'talkid'} || $POST{'dtalkid'} || $POST{'dtalkid'};
    my $journal = $POST{'journal'} || $GET{'journal'};

    my $journal = LJ::load_user($journal) or return LJ::error_list("Invalid journal '$journal'");

    return LJ::error_list("No talkid specified") unless $dtalkid;

    my $comment = LJ::Comment->new($journal, dtalkid => $dtalkid);

    return LJ::error_list("Invalid comment") unless $comment && $comment->visible_to($remote);
    return LJ::error_list("This comment has been deleted.") if $comment->is_deleted;

    my $entry = $comment->entry;
    $ditemid ||= $entry->ditemid;

    my $thread_sub = LJ::Subscription::Pending->new(
                                                    $remote,
                                                    journal          => $journal,
                                                    event            => 'JournalNewComment',
                                                    arg2             => $comment && $comment->jtalkid,
                                                    default_selected => 1,
                                                    flags            => LJ::Subscription::TRACKING,
                                                    );

    my $can_watch = $thread_sub->available_for_user;

    push @errors, $ML{'.error.threads'}
        unless $can_watch;

    my @pending = $thread_sub;

    push @pending, LJ::Subscription::Pending->new(
                                                  $remote,
                                                  journal => $journal,
                                                  event   => 'JournalNewComment',
                                                  arg1    => $ditemid,
                                                  # select by default only if they can't watch the subthread above
                                                  default_selected => $can_watch ? 0 : 1,
                                                  flags   => LJ::Subscription::TRACKING,
                                                  );

    # only administrators of a community and members of a paid community 
    # should be given the option to track all comments on another journal
    push @pending,
        LJ::Subscription::Pending->new(
                                       $remote,
                                       event   => "JournalNewComment",
                                       journal => $journal,
                                       flags   => LJ::Subscription::TRACKING,
                                       ) if $remote->can_track_all_community_comments ( $journal );

    my $categories = [ { 'Track Comments' => [ @pending ] } ];

    my $referer = BML::get_client_header('Referer');
    my ( $style ) = ( $referer =~ /\b(style=\w+)/ );
    $style = LJ::viewing_style_args( split( /=/, $style ) );

    return LJ::subscribe_interface(
                                   $remote,
                                   categories => $categories,
                                   journal => $journal,
                                   ret_url => ($can_watch ? $comment->url( $style ) : $entry->url . "?$style" ),
                                   default_selected_notifications => ['LJ::NotificationMethod::Email'],
                                   post_to_settings_page => 1,
                                   );

}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<style type='text/css'>
</style>
<?_code return $headextra; _code?>
<=head
<=body
page?>

