<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    use strict;
    use vars qw (%POST %GET $body $title $headextra);
    use Carp qw(croak);
    use LJ::NotificationMethod;
    use LJ::Event;

    $title = 'Manage Message Settings';

    return "Not ready" unless LJ::is_enabled('esn');

    BML::decl_params(
                     lj_form_auth => qr/./,
                     journal      => 'word',
                     ditemid     => 'digits',
                     itemid      => 'digits',
                     );

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $ditemid = $POST{'itemid'} || $GET{'itemid'} || $POST{'ditemid'} || $GET{'ditemid'};
    my $journal = $POST{'journal'} || $GET{'journal'};
    my $ntypeid = int($POST{'ntypeid'});

    my $journal = LJ::load_user($journal) or return LJ::error_list("Invalid journal '$journal'");

    return LJ::error_list("No entry specified") unless $ditemid;

    my $entry = LJ::Entry->new($journal, ditemid => $ditemid);

    return LJ::error_list("Invalid entry") unless $entry && $entry->valid;
    return LJ::error_list("You are not authorized to subscribe to this entry.") unless $entry->visible_to($remote);

    my $cat_title = 'Track Entry';
    my $categories =
        [
            { $cat_title =>
                [
                    LJ::Subscription::Pending->new( $remote,
                        event   => "JournalNewComment",
                        arg1    => $ditemid,
                        journal => $journal,
                        default_selected => 1,
                        flags   => LJ::Subscription::TRACKING,
                    ),

                    LJ::Subscription::Pending->new( $remote,
                        event   => "JournalNewComment::TopLevel",
                        arg1    => $ditemid,
                        journal => $journal,
                        default_selected => 0,
                        flags   => LJ::Subscription::TRACKING,
                    ),
                ],
            }
        ];

    # only administrators of a community and members of a paid community 
    # should be given the option to track all comments on another journal
    push @{ @$categories[0]->{$cat_title} },
        LJ::Subscription::Pending->new( $remote,
            event   => "JournalNewComment",
            journal => $journal,
            flags   => LJ::Subscription::TRACKING,
        ) if $remote->can_track_all_community_comments( $journal );

    push @{ @$categories[0]->{$cat_title} },
        LJ::Subscription::Pending->new( $remote,
            event   => "JournalNewEntry",
            arg1    => '?',
            journal => $journal,
            entry   => $entry,
            flags   => LJ::Subscription::TRACKING,
        ),
        LJ::Subscription::Pending->new( $remote,
            event   => "JournalNewEntry",
            journal => $journal,
            flags   => LJ::Subscription::TRACKING,
        );

    my $referer = BML::get_client_header('Referer');
    my ( $style ) = ( $referer =~ /\b(style=\w+)/ );
    $style = LJ::viewing_style_args( split( /=/, $style ) );

    $body .= LJ::subscribe_interface( $remote,
                 journal      => $journal,
                 categories   => $categories,
                 ret_url      => $entry->url . "?$style",
                 default_selected_notifications => ['LJ::NotificationMethod::Email'],
                 post_to_settings_page => 1,
             );

    return $body;
}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<style type='text/css'>
</style>
<?_code return $headextra; _code?>
<=head
<=body
page?>

