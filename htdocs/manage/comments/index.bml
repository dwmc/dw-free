<?page
title=><?_code return $ML{'.title2'} _code?>
body<=
<?_code
    LJ::set_active_crumb('managecommentsettings');
    return;
_code?>

<?_code
{
    use strict;
    use vars qw(%POST %GET $head);

    my $print_with_ad = sub {
        my $str = shift;

        my $ad_full_width = LJ::ad_display( type => 'app', orient => 'BML-App-Full-Width' );
        return $ad_full_width . $str;
    };

    return $print_with_ad->(LJ::server_down_html()) if $LJ::SERVER_DOWN;

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return $print_with_ad->(LJ::bad_input("You could not be authenticated as the specified user."))
        unless $u;

    return $print_with_ad->($LJ::MSG_READONLY_USER) if $u->readonly;

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';

    ### user is now authenticated ###

    # load user props
    LJ::load_user_props(
        $u, { use_master => 1 },
        qw/ opt_whoscreened opt_logcommentips
            opt_getselfemail /
    );

    # to store values before they undergo normalisation
    my %saved = ();

    # clean userprops
    foreach (values %$u) { LJ::text_out(\$_); }

    ###
    ### no post, show edit form
    ###
    $head = "";

    unless (LJ::did_post()) {

        my $ret;

        $ret .= "<div>";
        # user switcher
        $ret .= "<form method='get' action='index.bml'>\n";
        $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
        $ret .= "</form>\n\n";

        $ret .= "<?p $ML{'.intro'} p?>";
        $ret .= "</div>\n";

        $ret.= "<div class='ljclear'></div>\n";


        $ret .= "<form method='post' action='index.bml$getextra'>\n";
        $ret .= LJ::form_auth();

        # personal information
        $ret .= "<div class='section_head'>" . ($u->is_comm ? $ML{'.section.commcomments'} : $ML{'.section.journalcomments'}) . "</div>\n";
        $ret .= "<table class='field_block'>\n";

        # Enable comments
        $ret .= "<tr><td class='field_name'>$ML{'.fn.enablecomments'}</td>\n<td>";
        $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_showtalklinks', 'id' => 'opt_showtalklinks',
                                 'selected' => $u->{'opt_showtalklinks'} eq 'Y' });
        $ret .= " $ML{'.enablecommenting'}: ";
        $ret .= LJ::html_select({ 'name' => 'opt_whocanreply', 'selected' => $u->{'opt_whocanreply'} },
                                  "all" => BML::ml(".security.visibility.everybody"),
                                  "reg" => BML::ml(".security.visibility.regusers"),
                                  "friends" => ($u->is_comm ? BML::ml(".security.visibility.members") : BML::ml(".security.visibility.friends")) );
        $ret .= "<ul class='helper'><li>" . ($u->is_comm ? $ML{'.disablecomment1.comm'} : $ML{'.disablecomment1'}) . "</li>\n";
        $ret .= "<li>$ML{'.disablecomment2.1'}</li></ul>\n";
        $ret .= "</td></tr>\n";

        # Comment screening
        $ret .= "<tr><td class='field_name'>$ML{'.fn.screening'}</td>\n<td>";
        $ret .= "$ML{'.screen'}: ";
        $ret .= LJ::html_select({ 'name' => 'opt_whoscreened', 'selected' => $u->{'opt_whoscreened'} },
                                  "N" => BML::ml(".security.visibility.noone"),
                                  "R" => BML::ml(".security.visibility.anon"),
                                  "F" => ($u->is_comm ? BML::ml(".security.visibility.notmember") : BML::ml(".security.visibility.notfriends")),
                                  "A" => BML::ml(".security.visibility.everyone") );
        $ret .= "<br /><span class='helper'>\n$ML{'.screen.text'}</span>";
        $ret .= "</td></tr>\n";

        # IP address log
        $ret .= "<tr><td class='field_name'>$ML{'.fn.iplog'}</td>\n<td>";
        $ret .= " $ML{'.logip'}: ";
        $ret .= LJ::html_select({ 'name' => 'opt_logcommentips', 'selected' => $u->{'opt_logcommentips'} },
                                  "N" => BML::ml(".security.visibility.noone"),
                                  "S" => BML::ml(".security.visibility.anon"),
                                  "A" => BML::ml(".security.visibility.everyone") );
        $ret .= "<br />\n<span class='helper'>" . ($u->is_comm ? $ML{'.logip.text.comm'} : $ML{'.logip.text'}) . "</span>";
        $ret .= LJ::help_icon('iplogging');
        $ret .= "</td></tr>\n";

        # Email notifications; notifications only go to entry/comment posters (journaltype P or I)
        if ($u->is_person || $u->is_identity) {
            $ret .= "<tr><td class='field_name'>$ML{'.fn.emailnotify'}</td>\n<td>";
            $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_gettalkemail', 'id' => 'opt_gettalkemail',
                                     'selected' => $u->prop('opt_gettalkemail') eq 'Y' });
            $ret .= " $ML{'.emailnotify'}</label><br />\n";
            $ret .= "$ML{'.fn.emailformat'}: ";
            $ret .= LJ::html_select({ 'name' => 'opt_htmlemail', 'id' => 'opt_htmlemail',
                                      'selected' => $u->prop('opt_htmlemail')},
                                    "N", BML::ml(".formatplain"), "Y", BML::ml(".formathtml") );
            $ret .= "</td></tr>\n";
        }

        $ret .= "</table>\n";

        if ($u->is_person) { # same logic as above
            # Your comments
            $ret .= "<div class='section_head'>$ML{'.section.makecomments'}</div>\n";
            $ret .= "<table class='field_block'>\n";

            # Comment notifications
            $ret .= "<tr><td class='field_name'>$ML{'.fn.commentnotify'}</td>\n<td>";
            $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_getselfemail', 'id' => 'opt_getselfemail',
                                     'selected' => $u->{'opt_getselfemail'},
                                     'disabled' => !LJ::get_cap($u, 'getselfemail') });
            $ret .= " $ML{'.commentnotify'}<br />\n";
            $ret .= "<span class='helper'>$ML{'.commentnotify.text'}</span>\n";
            $ret .= "</td></tr>\n";
            $ret .= "</table>\n";
        }

        # Banned Users
        my $banned = LJ::load_rel_user($u, 'B');
        if ($banned && @$banned) {
            my $us = LJ::load_userids(@$banned);
            $ret .= "<div class='section_head'>$ML{'.section.banned'}</div>\n";
            $ret .= "<table class='field_block'>\n";

            # Unban users
            $ret .= "<tr><td class='field_name'>$ML{'.fn.unban'}</td>\n<td>";
            $ret .= ($u->is_comm ? $ML{'.unban.comm'} : $ML{'.unban'}) ."<br />\n";
            foreach (@$banned) {
                my $bu = $us->{$_};
                next unless $bu;
                $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'unban', 'id' => "unban-$bu->{'user'}",
                                                                 'value' => $bu->{'userid'} });
                $ret .= " <label for='unban-$bu->{'user'}'>$bu->{'user'}</label><br />\n";
            }
            $ret .= "</td></tr>\n";

            $ret .= "</table>\n";
        }

        # ending submit block
        $ret .= "<?standout " . LJ::html_submit(undef, $ML{'.finished.save_button'}) . " standout?>\n";
        $ret .= "</form>\n";

        return $print_with_ad->($ret);
    }


    ###
    ### we have a post, process edits
    ###

    if (LJ::did_post()) {
        return $print_with_ad->("<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>") unless LJ::check_form_auth();

        $POST{'unban'} =~ s/\0/,/g;
        return $print_with_ad->("<?badinput?>") unless LJ::text_in(\%POST);

        my $dbh = LJ::get_db_writer();
        # setup what we're gonna update in the user table:
        my %update = (
                      'opt_showtalklinks' => $POST{'opt_showtalklinks'} ? "Y" : "N",
                      'opt_gettalkemail'  => $POST{'opt_gettalkemail'} ? "Y" : "N",
                      'opt_htmlemail'     => $POST{'opt_htmlemail'},
                      'opt_whocanreply' => $POST{'opt_whocanreply'},
                      );

        LJ::update_user($u, \%update);

        ### change any of the userprops ?
        {
            # opts
            $POST{'opt_getselfemail'} = $POST{'opt_getselfemail'} ? 1 : 0;
            $POST{'opt_whoscreened'} = "N" unless $POST{'opt_whoscreened'} =~ m/^(N|R|F|A)$/;
            if ($POST{'opt_logcommentips'} ne "N" &&
                $POST{'opt_logcommentips'} ne "S" &&
                $POST{'opt_logcommentips'} ne "A") { $POST{'opt_logcommentips'} = "N"; }

            my @uprops = qw(
              opt_whoscreened opt_logcommentips
              opt_getselfemail
            );


            # set userprops
            foreach my $uprop (@uprops) {
                my $eff_val = $POST{$uprop};   # effective value, since 0 isn't stored
                $eff_val = "" unless $eff_val;
                my $mem_only = $eff_val eq $u->{$uprop};
                LJ::set_userprop($u, $uprop, $eff_val, $mem_only);
            }
        }

        # now unban users they selected to be unbanned
        if ($POST{'unban'}) {
            my @banlist = split(/,/, $POST{'unban'});
            my $bannedin = join(",", map { $dbh->quote($_); } @banlist);
            $dbh->do("DELETE FROM reluser WHERE userid=? AND type='B' AND targetid IN ($bannedin)", undef, $u->{'userid'});
            $u->log_event('ban_unset', { actiontarget => $_, remote => $remote }) foreach (@banlist);
        }

        # tell the user all is well
        my $base = $u->journal_base;
        my $profile_url = $u->profile_url;
        my $ad_box = LJ::ad_display( type => 'app', orient => 'BML-App-Confirm', below_ad => LJ::CProd->full_box_for($remote, width => 300) );
        return $ad_box . "<?h1 $ML{'.success.header'} h1?>\n" .
                         "<?p $ML{'.success.text'} p?>" .
                         LJ::Widget::GettingStarted->render;
    }

    # should never happen
    return $print_with_ad->("<?h1 $ML{'Error'} h1?><?p $ML{'error.unknownmode'} p?>");

}
_code?>

<=body
head<=
<?_code
    LJ::need_res('stc/lj_base.css', 'stc/lj_settings.css');
    return $head;
_code?>
<=head
page?>
