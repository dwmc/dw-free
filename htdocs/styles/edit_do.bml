<?page
title=>Edit Style
body<=

<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('editstyle');

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    # authenticate user
    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    my $inline;
    unless (LJ::get_cap($u, "styles") || LJ::get_cap($u, "s2styles")) {
        if ($inline .= LJ::run_hook("cprod_inline",$u,'EditStyles')) {
            return $inline;
        } else {
            return $ML{'cprod.editstyles.text.v1'};
        }
    }

    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

    # get a style object
    my $styleid = $POST{'styleid'}+0;
    my $style = LJ::S1::get_style($styleid);
    return LJ::bad_input($ML{'.error.nostyle'})
        unless $style;

    # some static data
    my @style_opts = (
        { 'code' => "is_public",
          'title' => $ML{'.opts.public.title'},
          'des' => $ML{'.opts.public.des'} },
        { 'code' => "is_embedded", 
          'title' => $ML{'.opts.embedded.title'},
          'des' => $ML{'.opts.embedded.des'} },
        { 'code' => "is_colorfree",
          'title' => $ML{'.opts.colorfree.title'},
          'des' => $ML{'.opts.colorfree.des'} },
    );
    my @style_transforms = (
        { 'trans' => 'lc',
          'des' => $ML{'.transforms.lc.des'} },
        { 'trans' => 'uc',
          'des' => $ML{'.transforms.uc.des'} },
        { 'trans' => 'ue',
          'des' => $ML{'.transforms.ue.des'} },
        { 'trans' => 'xe', 
          'des' => $ML{'.transforms.xe.des'} },
        { 'trans' => 'color',
          'des' => $ML{'.transforms.color.des'} },
        { 'trans' => 'cons', 
          'des' => $ML{'.transforms.cons.des'} },
        { 'trans' => 'ljuser',
          'des' => $ML{'.transforms.ljuser.des'} },
        { 'trans' => 'ljcomm',
          'des' => $ML{'.transforms.ljcomm.des'} },
        { 'trans' => 'userurl',
          'des' => $ML{'.transforms.userurl.des'} },
    );
    
    # construct ide and mode variables
    my $ide = $POST{'ide'};
    my $mode = $POST{'mode'} || 'editstyle';
    if ($mode eq 'editstyle') {
        if ($ide eq 'delete') {
            $mode = 'delete';
        } else {
            $ide = $ide eq 'v1' ? 'v1' : 'v2';
            $mode = 'editstyle';
        }
    }

    ### start of output

    my $ret = "";
    # pass authas arguments in forms if necessary
    my $getextra = "?authas=$authas" if $authas ne $remote->{'user'};

    # delete confirmation
    if ($mode eq "delete") {
        $ret .= "<?h1 $ML{'.delete.head'} h1?><?p " . 
            BML::ml('.delete.text', {'style' => $style->{'styledes'} })
            . " p?>";

        $ret .= "<form method='post' action='edit_do.bml$getextra'>";
        $ret .= LJ::form_auth();
        $ret .= LJ::html_hidden("mode", "delete_confirm", "styleid", $styleid);
        $ret .= "<p align='center'>" . LJ::html_submit(undef,"$ML{'.delete.submit'}") . "</p></form>\n";
        return $ret;
    }

    # process delete
    if ($mode eq "delete_confirm") {
        return "<b>$ML{'Error'}</b> $ML{'error.invalidform'}" unless LJ::check_form_auth();

        LJ::S1::delete_style($styleid);
        return "<?h1 $ML{'.delete.confirmed.head'} h1?><?p " .
            BML::ml('.delete.confirmed.text', {'aopts' => "href='edit.bml$getextra'"}) .
            "p?>";
    }

    # editing a style
    if ($mode eq "editstyle") {
        $ret .= "<?h1 $ML{'.edit.head'} h1?><?p $ML{'.edit.text'} p?>\n";
        $ret .= "<div style='width: 90%'><form method='post' action='edit_do.bml$getextra'>";
        $ret .= LJ::form_auth();
        $ret .= LJ::html_hidden("mode", "savechanges", "styleid", $styleid, "ide", $ide);
        $ret .= "<table border='1' cellspacing='1' cellpadding='2' style='margin-bottom: 20px;'>\n";
        $ret .= "<tr><td bgcolor='#d0d0d0'><b>$ML{'.edit.col.type'}</b></td><td><i>$LJ::viewinfo{$style->{'type'}}->{'des'}</i> -- <b>$style->{'type'}</b></td></tr>\n";
        $ret .= "<tr><td bgcolor='#d0d0d0'><b>$ML{'.edit.col.styleid'}</b></td><td><b>$style->{'styleid'}</b>";

        my $extravars = "&amp;nocache=1" if $style->{'opt_cache'} eq "Y";
        if ($style->{'type'} eq 'day') {
            my ($curmday, $curmon, $curyear) = (localtime(time))[3..5]; 
            $extravars .= sprintf("&amp;day=%02d&amp;month=%02d&amp;year=%04d",
                                  $curmday, $curmon+1, $curyear+1900);
        }
        $ret .= " " .BML::ml('.edit.preview', {'aopts' => "target='preview' href='$LJ::SITEROOT/customview.cgi?username=$u->{'user'}&amp;styleid=$styleid$extravars'"});
        $ret .= "</td></tr>\n";
        
        $ret .= "<tr><td bgcolor='#d0d0d0'><b>$ML{'.edit.col.description'}</b></td><td>";
        $ret .= LJ::html_text({ 'name' => 'styledes', 'value' => $style->{'styledes'},
                                'size' => '50', 'maxlength' => '50' });
        $ret .= "</td></tr>\n";

        $ret .= "<tr><td bgcolor='#d0d0d0'><b>$ML{'.edit.col.options'}</b></td><td><table>\n";
        foreach my $opt (@style_opts) {
            $ret .= "<tr valign='top'><td>";
            $ret .= LJ::html_check({ 'type' => 'check','name' => $opt->{'code'}, 'id' => $opt->{'code'},
                                     'selected' => $style->{$opt->{'code'}} eq 'Y' });

            $ret .= "</td><td><b><label for='$opt->{'code'}'>$opt->{'title'}</label></b><br />$opt->{'des'}</td></tr>";
        }
        $ret .= "</table></td></tr>\n";

        $ret .= "</table>\n";

        # color code instructions
        $ret .= "<?h1 $ML{'.colorcodes.head'} h1?><?p $ML{'.colorcodes.text'} p?>";

        $ret .= "<p align='center'><table cellpadding='2' border='1' cellspacing='1'><tr bgcolor='#d0d0d0'><td>$ML{'.edit.col.code'}</td><td>$ML{'.edit.col.description'}</td></tr>\n";
        foreach my $col (@LJ::S1::themecoltypes) {
            $ret .= "<tr><td><tt>%%color:<b>$col->[0]</b>%%</tt></td><td>$col->[1]</td></tr>\n";
        }
        $ret .= "</table></p>\n";

        # transform instructions
        $ret .= "<?h1 $ML{'.edit.transforms.head'} h1?><?p $ML{'.edit.transforms.text'} p?>";
        
        $ret .= "<p align='center'><table width='75%' cellpadding='2' border='1' cellspacing='1'><tr bgcolor='#d0d0d0'><td>$ML{'.edit.col.transform'}</td><td>$ML{'.edit.col.description'}</td></tr>\n";
        foreach (@style_transforms) {
            $ret .= "<tr><td><tt>$_->{'trans'}</tt></td><td>$_->{'des'}</td></tr>\n";
        }
        $ret .= "</table></p>\n";

        ### customizable vars section

        # load variables from file
        my @vars;
        LJ::load_objects_from_file("vars.dat", \@vars);

        # build hash of relevant variables
        my %var;
        foreach my $v (sort { $a->{'name'} cmp $b->{'name'} } @vars) {
            next unless ($v->{'props'}->{'scope'} =~ /\b$style->{'type'}\b/);
            $var{$v->{'name'}} = $v;
        }

        # ide version 2 section
        if ($ide eq "v2") {

            # closure to make variable edit fields
            my $make_edit_fields = sub {
                my ($self, $vars, $marked, @fields) = @_;
                foreach my $f (@fields) {
                    next if ($marked->{$f}++);
                    my $prop = $vars->{$f}->{'props'};
                    $self->($self, $vars, $marked, split(/\s*,\s*/, $prop->{'deps'}));
                    my $des = $prop->{'des'};
                    $des =~ s/\[var\[(\S+?)\]\]/<a href="#$1">$1<\/a>/g;
                    $des =~ s/\[view\[(\S+?)\]\]/$1/g;
                    $des =~ s/%%\S+?%%/<tt>$&<\/tt>/g;
        
                    $ret .= "<p><a name='$f'><font size='+1'><tt><b>$f</b></tt></font><br />$des</p>\n";

                    if (defined $prop->{'props'}) {
                        $ret .= "<p><table cellspacing='1' border='1' cellpadding='2'>\n";
                        foreach my $p (@{$prop->{'props'}}) {
                            $p->{'props'}->{'des'} =~ s/\[var\[(\S+?)\]\]/<a href="#$1">$1<\/a>/g;
                            $p->{'props'}->{'des'} =~ s/\[view\[(\S+?)\]\]/$1/g;
                            $p->{'props'}->{'des'} =~ s/%%\S+?%%/<tt>$&<\/tt>/g;
                            $ret .= "<tr valign='top'><td bgcolor='#d0d0d0' align='right'><b>$p->{'name'}</b></td>\n";
                            $ret .= "<td>$p->{'props'}->{'des'} ";
                            if ($p->{'props'}->{'min'} > 0) {
                                $ret .= "<font color='#ff0000'>[required]</font>";
                            }
                            $ret .= "</td></tr>\n";
                        }
                        $ret .= "</table></p>\n";
                    }
        
                    my $editrows = $prop->{'editrows'} || 5;
                    my $editcols = $prop->{'editcols'} || 70;

                    $ret .= "<p>";
                    if ($vars->{$f}->{'props'}->{'override'} eq "only") {
                        $ret .= "<span style='background-color: #ffff00'><b>$ML{'.edit.override.head'}</b></span>  $ML{'.edit.override.text'}";
                    } else {
                        my %stylevar = ();
                        LJ::parse_vars(\$style->{'formatdata'}, \%stylevar);

                        if ($editrows == 1) {
                            $ret .= LJ::html_text({ 'name' => "var:$f", 'value' => $stylevar{$f},
                                                    'size' => $editcols, 'maxlength' => '255' });
                        } else {
                            $ret .= LJ::html_textarea({ 'name' => "var:$f", 'value' => $stylevar{$f},
                                                        'wrap' => 'soft', 'rows' => $editrows, 'cols' => $editcols,
                                                        'style' => 'width: 100%;' });
                        }
                    }
                    $ret .= "</p>";
                    $ret .= "<?hr?>\n";
                }
            }; # end closure

            # display edit form
            $ret .= "<?h1 $ML{'.edit.customize.head'} h1?>";
            my %mark = ();
            $make_edit_fields->($make_edit_fields, \%var, \%mark, uc("$style->{'type'}_PAGE"), keys %var);
        }

        # ide version 1 section
        if ($ide eq "v1") {

            # show a big textarea for them to use
            $ret .= "<p><b>$ML{'.edit.variables.head'}</b> " .
                BML::ml('.edit.variables.text',{'aopts' => "target='_blank' href='/developer/views.bml#$style->{'type'}'"}) .
                "</p>\n";
            $ret .= LJ::html_textarea({ 'name' => 'formatdata', 'value' => $style->{'formatdata'}, 
                                        'rows' => '30', 'cols' => '80', 'wrap' => 'off',
                                        'style' => 'width: 100%;' }) . "\n";
        }

        # save button
        $ret .= "<p align='center'>" . LJ::html_submit(undef, $ML{'.edit.submit'}) . "</p>\n";

        $ret .= "</form></div>";

        # convenience links at bottom
        if ($ide eq 'v2') {
            $ret .= "<?h1 $ML{'.edit.links.head'} h1?><?p $ML{'.edit.links.text'} p?> <ul>";
            foreach my $v (sort { $a->{'name'} cmp $b->{'name'} } @vars) {
                next unless ($v->{'props'}->{'scope'} =~ /\b$style->{'type'}\b/);
                $ret .= "<li><a href=\"#$v->{'name'}\">$v->{'name'}</a>";
            }
            $ret .= "</ul>";
        }

        return $ret;
    }

    # save changes from a previous edit form
    if ($mode eq "savechanges") {
        return "<b>$ML{'Error'}</b> $ML{'error.invalidform'}" unless LJ::check_form_auth();

        my $formatdata;

        # process form from ide v1
        if ($ide eq "v1") {
            $POST{'formatdata'} =~ s/\r//;   # carriage returns shouldn't be necessary
            $formatdata = $POST{'formatdata'};

        # process form from ide v2
        } elsif ($ide eq "v2") {
            $formatdata = "";
            foreach (grep { /^var:.+/ } keys %POST) {
                /^var:(.+)$/;
                my ($key, $var) = ($&, $1);
                $POST{$key} =~ s/\r//;   # carriage returns shouldn't be necessary
                if ($POST{$key} =~ /\n/) {
                    $formatdata .= "$var<=\n$POST{$key}\n<=$var\n\n";
                } else {
                    $formatdata .= "$var=>$POST{$key}\n\n";
                }
            }
        }
    
        # update style
        LJ::S1::update_style($styleid, 
                             { 'formatdata' => $formatdata,
                               'styledes' => $POST{'styledes'},
                               map { $_->{'code'} => $POST{$_->{'code'}} ? "Y" : "N" } @style_opts });

        my $extravars;
        if ($style->{'type'} eq 'day') {
            my ($curmday, $curmon, $curyear) = (localtime(time))[3..5]; 
            $extravars = sprintf("&amp;day=%02d&amp;month=%02d&amp;year=%04d",
                                 $curmday, $curmon+1, $curyear+1900);
        }
        # all good
        return "<?h1 $ML{'.edit.success.head'} h1?><?p " .
            BML::ml('.edit.success.text', 
                    {'aopts' => "target='preview' href='$LJ::SITEROOT/customview.cgi?user=$u->{'user'}&amp;styleid=$styleid$extravars'"}) .
            "p?>";
    }

    # this should never happen
    return LJ::bad_input("$ML{'.error.mode'}: $mode.");

}
_code?>

<=body
page?><?_c <LJDEP>
link: htdocs/styles/edit.bml, htdocs/developer/views.bml, htdocs/customview.cgi
file: htdocs/vars.dat
post: htdocs/styles/edit_do.bml
</LJDEP> _c?>
