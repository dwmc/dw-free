<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('commpending');

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    # get remote
    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    # old GET arg
    if ($GET{comm}) {
        return BML::redirect("$LJ::SITEROOT/community/pending.bml?authas=$GET{comm}");
    }

    my $cname = $GET{authas};
    return BML::redirect("$LJ::SITEROOT/community/manage.bml") unless $cname;

    my $ret;
    $ret .= "<form action='pending.bml' method='GET'>\n";
    $ret .= LJ::make_authas_select($remote, { authas => $GET{authas}, type => 'C' });
    $ret .= "</form>\n\n";

    # get $c object
    my $c = LJ::load_user($cname);
    return $ret . "<?h1 $ML{'Error'} h1?><?p $ML{'/community/members.bml.error.nocomm'} p?>"
        unless $c;
    my $cid = $c->{'userid'};

    # is $remote an admin?
    unless (LJ::can_manage($remote, $c)) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p ";
        $ret .= BML::ml('/community/members.bml.error.noaccess', 
                        { comm => LJ::ljuser($cname, { type => 'C' }) });
        $ret .= " p?>";
        return $ret;
    }

    $ret .= LJ::maintainer_linkbar($c);

    # hit up the database to find pending members
    my $pendids = LJ::get_pending_members($c) || [];
    my $us = LJ::load_userids(@$pendids);

    # nothing pending?
    return $ret . "<?h1 $ML{'.nopending.title'} h1?><?p $ML{'.nopending.body'} p?>"
        unless @$pendids || LJ::did_post();

    # saving a form submission
    if (LJ::did_post()) {
        unless (LJ::check_form_auth()) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>";
            return $ret;
        }
        my @userids = split(',', $POST{'ids'});

        # need a db handle now
        my $dbh = LJ::get_db_writer();
        
        # hit up each user to find out what to do with them
        my ($added, $rejected, $ignored, $previous, $banned, $ban_skipped);
        foreach my $id (@userids) {
            unless ($us->{$id}) {
                $previous++;
                next;
            }

            unless (defined $POST{"pending_$id"}) {
                $ignored++;
                next;
            }

            if ($POST{"pending_$id"} eq 'on' and $POST{"approve"}) {
                LJ::approve_pending_member($cid, $id);
                $added++;
            } elsif ($POST{"pending_$id"} eq 'on' and $POST{"reject"}) {
                LJ::reject_pending_member($cid, $id);
                $rejected++;
            } elsif ($POST{"pending_$id"} eq 'on' and $POST{"reject_ban"}) {
                my $banlist = LJ::load_rel_user($c, 'B') || [];
                if (scalar(@$banlist) >= ($LJ::MAX_BANS || 5000)) {
                    $ban_skipped++;
                } else {
                    LJ::set_rel($c, $us->{$id}, 'B');
                    $c->log_event('ban_set', { actiontarget => $id, remote => $remote });
                    LJ::run_hooks('ban_set', $c, $us->{$id});
                    $banned++;

                    LJ::reject_pending_member($cid, $id); # only in case of successful ban
                    $rejected++; # for keeping this user in list for later reject
                }
            }
        }

        $ret .= "<?h1 $ML{'/community/members.bml.success.header'} h1?><?p $ML{'/community/members.bml.success.message'} p?>";
        $ret .= "<?p " . BML::ml('.success.added', { num => $added }) . " p?>" if $added;
        $ret .= "<?p " . BML::ml('.success.rejected', { num => $rejected }) . " p?>" if $rejected;
        $ret .= "<?p " . BML::ml('.success.ignored', { num => $ignored }) . " p?>" if $ignored;
        $ret .= "<?p " . BML::ml('.success.previous', { num => $previous }) . " p?>" if $previous;
        $ret .= "<?p " . BML::ml('.success.banned', { num => $banned }) . " p?>" if $banned;
        $ret .= "<?p " . BML::ml('.success.ban_skipped', { num => $ban_skipped }) . " p?>" if $ban_skipped;
        $ret .= "<?p " . BML::ml("/community/members.bml.success.return", { 'link' => BML::get_uri() . "?authas=$cname" }) . " p?>";

        return $ret;
    }

    my @users = sort { $a->{user} cmp $b->{user} } values %$us;
    my $page_size = 100; # change to adjust page size

    # are we going to jump to a specific user ?
    my $jumppage;
    my $jumpuser;
    my $jumpto = $POST{'jumpto'} || $GET{'jumpto'};
    if (@users > $page_size && $jumpto =~ /^\w+$/) {
        my $ct;
        foreach (@users) {
            $jumppage++ if $ct % $page_size == 0;
            if ($jumpto eq $_->{'name'}) {
                $jumpuser = $_->{'name'};
                last;
            }
            $ct++;
        }
        undef $jumppage unless $jumpuser;
    }

    # how to make links back to this page
    my $self_link = sub {
        return "pending.bml?authas=$cname&page=$_[0]";
    };

    my %items = BML::paging(\@users, $jumppage || $GET{page}, $page_size);
    my $navbar = LJ::paging_bar($items{page}, $items{pages},
                                 { self_link => $self_link });
    @users = @{$items{items}};

    # output starts here
    $ret .= "<form method='post' action='pending.bml?authas=$cname' name='pending_member_form'>";
    $ret .= LJ::form_auth();

    # jump to user
    if ($items{'pages'} > 1 || $GET{'jumpto'} ne '') {
        $ret .= "<div style='margin-left: 30px;'>$ML{'.jump'}: ";
        $ret .= LJ::html_text({ 'name' => 'jumpto', 'value' => ($POST{'jumpto'} || $GET{'jumpto'}),
                                'class' => 'text', 'size' => '10', 'maxlength' => '25' }) . " ";
        $ret .= LJ::html_submit(undef, 'Go') . "</div>";
    }

    # table headers
    $ret .= "<br /><div align='center'><table class='userslist-table' cellspacing='0' cellpadding='2'>\n<tr><th>";
    $ret .= LJ::html_check({ id => 'all', name => 'all', checked => 'checked', 
	onchange =>
		"var inputs = document.pending_member_form.getElementsByTagName('input');
		for (var i = 0; i < inputs.length; i++) {
			if (inputs[i].type == 'checkbox' && inputs[i].getAttribute('id') !== 'all') {
				inputs[i].checked = this.checked;
			}
		}", 
	onclick =>
		"var inputs = document.pending_member_form.getElementsByTagName('input');
		for (var i = 0; i < inputs.length; i++) {
			if (inputs[i].type == 'checkbox' && inputs[i].getAttribute('id') !== 'all') {
				inputs[i].checked = this.checked;
			}
		}", 
  	 selected => 0 });
    $ret .= "</th><th>$ML{'/community/members.bml.key.user'}</th></tr>\n";

    # rows for existing users
    my $rc = 0;
    foreach (@users) {
        my $rstyle = ($rc++ & 1) ? '#efefef' : '#fff';
        $ret .= "<tr style='background-color: $rstyle;'><td>";
        $ret .= LJ::html_check({ id => 'pending_' . $_->userid, name => 'pending_' . $_->userid, 
                                 selected => $jumpto ? ($_->user eq $jumpto ? 1 : 0) : 1 });
        $ret .= "</td><td>" . LJ::ljuser($_->{user}) . "</td></tr>\n";
    }

    # some hidden values
    $ret .= LJ::html_hidden('ids', join(',', map { $_->{userid}} @users)) . "\n";
    $ret .= "</table><p>";
    $ret .= LJ::html_submit('approve', $ML{'.button.approve'});
    $ret .= LJ::html_submit('reject', $ML{'.button.reject'});
    $ret .= LJ::html_submit('reject_ban', $ML{'.button.reject_ban'});
    $ret .= "</p></div></form>\n\n";

    $ret .= $navbar;

    $ret .= BML::ml('Backlink', {
        'link' => '/community/manage.bml',
        'text' => $ML{'/community/members.bml.manage2'},
    });

    return $ret;

}
_code?>

<=body
page?>
