<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('commsentinvites');

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    # always have links at top
    my $ret;

    # get remote
    my $remote = LJ::get_remote();
    unless ($remote) {
        $ret .= "<?needlogin?>";
        return $ret;
    }

    # old GET arg
    if ($GET{comm}) {
        return BML::redirect("$LJ::SITEROOT/community/sentinvites?authas=$GET{comm}");
    }

    my $cname = $GET{authas};
    return BML::redirect("$LJ::SITEROOT/community/manage") unless $cname;

    $ret .= "<form action='sentinvites' method='GET'>\n";
    $ret .= LJ::make_authas_select($remote, { authas => $GET{authas}, type => 'C' });
    $ret .= "</form>\n\n";

    # get $c object
    my $c = LJ::load_user($cname);
    unless ($c) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'/community/members.bml.error.nocomm'} p?>";
        return $ret;
    }

    # make sure it is a comm
    unless ( $c->is_community ) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p ";
        $ret .= BML::ml('.error.notcomm', { 'user' => LJ::ljuser($c) });
        $ret .= " p?>";
        return $ret;
    }

    my $cid = $c->{'userid'};
    # is $remote an admin?
    unless (LJ::can_manage_other($remote, $c)) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p ";
        $ret .= BML::ml('/community/members.bml.error.noaccess', 
                        { 'comm' => LJ::ljuser($cname, { 'type' => 'C' }) });
        $ret .= " p?>";
        return $ret;
    }

    $ret .= LJ::maintainer_linkbar($c, "invites");

    # Process revoked invitations
    if ($POST{'action:revoke'}) {
        # validate form auth
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        my @userids;
        foreach (grep { /^revoke_invite/ } keys %POST) {
            push @userids, $POST{$_};
        }
        if (LJ::revoke_invites($c, @userids)) {
            $ret .= "<div class='warningbar'> " .
                    BML::ml('.invites.cancelled', { num => scalar @userids }) .
                    "</div>";
        }
    }

    # columns of our table, excluding username
    my @attribs = ('post');
    my @titleattribs = ('P');
    if ( $c->prop( 'moderated' ) ) {
        push @attribs, ('preapprove', 'moderate');
        push @titleattribs, ('U', 'M');
    }
    push @attribs, 'admin';
    push @titleattribs, 'A';

    # now get sent invites and the users involved
    my $sent = LJ::get_sent_invites($c) || [];
    my @ids;
    push @ids, ($_->{userid}, $_->{maintid}) foreach @$sent;
    my $us = LJ::load_userids(@ids);

    # populate %users hash
    my %users = ();
    foreach my $invite (@$sent) {
        my $id = $invite->{userid};
        next if $GET{show} && $GET{show} ne 'all' && $invite->{status} ne $GET{show};
        $users{$id}{userid} = $id;
        $users{$id}{maintainer} = $us->{$invite->{maintid}}{user};
        $users{$id}{user} = $us->{$id}{user};
        $users{$id}{$_} = 1 foreach keys %{$invite->{args}};
        $users{$id}{status} = $invite->{status};
        $users{$id}{date} = LJ::mysql_time($invite->{recvtime});
        $users{$id}{date} =~ s/\s.+$//; # we just want the date, ignore time
    }

    # hop out if there were no invites
    unless ( %users ) {
        # display a different message depending on what category of invitations we're looking for
        return "$ret<?h1 $ML{'.none.title'} h1?><?p " .
            BML::ml( '.none.'.$GET{show}.'.body', { aopts => "href='/community/members?authas=$c->{user}'" } ) .
            " p?>"
            if ( $GET{show} eq 'accepted' || $GET{show} eq 'rejected' || $GET{show} eq 'outstanding' );

        # return with a general message if we didn't match one of the above special cases
        return "$ret<?h1 $ML{'.none.title'} h1?><?p " .
            BML::ml( '.none.body', { aopts => "href='/community/members?authas=$c->{user}'" } ) .
            " p?>";
    }
    
    # sorting method;
    my $method = $GET{'sort'};

    my $cmp = sub {$a->{'user'} cmp $b->{'user'}};
    $cmp = sub {$b->{'admin'} <=> $a->{'admin'}} if $method eq 'A';
    $cmp = sub {$b->{'post'} <=> $a->{'post'}} if $method eq 'P';
    $cmp = sub {$b->{'moderate'} <=> $a->{'moderate'}} if $method eq 'M';
    $cmp = sub {$b->{'preapprove'} <=> $a->{'preapprove'}} if $method eq 'U';
    $cmp = sub {$a->{'status'} cmp $b->{'status'}} if $method eq 'status';
    $cmp = sub {$b->{'date'} cmp $a->{'date'}} if $method eq 'date';
    $cmp = sub {$b->{'maintainer'} cmp $a->{'maintainer'}} if $method eq 'maint';

    my @users = sort $cmp values %users;
    my $page_size = 100; # change to adjust page size

    # are we going to jump to a specific user ?
    my $jumppage;
    my $jumpuser;
    if (@users > $page_size && $POST{'jumpto'} =~ /^\w+$/) {
        my $ct;
        foreach (@users) {
            $jumppage++ if $ct % $page_size == 0;
            if ($POST{'jumpto'} eq $_->{'name'}) {
                $jumpuser = $_->{'name'};
                last;
            }
            $ct++;
        }
        undef $jumppage unless $jumpuser;
    }

    # how to make links back to this page
    my $self_link = sub {
        my ( $sort, $filter ) = ( "", "" );
        $sort = "&sort=$GET{'sort'}" if $GET{'sort'};
        $filter = "&show=$GET{'show'}" if $GET{'show'};
        return "sentinvites?authas=$cname&page=$_[0]$sort$filter";
    };

    my %items = BML::paging(\@users, $jumppage || $GET{'page'}, $page_size);
    my $navbar = LJ::paging_bar($items{'page'}, $items{'pages'},
                                 { 'self_link' => $self_link });
    @users = @{$items{'items'}};

    # output starts here

    # jump to user
    if ($items{'pages'} > 1) {
        $ret .= "<form method='post' action='sentinvites?authas=$cname'>";
        $ret .= "<div style='margin-left: 30px;'>Jump to user: ";
        $ret .= LJ::html_text({ 'name' => 'jumpto', 'value' => $POST{'jumpto'},
                                'size' => '10', 'maxlength' => '25' }) . " ";
        $ret .= LJ::html_submit(undef, 'Go') . "</div>";
        $ret .= "</form>";
        $ret .= $navbar;
    }

    # setup showlinks
    my $showlinks = "<form method='get' action='/community/sentinvites'>";
    $showlinks .= LJ::html_hidden('authas', $c->{user});
    $showlinks .= $ML{'.filterto'};
    $showlinks .= LJ::html_select( { name => 'show', selected => $GET{show} }, all => $ML{'.filterto.opts.all'}, accepted => $ML{'.filterto.opts.accepted'}, rejected => $ML{'.filterto.opts.rejected'}, outstanding => $ML{'.filterto.opts.outstanding'} );
    $showlinks .= LJ::html_submit( undef, $ML{'.filterto.btn.refresh'} );
    $showlinks .= "</form>";

    my $filter = $GET{show} ? "&show=$GET{show}" : "";
    my $sortlink = BML::get_uri() . "?authas=$cname$filter&sort=";
    $ret .= "<br /><div align='center'>$showlinks";
    $ret .= <<END; 
<table class='borderedtable' cellpadding='2' cellspacing='0'>
<tr style="border-bottom: solid 1px black;">
    <th style='border-right: solid 1px black;'>$ML{'.key.posting.abbrev'}</th>
    <td style='border-bottom: solid 1px black; border-right: solid 1px black;'>$ML{'.key.posting'}</td>
    <th style='border-right: solid 1px black;'>$ML{'.key.unmoderated.abbrev'}</th>
    <td style='border-bottom: solid 1px black;'>$ML{'.key.unmoderated'}</td>
</tr>
<tr style="border-bottom: solid 1px black;">
    <th style='border-right: solid 1px black; border-bottom: none;'>$ML{'.key.moderator.abbrev'}</th>
    <td style='border-right: solid 1px black;'>$ML{'.key.moderator'}</td>
    <th style='border-right: solid 1px black; border-bottom: none;'>$ML{'.key.maintainer.abbrev'}</th>
    <td>$ML{'.key.maintainer'}</td>
</tr>
</table>
<br />
END
    $ret .= "<table class='alternating-rows' cellpadding='0' cellspacing='0'>\n<tr>" .
            "<th><a href='${sortlink}name'>$ML{'/community/members.bml.key.user'}</a></th>";
    $ret .= "<th><a href='${sortlink}$_'>$_</a></th>" foreach @titleattribs;
    $ret .= "<th><a href='${sortlink}maint'>$ML{'.key.sentby'}</a></th>";
    $ret .= "<th><a href='${sortlink}date'>$ML{'.key.date'}</a></th>";
    $ret .= "<th><a href='${sortlink}status'>$ML{'.key.status'}</a></th>";
    $ret .= "</tr>\n";

    $ret .= "<form method='post'>";
    $ret .= LJ::form_auth();
    my $can_revoke = 0;

    # checkboxes and such
    my $yes = '<img src="/img/check.gif" width="15" height="15" border="0">';
    my $no = '-';

    # rows for existing users
    my $rc = 0;
    foreach(@users) {
        my $rstyle = ($rc++ & 1) ? "altrow2" : "altrow1";
        $ret .= "<tr class='$rstyle'><td>" . LJ::ljuser($_->{user}) . "</td>";
        foreach my $key (@attribs) {
            $ret .= "<td align='center'>";
            $ret .= $_->{$key} ? $yes : $no;
            $ret .= "</td>";
        }
        $ret .= "<td>" . LJ::ljuser($_->{maintainer}, { type => 'P' }) . "</td>";
        $ret .= "<td>$_->{date}</td>";

        # display checkbox for outstanding invites so they can be revoked
        # also set flag indicating there are invitations that can be revoked
        if ($_->{status} eq 'outstanding') {
            $can_revoke = 1;
            $ret .= "<td>$_->{status} " .
                    LJ::html_check({ 'type' => 'checkbox',
                                     'name' => 'revoke_invite_' . $_->{userid},
                                     'value' => $_->{userid} }) .
                    " </td>";
        } else {
            $ret .= "<td>$_->{status}</td>";
        }


        $ret .= "</tr>\n";
    }

    $ret .= "</table>\n";
    $ret .= "<p>" . LJ::html_submit( 'action:revoke', $ML{'.cancel'}) .  "</p>"
        if $can_revoke;
    $ret .= "</form>";


    $ret .= "<br /><a href='/community/members?authas=$c->{user}'>$ML{'.send'}</a>";
    $ret .= "</div>\n\n";
    $ret .= $navbar;
    return $ret;

}
_code?>

<=body
page?>
