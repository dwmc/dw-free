<?page
title=><?_ml .title _ml?>
body<=
<?_code

 use strict;

 my $body;

 if ($LJ::SERVER_DOWN) {
     $body = LJ::server_down_html();
     return $body;
 }

 if ($LJ::USE_SSL && ! $LJ::IS_SSL && $FORM{'ssl'} ne "no") {
     my $getextra = $GET{auth} ? "?auth=$GET{auth}" : "";
     return BML::redirect("$LJ::SSLROOT/changepassword.bml$getextra");
 }

 my $crumb = $LJ::IS_SSL ? 'securechangepass' : 'changepass';
 LJ::set_active_crumb($crumb);

 my ($aa, $authu);
 if (my $auth = $GET{auth}) {
     return LJ::bad_input($ML{'.error.invalidarg'})
         unless $auth =~ /^(\d+)\.(.+)$/;

     $aa = LJ::is_valid_authaction($1, $2);
     return LJ::bad_input($ML{'.error.invalidarg'})
         unless $aa;
     return LJ::bad_input(BML::ml('.error.actionalreadyperformed', { 'aopts' => "href='$LJ::SITEROOT/lostinfo.bml'"}))
         if $aa->{'used'} eq 'Y';
     return BML::redirect("$LJ::SITEROOT/lostinfo.bml")
         unless $aa->{action} eq 'reset_password';

     # confirmed the identity...
     $authu = LJ::load_userid($aa->{userid});

     # verify the email can still receive passwords
     return LJ::bad_input(BML::ml('.error.emailchanged', { 'aopts' => "href='$LJ::SITEROOT/lostinfo.bml'"}))
         unless $authu->can_receive_password($aa->{arg1});
 }

 my $update_form = sub {
     my $ret;

     # else, show the form to change:
     $ret .= "<form method='post'>\n";
     $ret .= LJ::html_hidden(mode => 'submit',
                              ssl => $GET{'ssl'});

     my $remote = LJ::get_remote();
     return "<?p $ML{'.error.identity'} p?>" if $remote && $remote->is_identity;

     if (!$remote || !$remote->prop('badpassword')) {
         $ret .= "<?p $ML{'.changepassword.instructions'} p?>\n";
     }

     # Warn them if logged in and not validated
     if (!$authu && $remote && !$remote->prop('badpassword') && !LJ::did_post() && $remote->{'status'} ne 'A') {
         $ret .= "<?warningbar <b>$ML{'label.warning'}</b> $ML{'.error.notvalidated'} warningbar?>";
         $ret .= "<br />";
     }

     if ($remote && $remote->prop('badpassword')) {
         $ret .= "<?warningbar <?h1 $ML{'.forcechange.header'} h1?>";
         $ret .= "<?p $ML{'.forcechange'} p?>";
         $ret .= " warningbar?><br />";
     }

     $ret .= "<?standout\n";
     $ret .= "$ML{'.header.username'}:<br />\n";

     # we make the field for the new password *longer* than the max length
     # for a password - that way we can tell if someone is trying to use an
     # excessively long password, instead of silently truncating it.

     if ($authu) {
         $ret .= $authu->ljuser_display . "<br />\n";
     } else {
         my $hval = LJ::ehtml($remote ? $remote->{'user'} : $POST{'user'});
         $ret .= "<input name='user' size='30' maxlength='25' value='$hval' /><br />\n";
         $ret .= "$ML{'.oldpassword'}<br />\n";
         $ret .= "<input type='password' name='password' size='30' maxlength='30' /><br />\n";
     }

     $ret .= "$ML{'.newpassword'}<br />\n";
     $ret .= "<input type='password' name='newpass1' size='30' maxlength='31' /><br />\n";
     $ret .= "$ML{'.newpasswordagain'}<br />\n";
     $ret .= "<input type='password' name='newpass2' size='30' maxlength='31' /><br />\n";
     $ret .= "standout?>\n";

     $ret .= "<?h1 $ML{'.proceed.header'} h1?>\n";
     $ret .= "<?p $ML{'.proceed.instructions'} p?>\n";

     $ret .= "<?standout\n";
     $ret .= "<input type='submit' value='$ML{'.btn.proceed'}' />\n";
     $ret .= "standout?>\n";
     $ret .= "</form>\n";
     return $ret;
 };

 unless (LJ::did_post()) {
     $body .= $update_form->();
 } elsif ($POST{'mode'} eq 'submit') {
     my $user = $authu ? $authu->user : LJ::canonical_username($POST{'user'});
     my $password = $POST{'password'};
     my $newpass1 = LJ::trim($POST{'newpass1'});
     my $newpass2 = LJ::trim($POST{'newpass2'});

     my $remote = LJ::get_remote();
     my $u = LJ::load_user($user);
     unless ($u) {
         $body .= LJ::error_list("Invalid user");
         return $body;
     }
     return "<?p $ML{'.error.identity'} p?>" if $u->is_identity;
     $u->prop('badpassword');

     my @errors = ();
     if (grep { $user eq $_ } @LJ::TESTACCTS) { push @errors, $ML{'.error.changetestaccount'}; }
     unless ($user) {
         push @errors, $ML{'.error.mustenterusername'};
     } else {
         unless (defined $u) {
             push @errors, BML::ml('.error.invaliduser', {'user' => $user} );
         } else {
             if (LJ::login_ip_banned($u)) {
                 push @errors, $ML{'error.ipbanned'};
             } elsif (!$authu && ($u->password eq "" || $u->password ne $password)) {
                 push @errors, $ML{'.error.badoldpassword'};
                 LJ::handle_bad_login($u);
             }
         }
     }

     if ( !$newpass1 ) {
         push @errors, $ML{'.error.blankpassword'};
     } elsif ( $newpass1 ne $newpass2 ) {
         push @errors, $ML{'.error.badnewpassword'};
     } else {
         my $checkpass = LJ::CreatePage->verify_password( password => $newpass1, u => $u );
         push @errors, BML::ml( '.error.badcheck', { error => $checkpass } )
             if $checkpass;
     }

     # don't allow changes if email address is not validated, unless they
     # have a bad password or got the reset email
     if ($u->{'status'} ne 'A' && !$u->prop('badpassword') && !$authu) {
         push @errors, $ML{'.error.notvalidated'};
     }

     if (@errors) {
       $body .= LJ::error_list(@errors);
       $body .= $update_form->();
       return $body;
     }

     ## make note of changed password
     my $dbh = LJ::get_db_writer();
     my $oldval = Digest::MD5::md5_hex($u->password . "change");
     LJ::infohistory_add($u, 'password', $oldval);

     $u->log_event('password_change', { remote => $remote });

     LJ::update_user($u, { password => $POST{'newpass1'} });

     # if we used an authcode, we'll need to expire it now
     LJ::mark_authaction_used($aa) if $authu;

     # If we forced them to change their password, mark them as now being good
     unless ($LJ::DISABLED{'force_pass_change'}) {
         $u->set_prop('badpassword', 0);
     }

     # Kill all sessions, forcing user to relogin
     $u->kill_all_sessions;

     LJ::send_mail({
         'to' => $u->email_raw,
         'from' => $LJ::ADMIN_EMAIL,
         'fromname' => $LJ::SITENAME,
         'charset' => 'utf-8',
         'subject' => $ML{'.email.subject'},
         'body' => BML::ml('.email.body2',
                           { sitename => $LJ::SITENAME,
                             siteroot => $LJ::SITEROOT,
                             username => $u->{user}, }),
     });

     $body = "<?h1 $ML{'Success'} h1?><?p $ML{'.success.text'} p?>";

     # if they were logged in, tell them to relogin
     $body .= "<?p " . BML::ml('.relogin', { 'aopts' => "href='/login.bml'" }) . " p?>" if $remote;

     LJ::run_hooks("post_changepassword", {
         "u" => $u,
         "newpassword" => $POST{'newpass1'},
         "oldpassword" => $u->password,
     });

     LJ::run_hook('user_login', $u);
 }

 return $body;
_code?>
<=body
page?><?_c <LJDEP>
post: htdocs/changepassword.bml
lib: Digest::MD5
hook: post_changepassword
</LJDEP> _c?>
