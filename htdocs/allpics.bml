<?_code
{
# This page displays all of the user's userpics along with all user-contributed text
# FIXME: A lot more of this functionality should be coming from the Userpic.pm class

    use strict;
    use vars qw(%GET $title $body $head);

    BML::set_language_scope( '/allpics.bml' );

    $title = "$ML{'.title'}";
    $body = "";
    $head = "";

    my $r = BML::get_request();

    # if new-style URLs, get the GET{user} arg from the request notes,
    # which was set by LiveJournal.pm
    unless ( $GET{user} ) {
        $GET{user} = $r->notes->{_journal};
    }

    my $user = LJ::canonical_username($GET{'user'});
    my $remote = LJ::get_remote();
    my $u = ! $user || $remote && $remote->{'user'} eq $user ? $remote : LJ::load_user($user);

    unless ($u) {
        $body = "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noparam'} p?>";
        return;
    }

    # redirect /icons to their subdomain urls
    my $domain = BML::get_client_header( "Host" );
    if ( $LJ::ONLY_USER_VHOSTS ) {
        my $url = $u->journal_base . "/icons";

        my $good_domain = $url;
        $good_domain =~ s!^http://!!;
        $good_domain =~ s!/.*!!;
        if ( $domain ne $good_domain ) {
            return BML::redirect( $url );
        }
    }

    $u->preload_props("opt_blockrobots", "adult_content") if $u->is_visible;
    if (!$u->is_visible || $u->should_block_robots) {
        $head .= LJ::robot_meta_tags();
    }


    # no need for viewsome, due to the fact that none of this is private anyway.  just
    # allow anybody with any version of viewall to see userpics for non-V statusvis users
    if ($GET{viewall} && LJ::check_priv($remote, 'canview', 'suspended')) {
        LJ::statushistory_add($u->{'userid'}, $remote->{'userid'},
                              "viewall", "allpics: $u->{'user'}, statusvis: " . $u->statusvis);
    } else {
        if ($u->is_suspended) {
            $title = $ML{'error.suspended.title'};
            $body = "<?h1 $ML{'error.suspended.name'} h1?><?p " .
                    BML::ml('error.suspended.text', { 'user' => LJ::ljuser($u),
                                                      'sitename' => $LJ::SITENAME }) . " p?>";
            return;
        }

        if ($u->is_deleted) {
            $title = $ML{'error.deleted.title'};
            $body = "<?h1 $ML{'error.deleted.name'} h1?><?p " .
                    BML::ml('error.deleted.text', { 'user' => LJ::ljuser($u) }) . 
                    " p?>";
            return;
        }

        if ($u->is_expunged) {
            $title = $ML{'error.purged.title'};
            $body = "<?h1 $ML{'error.purged.name'} h1?><?p " .
                    BML::ml('error.purged.text', { 'user' => LJ::ljuser($u) }) . 
                    " p?>";
            return;
        }
    }

    # redirect renamed users
    if ( $u->is_redirect ) {
        LJ::load_user_props($u, "renamedto");
        return BML::redirect("$LJ::SITEROOT/allpics?user=$u->{'renamedto'}")
            if $u->{'renamedto'};
    }

    my ($can_manage, $getextra);
    if ($remote) {
        $can_manage = LJ::can_manage($remote, $u->{'userid'});
        $getextra = $can_manage && $remote->{'user'} ne $u->{'user'} ? "?authas=$u->{'user'}" : '';
    }

    #### show pictures

    my $info = LJ::get_userpic_info( $u, { load_comments => 1, load_urls => 1, load_descriptions => 1 } );

    my %keywords = ();
    while (my ($kw, $pic) = each %{$info->{'kw'}}) {
        LJ::text_out(\$kw);
        push @{$keywords{$pic->{'picid'}}}, $kw;
    }

    my %comments = ();
    while (my ($pic, $comment) = each %{$info->{'comment'}}) {
        LJ::text_out(\$comment);
        $comments{$pic} = $comment;
    }

    my %descriptions = ();
    while ( my ($pic, $description) = each %{$info->{description}}) {
        LJ::text_out(\$description);
        $descriptions{$pic} = $description;
    }
    
    my $piccount = 0;

    my @allpics;
    my $defaultpicid = $u ? $u->{'defaultpicid'} : undef;

    # allow support to view inactive userpics for debugging
    my $view_inactive = $GET{inactive} && (LJ::check_priv($remote, "supportviewscreened") ||
                                           LJ::check_priv($remote, "supporthelp"));
    $view_inactive ||= $can_manage;

    push @allpics, $info->{'pic'}->{$u->{'defaultpicid'}} if $defaultpicid;
    push @allpics, map { $info->{'pic'}->{$_} } sort { $a <=> $b }
                grep { $_ != $defaultpicid && ($info->{'pic'}->{$_}->{'state'} eq 'N' || $view_inactive) &&
                           $info->{'pic'}->{$_}->{'state'} ne 'X' }
                keys %{$info->{'pic'}};

    # pagination code

    my @pics;
    my $pagingbar;
    my $start_index = 0;
    my $page_size = $LJ::ALLPICS_PAGESIZE;
    if ($page_size && $page_size > 0) {
        my $pic_count = scalar @allpics;
        my $pagecount = int (($pic_count - 1) / $page_size) + 1;
    
        if ($pagecount > 0) {
            my $page = $GET{page};
            unless ($page) { $page = 1; }
            
            my $querystring = join('&', map { LJ::eurl($_) . '=' . LJ::eurl($GET{$_}) } grep { $_ ne 'page' } keys %GET);
            $pagingbar = LJ::paging_bar($page, $pagecount, {
                self_link => sub { BML::get_uri() . "?page=$_[0]&" . $querystring }, });
            $start_index = $page_size * ($page -1);
        }
        @pics = splice( @allpics, $start_index, $start_index + $page_size - 1 );
    } else {
        @pics = @allpics;
    }

    foreach my $pic (@pics) {

        #  load the userpic object for each pic
        my $userpic = LJ::Userpic->new( $u, $pic->{picid} );

        if ($piccount++ == 0) {
            $body .= "<?h1 $ML{'.current'} h1?><?p ";
            if ($can_manage) {
                $body .= BML::ml('.pics.owner', {'user' => LJ::ljuser($u),});
                my $hook_text = LJ::run_hook('allpics_upsell_text', $u, $getextra);
                if ($hook_text eq "") {
                    $body .= ' ' . BML::ml('.edit4', {'aopts' => "href='$LJ::SITEROOT/editpics$getextra'"});
                } else {
                    $body .= $hook_text;
                }
            } else {
                $body .= BML::ml('.pics2', {'user' => LJ::ljuser($u), 'aopts' => "href='$LJ::SITEROOT/manage/subscriptions/user?journal=$u->{user}'"});
            }

            $body .= " p?><table class='allpics'>";
        }

        ### Keywords
        my $eh_keywords = join(", ", sort { lc($a) cmp lc($b) } @{$keywords{$pic->{'picid'}}||[]});
        $eh_keywords = LJ::ehtml($eh_keywords);

        if ($piccount % 2 == 1) {
            $body .= "<tr>";
        }

        $body .= "<td class='pic'>";

        my ($apre, $apost);
        if ($pic->{'url'}) {
            $apre = "<a href='" . LJ::ehtml($pic->{'url'}) . "'>";
            $apost = "</a>";
        }

        # for each image, we know the picid, get the html imgtag
        $body .= "$apre" . $userpic->imgtag . $apost . "</td><td class='desc'>";

        if ($u->{'defaultpicid'} == $pic->{'picid'}) {
            $body .= "$ML{'.default'}<br />";
        }

        if ($view_inactive && $pic->{'state'} eq 'I') {
            $body .= "<em>[$ML{'userpic.inactive'}]</em>&nbsp;" . LJ::help_icon('userpic_inactive') . "<br />";
        }

        if ($eh_keywords) {
            $body .= "<strong>$ML{'.keywords'}</strong> $eh_keywords<br />";
        }

        # Comments
        my $eh_comments = $comments{$pic->{'picid'}};
        if ($eh_comments) {
            LJ::CleanHTML::clean(\$eh_comments, {
                'wordlength' => 40,
                'addbreaks' => 0,
                'tablecheck' => 1,
                'mode' => 'deny',
            });

            $body .= "<strong>$ML{'.comment'}</strong> $eh_comments<br />\n";
        }
        
        # Descriptions
        my $eh_descriptions = $descriptions{$pic->{picid}};
        if ($eh_descriptions) {
            LJ::CleanHTML::clean(\$eh_descriptions, {
                wordlength => 40,
                addbreaks => 0,
                tablecheck => 1,
                mode => 'deny',
            });
            
            $body .= "<strong>$ML{'.description'}</strong> $eh_descriptions\n";
        }

        $body .= "</td>";

        if ($piccount % 2 == 1) {
            $body .= "<td class='blank'></td>";
        } else {
            $body .= "</tr>\n";
        } 
    }

    if ($piccount) {
        if ($piccount % 2 == 1) {
            # finish off this row.
            # we need 2 columns: the pic and the text.
            $body .= "<td colspan='2'></td></tr>";
        }
        if ($pagingbar) {
            $body .= "<tr><td colspan = '4'>";
            $body .= $pagingbar;
            $body .= "</td></tr>\n";
        }
        $body .= "</table>";
    } else {
        if ($can_manage) {
            $body = "<?h1 $ML{'.nopics.title'} h1?><?p ";
            $body .= BML::ml('.nopics.text3', {'aopts' => "href='$LJ::SITEROOT/editpics$getextra#upload'"}) . " p?>";
        } else {
            $body = "<?h1 $ML{'.nopics.title'} h1?><?p ". BML::ml('.nopics.text.other2', {'aopts' => "href='$LJ::SITEROOT/manage/subscriptions/user?journal=$u->{user}'", username => $u->ljuser_display }). " p?>";
        }
    }
 
    return;
}
_code?><?page
title=><?_code return $title; _code?>
head=><?_code return $head; _code?>
body=><?_code return $body; _code?>
page?>
