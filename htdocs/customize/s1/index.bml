<?page
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST $title $headextra @errors @warnings);
    LJ::need_res(qw( stc/customize-s1.css js/customize-s1.js js/colorpicker.js js/customize.js ));

    $title = "Journal Display";

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{authas} || $remote->user;
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';

    if ($u->prop('stylesys') == 2) {
        return BML::redirect("$LJ::SITEROOT/customize/$getextra");
    } else {
        # make sure the user really wants to be using s1
        unless ($u->prop('s1_confirmed')) {
            return BML::redirect("$LJ::SITEROOT/customize/switch_system.bml$getextra");
        }
    }

    # Return strings
    my $ret; my $saved_msg; my $err_msg;

    BML::set_language_scope("/modify_do.bml");
    my $capstyles = LJ::get_cap($u, "styles");

    if (LJ::did_post()) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        my %update = ();


        ### Journal Titles ###

        $POST{'journaltitle'}     = LJ::text_trim($POST{'journaltitle'}, 0, LJ::std_max_length()) if $POST{'journaltitle'};
        $POST{'journalsubtitle'}  = LJ::text_trim($POST{'journalsubtitle'}, 0, LJ::std_max_length()) if $POST{'journalsubtitle'};
        $POST{'friendspagetitle'} = LJ::text_trim($POST{'friendspagetitle'}, 0, LJ::std_max_length()) if $POST{'friendspagetitle'};

        # set userprops
        my @uprops = qw(journaltitle journalsubtitle friendspagetitle);

        foreach my $uprop (@uprops) {
            my $eff_val = $POST{$uprop};   # effective value, since 0 isn't stored
            $eff_val = "" unless $eff_val;
            $u->set_prop( $uprop, $eff_val );
        }


        ### Layout ###

        my @picked = ();
        foreach my $view (@LJ::views) {
            my $sid = $POST{"s1_${view}_style"}+0;
            if ($sid) {
                push @picked, $sid;
            }
        }
        # verify they haven't forged the style numbers
        unless ($capstyles) {
            # just load whole structure since it should be cached
            my $pubstyles = LJ::S1::get_public_styles();
            my $userstyles = LJ::S1::get_user_styles($u);
            foreach (@picked) {
                my $type = $userstyles->{$_}->{'type'};
                return LJ::bad_input($ML{'.error.stylenotavailable'})
                    unless exists $pubstyles->{$_} ||
                    exists $userstyles->{$_} &&
                    ($capstyles || $_ == $u->prop("s1_${type}_style"));
            }
        }

        foreach my $uprop ("s1_lastn_style", "s1_calendar_style", "s1_day_style", "s1_friends_style") {
            next if $POST{$uprop} eq $u->prop($uprop);
            $u->set_prop($uprop, $POST{$uprop});
        }


        ### Theme ###

        $update{'themeid'} = $POST{'s1_themetype'} eq "custom" ? 0 : $POST{'s1_themeid'};

        if ($POST{'s1_themetype'} eq "custom") {
            my $dig = Digest::MD5::md5_hex(join(",", map { $POST{"s1_theme_cust:$_"} }
                                                map { $_->[0] } @LJ::S1::themecoltypes));
            if ($dig ne $POST{'s1_themecolors_dig'}) {
                my %cols;
                foreach my $col (@LJ::S1::themecoltypes) {
                    my $val = $POST{"s1_theme_cust:$col->[0]"};
                    $cols{$col->[0]} = $val;
                }

                return $ML{"error.nodb"} unless $u->writer;
                $u->do("INSERT IGNORE INTO s1usercache (userid) VALUES (?)", undef, $u->{'userid'});
                $u->do("UPDATE s1usercache SET color_stor=? WHERE userid=?", undef,
                       Storable::freeze(\%cols), $u->{'userid'});
                LJ::MemCache::delete([$u->{'userid'}, "s1uc:$u->{'userid'}"]);

                my $dbh = LJ::get_db_writer();
                $dbh->do("DELETE FROM themecustom WHERE user=?", undef, $u->{'user'})
                    if $dbh->selectrow_array("SELECT user FROM themecustom ".
                                             "WHERE user=? LIMIT 1", undef, $u->{'user'});
            }
        }


        ### Mood Icons and Navigation Strip ###

        @errors = LJ::Widget->handle_post(\%POST, qw(MoodThemeChooser NavStripChooser));
        return LJ::bad_input(@errors) if @errors;


        ### Show Community Userpics ###
        
        $u->set_prop("opt_usesharedpic", $POST{'opt_usesharedpic'});

        
        ### Overrides ###

        my $capstyles = LJ::get_cap($u, "styles");

        # update 'overrides' table
        if ($POST{'s1_overrides'} !~ /\S/) {
            LJ::S1::clear_overrides($u);
            $update{'useoverrides'} = "N";
        } else {
            my $oldoverrides = "";
            if ($u->{'useoverrides'} eq "Y") {
                $oldoverrides = LJ::S1::get_overrides($u);
            }

            # This allows users to keep their current illegal overrides,
            # but they may not create new ones nor edit the ones they already have.
            # They may only delete or keep illegal overrides.
            my %overrides = ();
            my %newoverrides = ();
            LJ::parse_vars(\$oldoverrides,\%overrides);
            LJ::parse_vars(\$POST{'s1_overrides'},\%newoverrides);

            # head overrides should only have valid head elements in them
            foreach my $a (qw(GLOBAL LASTN FRIENDS CALENDAR DAY)) {
                my $sec = "${a}_HEAD";
                next unless $newoverrides{$sec} ne $overrides{$sec};

                my $testtag = sub {
                    my $tag = lc(shift);
                    return "<$tag" if ($tag eq "title" || $tag eq "base" ||
                                       $tag eq "style" || $tag eq "link" ||
                                       $tag eq "meta" || $tag  eq "xx");
                    return "<xx-$tag";
                };
                $newoverrides{$sec} =~ s/\<(\w+)/$testtag->($1)/eig;
                $newoverrides{$sec} =~ s/\<\/head/\<\/xx-head/ig;
            }

            # load all the properties to see which ones are overridable
            my @vars;
            LJ::load_objects_from_file("vars.dat", \@vars);
            foreach my $v (@vars) {
                my $ov = $v->{'props'}->{'override'};
                if ($ov eq "yes" || $ov eq "only" || $capstyles) {
                    my $name = $v->{'name'};
                    if (defined $newoverrides{$name}) {
                        $overrides{$name} = $newoverrides{$name};
                    }
                }
            }

            # make the new override code we'll put in the database
            my $overr='';
            foreach (keys %overrides) {
                if ($newoverrides{$_}) {
                    if ($overrides{$_} =~ /\n/) {
                        $overr .= "$_<=\n".$overrides{$_}."\n<=$_\n\n";
                    } else {
                        $overr .= "$_=>".$overrides{$_}."\n\n";
                    }
                }
            }

            # no value, delete overrides
            if ($overr !~ /\S/) {
                LJ::S1::clear_overrides($u);
                $update{'useoverrides'} = "N";

            # have a value, update overrides
            } else {
                LJ::S1::save_overrides($u, $overr);
                $update{'useoverrides'} = "Y";
            }
        }


        # update 'user' table
        foreach (keys %update) {
            delete $update{$_} if $u->{$_} eq $update{$_};
        }
        LJ::update_user($u, \%update) if %update;

        # Reload the user object to force the display of these changes
        $u = LJ::load_user($u->{user}, 'force');

        LJ::cmize::js_redirect(\%POST, s1only => 1, getextra => $getextra);
        $saved_msg .= "Your settings have been saved. <a href='" . $u->journal_base() . "'>View your Journal</a>.";
    }

    $ret .= "<?warningbar $saved_msg warningbar?>" if $saved_msg;
    $ret .= "<?errorbar $err_msg errorbar?>" if $err_msg;

    $ret .= "<form action='$LJ::SITEROOT/customize/s1/' method='get' id='Authas'>\n";
    $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
    $ret .= "</form>";

    $ret .= LJ::cmize::html_tablinks("index", $getextra, s1only => 1);
    $ret .= "<div id='CurrentTab'>";

    ### Sidebar ###
    {
        $ret .= "<div id='CurrentTabSide'>";
        $ret .= LJ::Customize->s2_upsell($getextra);
        $ret .= "</div>";
    }

    $ret .= "<div id='CurrentTabMain'>";
    $ret .= LJ::Widget::MoodThemeChooser->start_form( id => 'display_form' );

    ### Journal Titles ###

    $ret .= "<fieldset><legend>Journal Titles</legend><table>";
    # journaltitle
    $ret .= "<tr><th style='text-align: right'>Journal Title:</th><td>";
    $ret .= LJ::html_text({ 'name' => 'journaltitle', 'value' => $u->prop('journaltitle'),
                            'size' => '30', 'maxlength' => LJ::std_max_length() });
    $ret .= " </td></tr>\n";
    # journalsubtitle
    $ret .= "<tr><th style='text-align: right'>Subtitle:</th><td>";
    $ret .= LJ::html_text({ 'name' => 'journalsubtitle', 'value' => $u->prop('journalsubtitle'),
                            'size' => '30', 'maxlength' => LJ::std_max_length() });
    $ret .= " </td></tr>\n";

    # friendspagetitle
    $ret .= "<tr><th style='text-align: right'>Friends Page Title:</th><td>";
    $ret .= LJ::html_text({ 'name' => 'friendspagetitle', 'value' => $u->prop('friendspagetitle'),
                            'size' => '30', 'maxlength' => LJ::std_max_length() });
    $ret .= "</td></tr>\n";
    $ret .= "</table></fieldset>";


    ### Layout ###

    my $dbr = LJ::get_db_reader();
    my $sth;

    my $and = $capstyles ? "" : $ML{'.pagelayoutstyle.warning'};
    $ret .= "<fieldset><legend>Layout</legend>";
    $ret .= "<?p $ML{'.pagelayoutstyle.about'}  $and p?>\n";

    foreach my $view (@LJ::views) {
        $ret .= "<div style='border: 1px solid #ccc; margin-bottom: .5em'>";
        $ret .= "<div style='text-align: left; padding-top: 1em;'>";
        $ret .= "<div style='margin-left: 30px; margin-bottom: 20px;'>";
        $ret .= "<label for='s1_${view}_style'>$LJ::viewinfo{$view}->{'des'}:</label> ";

        my @list = LJ::cmize::s1_get_style_list($u, $view);
        $ret .= LJ::html_select({ 'id' => "s1_${view}_style", 'name' => "s1_${view}_style",
                                  'selected' => $u->prop("s1_${view}_style") }, @list);

        $ret .= "</div></div></div>";
    }
    $ret .= "</fieldset>";


    ### Theme ###

    # Color Themes #

    $ret .= "<fieldset><legend>Theme</legend>";
    $ret .= "<?p Select a color theme to apply to the layout options you chose above. If you don't like the provided colors, you can specify your own. p?>\n";
    $ret .= "<div style='margin-left: 30px; margin-bottom: 20px;'>\n";

    $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 's1_themetype', 'id' => "themetype:system",
                             'value' => 'system', 'selected' => $u->{'themeid'} > 0 });
    $ret .= "<b>$ML{'.colortheme.defaulttheme'}</b>: ";

    my @list = LJ::cmize::s1_get_theme_list();
    $ret .= LJ::html_select({ 'name' => 's1_themeid', 'selected' => $u->prop('themeid') }, @list) . "<br />";
    $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 's1_themetype', 'id' => 'themetype:custom',
                             'value' => 'custom', 'selected' => $u->{'themeid'} == 0, });
    $ret .= "<b>$ML{'.colortheme.customcolors'}</b>:";

    # Custom colors #

    my $s1_customcolors;
    {
        my %custcolors = LJ::cmize::s1_get_customcolors($u);

        $s1_customcolors = "<table>";
        my $dig;
        foreach my $col (@LJ::S1::themecoltypes) {
            $s1_customcolors .= "<tr><td align='right'>$col->[1]</td><td>";
            $s1_customcolors .= LJ::html_color({ 'name' => "s1_theme_cust:$col->[0]",
                                                 'default' => $custcolors{$col->[0]}, });
            $s1_customcolors .= "</td></tr>\n";
            $dig .= $col->[0];
        }
        $dig = Digest::MD5::md5_hex($dig);
        $s1_customcolors .= LJ::html_hidden("s1_themecolors_dig", $dig) unless $u->prop('themeid');

        $s1_customcolors .= "</table>";
    }
    $ret .= "<div style='display: none' id='s1_customcolors'>$s1_customcolors</div>";
    # Will this work?
    #$ret .= "<noscript style='display: none'><div id='s1_customcolors_noscript'>$s1_customcolors</div></noscript>";

    $ret .= "</div></fieldset>";


    ### Mood Icons ###

    my $mood_theme_chooser = LJ::Widget::MoodThemeChooser->new;
    $headextra .= $mood_theme_chooser->wrapped_js;
    $ret .= $mood_theme_chooser->render;


    ### Navigation Strip ###

    $ret .= LJ::Widget::NavStripChooser->render;


    ### Show Community Userpic ###

    $ret .= "<fieldset><legend>Show Community Userpics</legend>";

    $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_usesharedpic',
                             'id' => "opt_usesharedpic", 'selected' => $u->prop('opt_usesharedpic') });
    $ret .= "<label for='opt_usesharedpic' style='font-weight: bold'>$ML{'.friends.opt.usesharedpic.head'}</label>";
    $ret .= "<?p $ML{'.friends.opt.usesharedpic.about'} p?>";

    $ret .= "</fieldset>";


    ### Overrides ###

    # first, load the overrides if they use 'em:
    my $overrides = "";
    if ($u->{'useoverrides'} eq "Y") {
        $overrides = LJ::S1::get_overrides($u);
        LJ::text_out(\$overrides);
    }

    $ret .= "<fieldset><legend>Overrides</legend>";
    $ret .= "<?p Overrides allow you to modify individual portions of your style to make it look just the way you want it. Please note that not all <a href='http://www.livejournal.com/developer/varlist.bml'>style variables</a> can be overridden. p?>\n";
    $ret .= "<?p The only HTML elements that can be used in *_HEAD overrides are limited to " . LJ::ehtml("<title>, <base>, <style>, <link>, and <meta>") . ". Additionally, any override content that isn't included within an override block (such as GLOBAL_HEAD) will also be stripped. p?>";
    $ret .= "<?standout " . LJ::html_textarea({ 'name' => 's1_overrides', 'cols' => '60', 'rows' => '15',
                                                'wrap' => 'off', 'value' => $overrides }) . " standout?>";
    $ret .= "</fieldset>";


    $ret .= LJ::cmize::html_save();
    $ret .= LJ::Widget::MoodThemeChooser->end_form;
    $ret .= "</div></div>";

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<?_code return $headextra; _code?>
<=head
page?>
