<?_code
{
    use strict;
    use vars qw(%POST);

    unless ($LJ::FIX_USERCOUNTER_ENABLED) {
        return 
            "This tool is no longer necessary.  However, it can be re-enabled by " .
            "setting \$LJ::FIX_USERCOUNTER_ENABLED.";
    }

    my $ret;
    my $remote = LJ::get_remote();

    return "Not logged in" unless $remote;
    return "<b>Error:</b> You don't have access to do this."
	unless LJ::check_priv($remote, "supporthelp");

    # perform action
    if (LJ::did_post()) {
        my $u = LJ::load_user($POST{user})
            or return "<b>Error:</b>  Invalid user: $POST{user}";

        unless ($POST{area} =~ /^[LTMSRKPCO]$/) {
            return "<b>Error:</b> Invalid area: $POST{area}";
        }

        my $dbh = LJ::get_db_writer()
            or return "<b>Error:</b> Unable to contact global master";

        my $rv = $dbh->do
            ("DELETE FROM usercounter WHERE journalid=? AND area=?",
             undef, $u->{userid}, $POST{area});

        if ($dbh->err) {
            return "<b>Error:</b> Error in query: " . $dbh->errstr;
        }

        unless ($rv) {
            return "<b>Error:</b> Unknown error in query";
        }

        return "User counter successfully reset\n";
        
    }

    # form

    $ret .= "<?h1 Reset User Counter h1?>";
    $ret .= 
        "<?p This tool should be used to resolve 'duplicate key error' issues with " .
        "journals.  A brief explanation:  The problem happens because at one time " .
        "the user created, for example, journal entry id \#123, but their user counter " .
        "thinks that the highest id that has been created is \#120.  So the next time " .
        "they try to post the system tries to create post id \#121 and finds that it already " .
        "exists, returning an error.  After multiple tries, the id the system tries to " .
        "create will become \#124 (incrrementing by 1) and will magically work. p?>";

    $ret .= 
        "<?p By using this tool, a user's counter will be reset and reallocated with a " .
        "valid id. p?>";

    $ret .= 
        "<?p <b>Notes:</b> When specifying a username, you must give the username of " .
        "the journal <i>on which the problem is happening</i>, not necessarly the " .
        "journal of the logged in user.  This means that if there is an error posting " .
        "to a community, the username of that community should be given.  Likewise if " .
        "there is an error posting a comment to a journal, the username should be that " .
        "of the comment to which the comment is being posted. p?>";

    $ret .= "<form method='post'>";
    $ret .= "User: " . 
        LJ::html_text
        ({ name => 'user',
           size => '15',
           maxlength => '15' }) . " ";

    $ret .= "Area: " . 
        LJ::html_select
        ({ name => 'area',
           size => 1 },
         L => 'Journal Post',
         T => 'Journal Comment', 
         M => 'Moderated Post',
         S => 'Login Session',
         R => 'Memory',
         K => 'Keyword (Userpics, Tags, etc)',
         P => 'Phone Post', 
         C => 'Pending Comment',
         O => 'Portal Box',
         ) . " ";

    $ret .= LJ::html_submit('reset' => 'Reset');

    return $ret;
}
_code?>

