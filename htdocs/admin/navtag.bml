<html>
<head>
<style>
    div.tagcloud a { text-decoration: none; }
    div.tagcloud a:visited { color: #00f; }
    div.tagcloud a:link { color: #00f; }
</style>
</head>
<body>
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    my $remote = LJ::get_remote();
    my @displayprivs = ( "siteadmin:navtag", "siteadmin:*" );
    my $numprivs = @displayprivs;

    return "<?needlogin?>" unless $remote;

    return BML::ml( "admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @displayprivs) . "</b>"} )
        unless LJ::check_priv($remote, 'siteadmin', 'navtag');

    do "LJ/NavTag.pm";
    #use LJ::NavTag;

    my $view = $GET{'view'};
    my $viewtag = $GET{'tag'};
    my $viewdest = $GET{'dest'};

    my $body;

    if (LJ::did_post()) {
        return "<b>$ML{'Error'}</b> $ML{'error.invalidform'}" unless LJ::check_form_auth();
        
	foreach my $key (keys %POST) {
	    if ($key eq 'add_tags') {
		my $tags = $POST{'add_tags'};
		my $url  = $POST{'add_tags_url'};

		return "No tags specified" unless $tags;
		return "No URL specified" unless $url;

		my $dest = LJ::NavTag::Dest->new_from_url($url);
		foreach my $tag (split(',', $tags)) {
		    $dest->add_tag(LJ::NavTag::canonical_tag($tag));
		}

		$view = 'dest';
		$viewdest = $url;

	    } elsif ($key =~ /^del_(\w+)_(\w+):(.+)$/) {
		my ($tag, $type, $dest) = ($1, $2, $3);

		$dest =~ s/$LJ::SITEROOT//;

		my $destobj = LJ::NavTag::Dest->new(
						    type => $type,
						    dest => $dest,
						    );
		return "Can't create dest object" unless $destobj;

		$destobj->remove_tag($tag);

		$view = 'dest';
		$viewdest = $LJ::SITEROOT . $dest;
	    }
	}
    }

    if ($view eq 'tag') {
	$body .= "<a href='navtag'><< Home</a><br />";
	$body .= by_tag($viewtag);
    } elsif ($view eq 'dest') {
	$body .= "<a href='navtag'><< Home</a><br />";
	$body .= by_url($viewdest);
    } else {
	$body .= current_tags();
	$body .= add_tags();
    }

    return $body;

    sub add_tags {
	my $dest = shift;

	my $ret;


	$ret .= "<form action='navtag' method='POST'>";
        $ret .= LJ::form_auth();
	$ret .= "<br /><?h1 JFTI! h1?>";

	$ret .= "<?p To link to a user enter their userinfo URL.  FAQ's should be the faqbrowse URL ending in the faqid.  All others will be considered a normal page.  Tags are comma-separated. p?>";

	if ($dest) {
	    $ret .= "<b>Add Tags:</b> ";
	    $ret .= LJ::html_text({ name => 'add_tags', size => 30 });
	    $ret .= LJ::html_hidden('add_tags_url', $dest);
	} else {
	    $ret .= "<table><tr><th>Add Tags</th><th>URL</th></tr>";
	    $ret .= "<tr><td>";
	    $ret .= LJ::html_text({ name => 'add_tags', size => 30 });
	    $ret .= "</td><td>";
	    $ret .= LJ::html_text({ name => 'add_tags_url', size => 40 });
	    $ret .= "</td></tr></table>";
	}

	$ret .= LJ::html_submit('Save');
	$ret .= "</form>";

	return $ret;
    }

    sub current_tags {
	my $ret;
	$ret .= "<?h1 Current Resource Tags on $LJ::SITENAMESHORT h1?>";

	my $tags = LJ::NavTag::tags_with_count();
	my %cloud;

	foreach my $tag (keys %$tags) {
	    $cloud{$tag} = {
		url   => "navtag?view=tag&tag=" . LJ::eurl($tag),
		value => $tags->{$tag},
	    };
	}

	$ret .= tag_cloud(\%cloud);

	return $ret;
    }

    sub by_url {
        my $url = shift;
        my $ret;

        $ret .= "<form action='navtag' method='POST'>";
        $ret .= LJ::form_auth();
        $ret .= "<?h1 Tags Pointing At " . LJ::ehtml($url) . " h1?>";

        $ret .= "<table><tr><th>Tag</th><th>Remove</th></tr>";

        my $dest = LJ::NavTag::Dest->new_from_url($url);

        return "No destination found" unless $dest;

        my @tags = LJ::NavTag->tags_of_dest($dest);

        foreach my $tag (@tags) {
            $ret .= "<tr><td><a href='navtag?view=tag&tag=" . LJ::eurl($tag) . "'>";
            $ret .=  LJ::ehtml($tag) . "</a></td>";

            $ret .= "<td>" . LJ::html_submit("del_${tag}_PAGE:$url", 'X') . "</td>";
        }

	$ret .= "</table>";
	$ret .= "</form>";

	$ret .= add_tags($url);

	return $ret;
    }

    sub by_tag {
	my $tag = shift;
	my $ret;

	$ret .= "<?h1 Destinations Of Tag " . LJ::ehtml($tag) . " h1?>";
	$ret .= "<table><tr><th>Title</th><th>Destination</th></tr>";

	my @dests = LJ::NavTag->dests_of_tag($tag);

	foreach my $dest (@dests) {
	    $ret .= "<tr><td>" . LJ::ehtml($dest->title) . "</td>";

	    if (my $lju = $dest->ljuser) {
		$ret .= "<td><a href='navtag?view=dest&dest=";
		$ret .= LJ::eurl("$LJ::SITEROOT/userinfo?user=$lju->{user}") . "'>";
		$ret .= "$lju->{user}</a> (" . $lju->ljuser_display . ")</td>";
	    } elsif (my $url = $dest->url) {
		$ret .= "<td><a href='navtag?view=dest&dest=" . LJ::eurl($url) . "'>";
                $ret .= LJ::ehtml($url) . "</a> (<a href='$url'>view</a>)</td>";
	    }

	    $ret .= "</tr>";
	}

	$ret .= "</table>";

	return $ret;
    }

    # Returns HTML of a dynamic tag could given passed in data
    # Requires hash-ref of tag => { url => url, value => value }
    sub tag_cloud {
        my $tags = shift;

        # find sizes of tags, sorted
        my @sizes = sort { $a <=> $b } map { $tags->{$_}->{'value'} } keys %$tags;

        # remove duplicates:
        my %sizes = map { $_, 1 } @sizes;
        @sizes = sort { $a <=> $b } keys %sizes;

        my @tag_names = sort keys %$tags;

        my $percentile = sub {
            my $n = shift;
            my $total = scalar @sizes;
            for (my $i = 0; $i < $total; $i++) {
                next if $n > $sizes[$i];
                return $i / $total;
            }
        };

        my $ret .= "<div id='tagcloud' class='tagcloud'>";
        my %tagdata = ();
        foreach my $tag (@tag_names) {
            my $tagurl = $tags->{$tag}->{'url'};
            my $ct     = $tags->{$tag}->{'value'};
            my $pt     = int(8 + $percentile->($ct) * 25);
            $ret .= "<a id='taglink_$tag' href='";
            $ret .= LJ::ehtml($tagurl) . "' style='color: <?altcolor2?>; font-size: ${pt}pt;'>";
            $ret .= LJ::ehtml($tag) . "</a>\n";

            # build hash of tagname => final point size for refresh
            $tagdata{$tag} = $pt;
        }
        $ret .= "</div>";

        return $ret;
    }

}
_code?>
</body>
</html>
