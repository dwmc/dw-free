<?_c
#
# admin/index.bml
#
# Because blank index files annoy me. Lists all pages $remote has privs
# to view; does not show the link if you can't use it.
#
# Authors:
#      Denise Paolucci <denise@dreamwidth.org>
#      Sophie Hamilton <dw-bugzilla@theblob.org>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself. For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#
_c?><?page
body<=
<?_code
{
    use strict;
    use vars qw/ %GET %POST $title $windowtitle @errors @warnings /;

    # translated/custom page title can go here
    $title = "Admin Tools";
    $windowtitle = "Admin Tools";

    # for pages that require authentication
    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $ret;

    my @adminpages = (
        [ 'capedit.bml',
            'Capability Edit', 'For editing user capabilities.', [ 'admin:capedit', 'admin:*', sub {
                return ( $LJ::IS_DEV_SERVER, "dev server" );
            } ] ],
        [ 'clusterstatus.bml',
            'Cluster Status', 'Get information on cluster availability.', [ 'supporthelp' ] ],
        [ 'console/',
            'Console', 'For general input; usable by all users to an extent.' ],
        [ 'schema/',
            'Database Schema', 'Shows the database schema.', [ 'schemadoc' ] ],
        [ 'dupkiller.bml',
            'Duplicate Entry Killer', 'Checks for (and kills) duplicate entries.', [ 'supporthelp' ] ],
        [ 'entryprops.bml',
            'Entry Properties', 'View the properties set on a particular entry.', [ 'canview:entryprops', 'canview:*', sub {
                return ( $LJ::IS_DEV_SERVER, "dev server" );
            } ] ],
        [ 'faq/',
            'FAQ Tools', 'Allows you to manipulate the FAQ.', [ 'faqadd', 'faqedit', 'faqcat' ] ],
        [ 'fileedit/',
            'File Edit', 'Allows you to edit various include files.', [ 'fileedit' ] ],
        [ 'invites/requests.bml',
            'Invite Code Requests', 'Allows you to review requests for invite codes.', [ 'payments' ] ],
        [ 'invites/review.bml',
            'Review Invite History', 'Allows you to view a user\'s invite history.', [ 'payments' ] ],
        [ 'invitecodes.bml',
            'Invite Codes', 'Shows the provenance of an invite code.', [ 'finduser:codetrace', 'finduser:*' ] ],
        [ 'logout_user.bml',
            'Logout User', 'Logs a user out of the site.', [ 'suspend' ] ],
        [ 'memcache.bml',
            'Memcache Overview', 'Shows current memcache conditions.', [ 'siteadmin:memcacheview', 'siteadmin:*' ] ],
        [ 'memcache_view.bml',
            'Memcache View', 'Shows current memcache details.', [ 'siteadmin:memcacheview', 'siteadmin:*', sub {
                return ( $LJ::IS_DEV_SERVER, "dev server" );
            } ] ],
        [ 'mysql_status.bml',
            'MySQL Status', 'Shows current MySQL status.', [ 'siteadmin:mysqlstatus', 'siteadmin:*' ] ],
        [ 'navtag.bml',
            'Navtag Edit', 'Allows you to tag pages for navigation.', [ 'siteadmin:navtag', 'siteadmin:*' ] ],
        [ 'pay/',
            'Payment Managements', 'Review payment details.', [ 'payments' ] ],
        [ 'priv/',
            'Privilege Management', 'View privs by priv or by user. Some priv lists are private.' ],
        [ 'propedit.bml',
            'User Property Edit', 'Allows you to view and edit userprops.', [ 'canview:userprops', 'canview:*' ] ],
        [ 'recent_comments.bml',
            'Recent Comments', 'Allows you to view a user\'s recent comments.', [ 'siteadmin:commentview', 'siteadmin:*' ] ],
        [ 'schools/',
            'Schools Directory', 'View and manipulate schools data.', [ 'siteadmin:schools', 'siteadmin:*' ] ],
        [ 'sitemessages/add.bml',
            'Site Messages - Add', 'Add new site-wide messages.', [ 'siteadmin:sitemessages', 'siteadmin:*', sub {
                return ( $LJ::IS_DEV_SERVER, "dev server" );
            } ] ],
        [ 'sitemessages/manage.bml',
            'Site Messages - Manage', 'View and manipulate site-wide messages.', [ 'siteadmin:sitemessages', 'siteadmin:*', sub {
                return ( $LJ::IS_DEV_SERVER, "dev server" );
            } ] ],
        [ 'spamreports.bml',
            'Spam Reports', 'View and handle reports of spam.', [ 'siteadmin:spamreports', 'siteadmin:*' ] ],
        [ 'statushistory.bml',
            'Statushistory', 'Shows you a user\'s statushistory.', [ 'historyview', sub {
                return ( $LJ::IS_DEV_SERVER, "dev server" );
            } ] ],
        [ 'styleinfo.bml',
            'Style Info', 'Shows you a user\'s style information.', [ sub {
                return ( LJ::Support::has_any_support_priv($remote), "any support priv" );
            }, sub {
                return ( $LJ::IS_DEV_SERVER, "dev server" );
            } ] ],
        [ 'userlog.bml',
            'Userlog Viewer', 'Shows you a user\'s logged actions.', [ 'canview:userlog', 'canview:*' ] ],
    );

    $ret .= "<ul>\n";

    my $adminstar = LJ::check_priv( $remote, 'admin', '*' );
    foreach my $page ( @adminpages ) {
        my ( $path, $name, $description, $privs ) = @{$page};
        my $showpage = 0;
        my ( @needsprivs, @gotprivs );
        my $haspriv = 0;
        foreach my $priv ( @{$privs} ) {
            my $result = ( ref( $priv ) eq "CODE" ?
                             ( $priv->() )[0] :
                             LJ::check_priv( $remote, split( /:/, $priv ) ) );
            my $displayedpriv = ( ref( $priv ) eq "CODE" ? ( $priv->() )[1] : $priv );
            push( @gotprivs,   $displayedpriv ) if $result;
            push( @needsprivs, $displayedpriv ) if !$result;
            $haspriv  = 1 if $result;
            $showpage = 1 if $adminstar || $result;
        }
        if ( @{$privs} == 0 ) {
            $showpage = 1;
            $haspriv  = 1;
        }
        if ( $showpage ) {
            my $needspriv = ( $haspriv ? "" : " needspriv" );
            my $privreason = "";
            if ( @gotprivs || @needsprivs ) {
                my $oneof = ( @needsprivs > 1 ? " one of" : "" );
                $privreason = ( $haspriv ? "(<b>"  . join( "</b>, <b>", @gotprivs   ) . "</b>)"
                                         : "(needs$oneof: <b>" . join( "</b>, <b>", @needsprivs ) . "</b>)" );
            }
            $ret .= "<li class='item$needspriv'><div class='itemhead'><a href='$path'>$name</a> <span class='itemprivs'>$privreason</span></div><div class='itemdef'>$description</div></li>\n";
        }
    }

    $ret .= "</ul>";

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
windowtitle=><?_code return $windowtitle; _code?>
head<=
<style type="text/css">
.item {margin-bottom: 15px;}
.item.needspriv div, .item.needspriv a {color: #A0A0A0;}
.itemhead {font-size: bigger; font-weight: bold;}
.itemdef {margin-left: 2em;}
.itemprivs {font-size: smaller; font-weight: normal; color: #707070;}
</style>
<=head
page?>
