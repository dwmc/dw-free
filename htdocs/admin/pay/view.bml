<html>
<head><title>Payment Management</title></head>
<body>

<?_code
{
    use strict;
    use vars qw(%GET %POST);

    my $remote = LJ::get_remote();
    my @displayprivs = ( "payments" );
    my $numprivs = @displayprivs;

    return "<?needlogin?>" unless $remote; 
    return BML::ml( "admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @displayprivs) . "</b>"} )
        unless LJ::check_priv($remote, 'payments');

    my $body = '<h1>Payment Manager - View Cart</h1>';
    $body .= '<p>[ <a href="/admin/pay/index.bml">&lt;&lt; Back to Index</a> ]</p>';

    return "Must provide cartid."
        unless $GET{cartid} && $GET{cartid} > 0;

    my $cartid = $GET{cartid} + 0;
    my $cart = DW::Shop::Cart->get_from_cartid( $cartid )
        or return "Sorry, invalid cart/cart not found in the database!";

    $cartid = $cart->id;   # get a normalised value back
    my $state = $cart->state;
    my $u = LJ::load_userid( $cart->userid );
    my $from = ( defined $u ? $u->ljuser_display : "Logged-out user with uniq: " . $cart->uniq );

    my $paymentmethod = $cart->paymentmethod;
    my $paystr = ( $paymentmethod ?
                       $ML{"/shop/receipt.bml.cart.paymentmethod.$paymentmethod"} :
                       "(not yet selected)" );

    $body .= "<h2>Cart #$cartid</h2>";
    $body .= "<table border='1'>";
    $body .= "<tr><th>From:</th><td>$from</td></tr>";
    $body .= "<tr><th>Date:</th><td>" . DateTime->from_epoch( epoch => $cart->starttime )->strftime( "%F %r %Z" ) . "</td></tr>";
    $body .= "<tr><th>Total:</th><td>\$" . $cart->total . " USD</td></tr>";
    $body .= "<tr><th>Payment Method:</th><td>$paystr</td></tr>";
    $body .= "<th>Status:</th><td>$ML{\"/shop/receipt.bml.cart.status.$state\"}</td></tr>";
    $body .= "</table>";

    $body .= "<h3>Items</h3>";
    if ( $cart->has_items ) {
        $body .= LJ::Widget::ShopCart->render( receipt => 1, cart => $cart );
    }
    else {
        $body .= "<p>This cart has no items in it.</p>";
    }

    # very sad generic table dumper
    my $dump = sub {
        my ( $sql, @bind ) = @_;

        # make an educated guess at durl-ing something
        my $durl = sub {
            my $val = shift;
            return $val
                unless $val =~ /&/ && $val =~ /=/;
            my ( $hr, $ar ) = ( {}, [] );
            LJ::decode_url_string( $val, $hr, $ar );
            foreach ( qw/ SIGNATURE USER PWD / ) {
                $hr->{$_} = '<em>redacted</em>'
                    if exists $hr->{$_};
            }
            return "<br />-----------<br />" . join( '<br />', map { "<strong>$_:</strong> $hr->{$_}" } sort keys %$hr );
        };

        my $dbh = LJ::get_db_writer();
        my $sth = $dbh->prepare( $sql )
            or return $body .= "<p>Unable to prepare SQL.</p>";
        $sth->execute( @bind );
        return $body .= "<p>Error executing SQL.</p>"
            if $sth->err;

        my $rows = [];
        push @$rows, $_
            while $_ = $sth->fetchrow_hashref;
        return $body .= "<p>No records found.</p>"
            unless $rows && @$rows;

        my @cols = sort { $a cmp $b } keys %{ $rows->[0] };
        $body .= q{<table><tr><th>};
        $body .= join( '</th><th>', @cols );
        $body .= q{</th></tr>};

        foreach my $row ( @$rows ) {
            $body .= q{<tr><td>};
            $body .= join( '</td><td>', map { $durl->( $row->{$_} ) } @cols );
            $body .= q{</td></tr>};
        }

        $body .= q{</table>};
    };

    # attempt to create an engine so we can get more info
    my $classname = $DW::Shop::PAYMENTMETHODS{$paymentmethod}->{class};
    my $engine = eval "DW::Shop::Engine::${classname}->new_from_cart( \$cart )";

    if ( $classname eq 'PayPal' ) {
        # show the payer's details.
        $body .= "<h2>Payer Details</h2>";
        $body .= "<table border='1'>";
        $body .= "<tr><th>First Name:</th><td>" . $engine->firstname . "</td></tr>";
        $body .= "<tr><th>Last Name:</th></td>" . $engine->lastname . "</td></tr>";
        $body .= "<tr><th>PayPal Email Address:</th><td>" . $engine->email . "</td></tr>";
        $body .= "<tr><th>User Email Address:</th><td>" . $cart->email . "</td></tr>";
        $body .= "</table>";

        # now show the pp_trans log
        $body .= "<h2>raw: pp_trans (PayPal transactions)</h2>";
        $dump->( 'SELECT * FROM pp_trans WHERE ppid = ?', $engine->ppid );

        # now show the pp_log log
        $body .= "<h2>raw: pp_log (PayPal raw log)</h2>";
        $dump->( 'SELECT * FROM pp_log WHERE ppid = ?', $engine->ppid );

    } elsif ( $classname eq 'CheckMoneyOrder' ) {
        # show the payer's details.
        $body .= "<h2>Payer Details</h2>";
        $body .= "<table border='1'>";
        $body .= "<tr><th>Email Address:</th><td>" . $cart->email . "</td></tr>";
        $body .= "</table>";
    }

    if ( $state == $DW::Shop::STATE_PEND_PAID ) {
        $body .= <<HTML;
<h2>Mark as Payment Received</h2>

<form method="post" action="/admin/pay/mark-received">
<p>
<label for="paymentmethod">Payment method:</label>
<select id="paymentmethod" name="paymentmethod">
<option value="cash">Cash</option>
<option value="check">Check</option>
<option value="moneyorder">Money Order</option>
<option value="other">Other</option>
</select>
</p>

<p>
<label for="notes">Payment notes (check no, address, etc):</label><br>
<textarea rows="5" cols="40" name="notes" id="notes"></textarea>
</p>

<p>
<input type="submit" value="Mark as Received">
</p>
</form>
HTML
    }

    return $body;
}
_code?>

</body>
</html>
