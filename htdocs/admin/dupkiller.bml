<?_code
{
    use strict;
    use vars qw(%GET %POST);
    use Digest::SHA1 qw(sha1_hex);

    my $ret;
    my $remote = LJ::get_remote();

    my @display_privs = ( "supporthelp" );
    my $numprivs = @display_privs;

    return "<?needlogin?>" unless $remote;
    return BML::ml( "admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @display_privs) . "</b>"} )
        unless LJ::check_priv($remote, "supporthelp");

    unless (LJ::did_post()) {
	$ret .= "<h1>duplicate entry killer</h1>\n";
	$ret .= "<form method='post'>";
        $ret .= LJ::form_auth();
	$ret .= "Kill duplicates for user: <input name='user' maxlength='25' size='25'> <input type='submit' value=\"Kill\">";
	$ret .= "</form>";
	return $ret;
    }

    return "<b>$ML{'Error'}</b> requires post"
	unless (LJ::did_post());

    return "<b>$ML{'Error'}</b> $ML{'error.invalidform'}"
	unless LJ::check_form_auth();

    my $u = LJ::load_user($POST{'user'});
    unless ($u) {
	$ret .= "Unknown user.\n";
	return $ret;
    }

    # find last 5 days worth of posts to look for dups in

    my $err;
    my $dayc = LJ::Protocol::getdaycounts({
	username => $u->{user},
    }, \$err, { u => $u, nopassword => 1 });
    my @days = reverse sort map { $_->{'date'} } @{ $dayc->{'daycounts'} };
    @days = @days[0..4] if @days > 5;

    # get all those days worth of posts

    my @events;
    foreach my $day (@days) {
	my ($year, $month, $day) = split(/\-/, $day);
	my $res = LJ::Protocol::getevents({
	    username => $u->{user},
	    selecttype => "day",
	    year => $year,
	    month => $month,
	    day => $day,
	}, \$err, { u => $u, nopassword => 1 });
	return "Error: $err" unless $res;

	push @events, @{ $res->{'events'} };
    }

    my %bycontent;
    foreach my $ev (@events) {
	my $content = sha1_hex($ev->{'subject'} . ": " . $ev->{'event'});
	push @{ $bycontent{$content} ||= [] }, $ev;
    }

    # remove the non-dups
    foreach my $k (keys %bycontent) {
	delete $bycontent{$k} unless scalar @{$bycontent{$k}} > 1;
    }

    my $del_count = 0;

    # go over the dups, and find the ones without comments
    foreach my $dupk (keys %bycontent) {
	my @keep;
	my @del;

	foreach my $ev (@{ $bycontent{$dupk} }) {
	    my $rc = LJ::Talk::get_replycount($u, $ev->{'itemid'});
	    $ret .= "$dupk: $ev->{'itemid'} = $rc\n";
	    if ($rc > 0) {
		push @keep, $ev;
	    } else {
		push @del, $ev;
	    }
	}

	# if we didn't find one with comments, keep at least one
	unless (@keep) {
	    push @keep, shift @del;
	}

	$ret .= "$dupk: keep=[@keep], del=[@del]\n";

	if (@keep) {
	    foreach my $ev (@del) {
		my $res = LJ::Protocol::editevent({
		    username => $u->{user},
		    itemid => $ev->{'itemid'},
		    event => "",  # delete
		}, \$err, { u => $u, nopassword => 1 });
		return "Error: $err" unless $res;
		$ret .= "Deleted $ev->{'itemid'}\n";
                $del_count++;
	    }
	}

    }

    $ret .= "Total deleted for $u->{user}: $del_count.\n";
    return "<pre>$ret\n</pre>";


}
_code?>
