<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::need_res('stc/display_none.css');
    LJ::set_active_crumb('schoolsmy');

    my $edit_mode = 1;
    my $edit_sid = undef; # To display edit interface for only one school

    my $ret = '';
    my $err = sub { return "<?h1 $ML{'Error'} h1?><?p $_[0] p?>"; };

    return $err->($ML{'.error.disabled'})
        unless LJ::is_enabled('schools');

    my %ierr;
    my $bogus = sub {
        my $key = shift;
        my $msg = shift;
        $ierr{$key} = $msg;
        $edit_mode = 1;
    };
    # inline error
    my $inerr = sub {
        my $key  = shift;
        my $pre  = shift || '';
        my $post = shift || '';
        return '' unless $ierr{$key};
        return "$pre<font color='red'><b>$ierr{$key}</b></font>$post";
    };

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;
    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'.error.cantbeauthenticated'})
        unless $u;

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';

    # In the display case we will load this here and just use it directly
    # If we do any edits, we will reload it before display
    my $schools = LJ::Schools::get_attended($u);

    # if we posted, then we're updating something... see what we did
    if (LJ::did_post()) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        if ($schools && %$schools) {
            foreach my $sid (keys %$schools) {
                if ($POST{"$sid:delete"}) {
                    my $rv = LJ::Schools::delete_attended($u, $sid);
                    $bogus->($sid, $ML{'.error.cantdeleteattendance'})
                        unless $rv;
                    next;
                }

                my $year_start = $POST{"$sid:year_start"};
                my $year_end   = $POST{"$sid:year_end"};

                # Do they not want any date?
                undef $year_start if $year_start eq '';

                if ($year_end && !defined $year_start) {
                    $bogus->($sid, $ML{'.error.needstartingyear'});
                    next;
                }

                # See if they mean present
                if ($year_end eq 'now' || $year_end eq '') {
                    undef $year_end;
                }

                # Check they didn't start there before 1900
                if (defined $year_start && $year_start+0 < 1900) {
                    $bogus->($sid, $ML{'.error.toopast'});
                    next;
                }

                # Check that the end year is valid
                my $year_now = ((gmtime())[5]) + 1900;
                if (defined $year_end && $year_end+0 > $year_now) {
                    $bogus->($sid, BML::ml('.error.currentlyattend', {'now' => "now"}));
                    next;
                }

                # Check for starting later than current year
                if (defined $year_start && $year_start+0 > $year_now) {
                    $bogus->($sid, $ML{'.error.toofuture'});
                    next;
                }

                # Don't let them do 2000 - 1999
                if (defined $year_end && $year_end < $year_start) {
                    $bogus->($sid, $ML{'.error.cantendbeforestart'});
                    next;
                }

                my $rv = LJ::Schools::set_attended($u, $sid, { year_start => $year_start, year_end => $year_end });
                $bogus->($sid, $ML{'.error.cantaddattendance'})
                    unless $rv;
            }
            $schools = LJ::Schools::get_attended($u);
        }

    # See if they are adding a new school
    } elsif ($GET{sid}+0 > 0 && $GET{ctc} && $GET{cc} && LJ::check_referer('/schools/')) {
        my $sid = $GET{sid}+0;

        unless (defined $schools->{sid}) {
            my $new_school = LJ::Schools::load_schools($sid);
            return LJ::bad_input($ML{'.error.cantloadschool'})
                unless $new_school;

            return LJ::bad_input($ML{'.error.locationdoesntmatch'})
                if $GET{ctc} ne $new_school->{$sid}->{country} || $GET{cc} ne $new_school->{$sid}->{city};

            unless (defined $schools->{$sid}) {
                my $rv = LJ::Schools::set_attended($u, $sid);
                return LJ::bad_input(BML::ml('.error.cantsetattendance', {'school' => $new_school->{$sid}->{name}}))
                    unless $rv;
                $schools = LJ::Schools::get_attended($u);
            }
        }

        $edit_sid = $sid;

    # Do we want to just highlight a row?
    } elsif ($GET{sid}+0 > 0) {
        $edit_sid = $GET{sid}+0;
    }

    # Header
    $ret .= "<?p $ML{'.intro'} p?>";

    # user switcher
    $ret .= "<form method='get' action='manage.bml'>\n";
    $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'}, 'label' => "<b>$ML{'.selectjournal'}</b> " });
    $ret .= "</form>\n\n";

    # must not have posted, dump what schools we've attended
    if ($schools && %$schools) {
        my $authas = $GET{authas} ? "?authas=$GET{authas}" : '';
        $ret .= "<form action='manage.bml$authas' method='post'>";
        $ret .= LJ::form_auth();
        $ret .= '<table class="alternating-rows" cellpadding="0" cellspacing="0" style="margin: 10px 0;">';

        $ret .= "<tr><th>$ML{'.table.name'}</th><th>$ML{'.table.years'}</th></tr>\n";

        my $rc = 0;
        foreach my $sid (sort { $schools->{$a}->{year_start} <=> $schools->{$b}->{year_start} ||
                                $schools->{$a}->{year_end} <=> $schools->{$b}->{year_end} ||
                                $schools->{$a}->{name} cmp $schools->{$b}->{name} } keys %$schools) {
            # sorted schools
            my $year_start = $schools->{$sid}->{year_start};
            my $year_end   = $schools->{$sid}->{year_end} || 'present';
            my $rstyle = ($rc++ & 1) ? "altrow2" : "altrow1";
            undef $year_end unless defined $year_start;

            my $link = "$LJ::SITEROOT/schools/?ctc=" . LJ::eurl($schools->{$sid}->{country}) .
                       "&sc=" . LJ::eurl($schools->{$sid}->{state}) .
                       "&cc=" . LJ::eurl($schools->{$sid}->{city}) .
                       "&sid=$sid";
            $ret .= "<tr class='$rstyle'><td><a href='$link'>" . LJ::ehtml($schools->{$sid}->{name}) . "</a></td><td>";

            $ret .= "<div id='$sid:edittime'>(";
            $ret .= LJ::html_text({name => "$sid:year_start", value => $year_start, class => "text", size => 4, maxlength => 4}) . " $ML{'.table.to'} ";
            $ret .= LJ::html_text({name => "$sid:year_end", value => $year_end eq 'present' ? 'now' : $year_end, class => "text", size => 4, maxlength => 4});
            $ret .= ') ' . LJ::html_check({name => "$sid:delete", id => "$sid:delete"}) . "<label for='$sid:delete'>$ML{'.table.input.delete'}</label>";
            $ret .= $inerr->($sid, '<br />') . "</div>";

            $ret .= '</td></tr>';
        }

        $ret .= "<tr><td colspan='3' style='border: none;'><div class='standout' style='margin: 10px 0;'><span class='container'>" . LJ::html_submit('save', $ML{'.btn.save'}) . "</span></div></td></tr>";
        $ret .= "</table>";
        $ret .= "</form>";
        $ret .= "<?p " . BML::ml('.findanother', {'aopts' => "href='$LJ::SITEROOT/schools/'"}) . " p?>";
    } else {
        $ret .= "<?p " . BML::ml('.noschools', {'aopts' => "href='$LJ::SITEROOT/schools/'"}) . " p?>";
    }

    return $ret;
}
_code?>
<=body
head<=
<script language='JavaScript'>
    function edit(sid) {
        if (!document.getElementById) {
            return true;
        }

        var d = document.getElementById(sid+':showtime');
        var e = document.getElementById(sid+':edittime');
        var s = document.getElementById('save');
        if (!d || !e || !s) {
            return true;
        }

        d.className = 'display_none';
        e.className = '';
        s.className = '';
        return false;
    }
</script>
<=head
page?>
