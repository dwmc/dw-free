<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET);

    LJ::need_res('stc/display_none.css');
    LJ::set_active_crumb('schools');

    my $ret = '';
    my $err = sub { return "<?h1 $ML{'Error'} h1?><?p $_[0] p?>"; };

    return $err->($ML{'.error.disabled'})
        if $LJ::DISABLED{'schools'};

    my ($ctc, $sc, $cc, $sid) = ($GET{ctc}, $GET{sc}, $GET{cc}, $GET{sid}+0);
    my $ectc = LJ::eurl($ctc);
    my $esc = LJ::eurl($sc);
    my $ecc = LJ::eurl($cc);
    my $esid = LJ::eurl($sid);

    my $remote = LJ::get_remote();

    my %ierr;
    my $bogus = sub {
        my $key = shift;
        my $msg = shift;
        $ierr{$key} = $msg;
    };
    # inline error
    my $inerr = sub {
        my $key  = shift;
        my $pre  = shift || '';
        my $post = shift || '';
        return '' unless $ierr{$key};
        return "$pre<font color='red'><b>$ierr{$key}</b></font>$post";
    };

    my $trail = sub {
        my ($des, $country, $state, $city) = @_;

        $state = $ML{'.error.undefinedstate'}
            if !$state && $city;

        my $ret = "<?p ";
        $ret .= "<b>$ML{'.findschool'}</b> "
            if $des;
        $ret .= "<a href='$LJ::SITEROOT/schools/?ctc=$ectc'>$country</a>";

        $ret .= " &gt; <a href='$LJ::SITEROOT/schools/?ctc=$ectc&sc=$esc'>$state</a>"
            if $state;

        $ret .= " &gt; <a href='$LJ::SITEROOT/schools/?ctc=$ectc&sc=$esc&cc=$ecc'>$city</a>"
            if $city;

        $ret .= ' p?>';
        return $ret;
    };


    my $add_school = sub {
        my ($country, $state, $city, $name, $remoterl, $class) = @_;

        my $ret;

        my $ex = sub {
            return " <span style='color: #999'><b>$ML{'.addschool.example'}</b> $_[0]</span>";
        };

        $class = $GET{add} ? '' : 'display_none'
            unless defined $class;

        $ret .= "<div class='$class' id='addschool'>";
        $ret .= "<?p $ML{'.addschool.intro'} p?>";
        $ret .= "<form action='index.bml' method='post'><div style='margin-left: 2em'>";

        $ret .= "<table><tr><td>";
        $ret .= "$ML{'.addschool.input.country'}";
        my %countries;
        LJ::load_codes({ "country" => \%countries });
        $ret .= "</td><td>";
        $ret .= LJ::html_select(
                                {
                                    name => "country",
                                    selected => $country || 'US'
                                 },  map { $_ => $countries{$_} } sort { $countries{$a} cmp $countries{$b} } keys %countries);
        $ret .= "</td></tr><tr><td colspan='2'>";
        $ret .= $inerr->('country');
        $ret .= "</td></tr><tr><td valign='top'>";
        $ret .= "$ML{'.addschool.input.state'}</td><td>" . LJ::html_text({ name => "state", maxlength => 255, size => 15, value => $state }) . "<br />&nbsp;&nbsp" . $ex->($ML{'.addschool.input.state.examples'});
        $ret .= "</td></tr><tr><td colspan='2'>";
        $ret .= $inerr->('state');
        $ret .= "</td></tr><tr><td valign='top'>";
        $ret .= "$ML{'.addschool.input.city'}</td><td>" . LJ::html_text({ name => "city", maxlength => 255, size => 20, value => $city }) . "<br />&nbsp;&nbsp;" . $ex->($ML{'.addschool.input.city.examples'});
        $ret .= "</td></tr><tr><td colspan='2'>";
        $ret .= $inerr->('city');
        $ret .= "</td></tr><tr><td valign='top'>";

        $ret .= "$ML{'.addschool.input.name'}</td><td valign='top'>" . LJ::html_text({ name => "name", size => 50, value => $name }) . "<br />&nbsp;&nbsp;" . $ex->("$ML{'.addschool.input.name.examples'}<br /><ul><li>$ML{'.addschool.input.name.fullname2'}</li><li>$ML{'.addschool.input.name.noabbrev2'}</li><li>$ML{'.addschool.input.name.campus2'}</li></ul>");
        $ret .= "</td></tr><tr><td colspan='2'>";
        $ret .= $inerr->('name');
        $ret .= "</td></tr><tr><td valign='top'>";
        $ret .= "$ML{'.addschool.input.url'} <?de $ML{'.addschool.input.url.optional'} de?></td><td>" . LJ::html_text({ name => "url", size => 50, value => $remoterl }) . "<br />";
        $ret .= "</td></tr><tr><td colspan='2'>";
        $ret .= $inerr->('url');
        $ret .= "</td></tr><tr><td colspan='2'>";
        $ret .= LJ::html_submit($ML{'.btn.addschool'});
        $ret .= "</td></tr></table>";
        $ret .= "</div></form></div>";

        return $ret;
    };

    my $add_pending = sub {
        my ($name, $city, $state, $country, $url) = @_;

        my $rv = LJ::Schools::add_pending_school($remote,
                                                 {
                                                     name        => $name,
                                                     city        => $city,
                                                     state       => $state,
                                                     countrycode => $country,
                                                     url         => $url,
                                                 });

        my $ret;

        $ret .= "<?h1 $ML{'.submitted.header'} h1?>";
        $ret .= "<?p " . BML::ml('.submitted.text', {'aopts' => "href='$LJ::SITEROOT/schools/manage.bml'"}) . " p?>";

        $ret .= "<a href='$LJ::SITEROOT/schools/'>$ML{'.submitted.return'}</a><br /><br /><a href='$LJ::SITEROOT/schools/manage.bml'>$ML{'.submitted.manage'}</a></td></tr></table>";

        return $ret;
    };

    # Adding a school
    if (LJ::did_post()) {
        return "<?needlogin?>" unless $remote;

        unless ($POST{'choose'}) {

            my ($country, $state, $city, $name, $remoterl) =
                ($POST{country}, $POST{state}, $POST{city}, $POST{name}, $POST{url});

            $bogus->('country', $ML{'.error.invalidcountry'})
                unless $country && $country =~ /^\w\w$/;

            if ($country eq 'US') {
                if ($state !~ /^\w\w$/) {
                    $bogus->('state', $ML{'.error.invalidstate'})
                } else {
                    $state = uc($state);

                    my %states;
                    LJ::load_codes({ state => \%states });

                    $bogus->('state', $ML{'.error.invalidstate'})
                        unless exists $states{$state};
                }
            } elsif ($country eq 'CA') {
                if ($state !~ /^\w\w$/) {
                    $bogus->('state', $ML{'.error.invalidprovince'})
                } else {
                    $state = uc($state);

                    $bogus->('state', $ML{'.error.validprovinces'})
                        unless $state =~ /^(AB)|(BC)|(MB)|(NB)|(NL)|(NT)|(NS)|(NU)|(ON)|(PE)|(QC)|(SK)|(YT)$/;
                }
            } elsif ($country eq 'AU') {
                if ($state !~ /^\w\w\w?$/) {
                    $bogus->('state', $ML{'.error.invalidaustate'})
                } else {
                    $bogus->('state', $ML{'.error.validaustates'})
                        unless $state =~ /^(ACT)|(NSW)|(NT)|(Qld)|(SA)|(Tas)|(Vic)|(WA)$/i;
                }
            }

            $city = LJ::Schools::canonical_city_name($city);

            $bogus->('city', $ML{'.error.nocity'})
                unless length($city);

            $name = LJ::Schools::canonical_school_name($name, $city);

            $bogus->('name', $ML{'.error.noname'})
                unless length($name);

            if ($remoterl) {
                $remoterl = LJ::CleanHTML::canonical_url($remoterl);
                $bogus->('url', $ML{'.error.invalidurl'})
                    if $remoterl !~ m!https?://[^\s\"\'\<\>]+!g;
            }

            if (%ierr) {
                $ret .= $add_school->($country, $state, $city, $name, $remoterl, '');
                return $ret;
            }

            # Undef on error or no results, scalar id on direct match, arrayref on possibles
            my $related = LJ::Schools::find_existing($country, $name, $state, $city, $remoterl);

            if (!$related) {
                return $add_pending->($name, $city, $state, $country, $remoterl);
            } elsif (ref $related ne 'ARRAY') {
                my $rv = LJ::Schools::set_attended($remote, $related);

                return LJ::bad_input(BML::ml('.error.cantsetattendance', {'name' => $name}))
                    unless $rv;

                return BML::redirect("$LJ::SITEROOT/schools/manage.bml?sid=$related");
            } else {
                $ret .= "<?h1 $ML{'.matchesfound.header'} h1?>";
                $ret .= "<?p " . BML::ml('.matchesfound.text', {'aopts' => "href='$LJ::SITEROOT/support/submit.bml?category=schools'"}) . " p?>";

                my $schools = LJ::Schools::load_schools(@$related);

                $ret .= "<form action='index.bml' method='POST'><table><tr><td>&nbsp;</td><th>$ML{'.matchesfound.table.school'}</th><th>$ML{'.matchesfound.table.city'}</th><th>$ML{'.matchesfound.table.url'}</th></tr>";
                foreach my $sid (sort {$schools->{$a}->{name} cmp $schools->{$b}->{name}} keys %$schools) {
                    $ret .= "<tr><td>";
                    $ret .= LJ::html_check(
                                           {
                                               type  => 'radio',
                                               name  => 'sid',
                                               id    => $sid,
                                               value => $sid,
                                           });
                    $ret .= "</td><td><label for='$sid'>";
                    $ret .= LJ::ehtml($schools->{$sid}->{name}) . "</label></td><td>";
                    $ret .= LJ::ehtml($schools->{$sid}->{city}) . "</td><td>";
                    $ret .= LJ::ehtml($schools->{$sid}->{url}) . "</td></tr>";
                }

                $ret .= "<tr bgcolor='<?emcolor?>'><td>";
                $ret .= LJ::html_check(
                                       {
                                           type     => 'radio',
                                           name     => 'sid',
                                           id       => 'new',
                                           value    => 'new',
                                           selected => 1,
                                       });
                $ret .= "</td><td><label for='new'>" . LJ::ehtml($name) . "</label></td><td>";
                $ret .= LJ::ehtml($city) . "</td><td>" . LJ::ehtml($remoterl) . "</td></tr>";

                $ret .= "</table>";

                $ret .= LJ::html_hidden('state', $state, 'countrycode', $country, 'url', $remoterl, 'name', $name, 'city', $city);
                $ret .= LJ::html_submit('choose', $ML{'.btn.chooseschool'});
                $ret .= LJ::form_auth();
                $ret .= "</form>";
            }
            return $ret;

        # They are selecting which related school
        } else {
            return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>" unless LJ::check_form_auth();

            if ($POST{'sid'} eq 'new') {
                return $add_pending->($POST{name}, $POST{city}, $POST{state}, $POST{countrycode}, $POST{url});
            } else {
                my $rv = LJ::Schools::set_attended($remote, $POST{sid});

                return LJ::bad_input(BML::ml('.error.cantsetattendance_limit', {'name' => $POST{name}}))
                    unless $rv;

                return BML::redirect("$LJ::SITEROOT/schools/manage.bml?sid=$POST{sid}");
            }
        }
    }


    ##########################################################################
    # PAGE 1: return the list of countries

    unless ($ctc) {
        # Header text
        $ret .= "<?p $ML{'.intro'}<ul>";
        $ret .= "<li>$ML{'.intro.addschool'}</li>";
        $ret .= "<li>$ML{'.intro.findusers'}</li>";
        $ret .= "<li>" . BML::ml('.intro.manageschools', {'aopts' => "href='$LJ::SITEROOT/schools/manage.bml'"}) . "</li></ul>";
        $ret .= " p?>";

        my $cts = LJ::Schools::get_countries();
        return $err->($ML{'.error.cantgetcountries'})
            unless $cts;
        return $err->($ML{'.error.nocountries'})
            unless %$cts;

        $ret .= "<?h2 $ML{'.top5countries.header'} h2?>";
        $ret .= "<ul>";

        # New API method result
        if (ref $cts->{'US'} eq 'HASH') {
            my $output_line = sub {
                my $ct = shift;
                my $ret;
                $ret .= "<li><a href='$LJ::SITEROOT/schools/?ctc=" . LJ::eurl($ct->{'code'}) . "'>";
                $ret .= LJ::ehtml($ct->{'name'});
                $ret .= "</a> <font size='1'>" . BML::ml('.schoolcount', {'numschools' => $ct->{'count'}});
                $ret .= "</font></li>\n";
                return $ret;
            };

            my @sorted;
            foreach (sort { $cts->{$b}->{'count'} <=> $cts->{$a}->{'count'}} keys %{$cts}) {
                push @sorted, $cts->{$_};
            }

            for (0..4) {
                my $ct = $sorted[$_];
                $ret .= $output_line->($ct);
            }

            $ret .= "</ul><?h2 $ML{'.allcountries.header'} h2?><ul>";

            @sorted = ();
            foreach (sort { $cts->{$a}->{'name'} cmp $cts->{$b}->{'name'}} keys %{$cts}) {
                push @sorted, $cts->{$_};
            }

            foreach my $ct (@sorted) {
                $ret .= $output_line->($ct);
            }

        # Old API method result
        } else {
            my @sorted;
            push @sorted, 'US' if defined $cts->{'US'};
            push @sorted, 'CA' if defined $cts->{'CA'};
            foreach (sort { $cts->{$a} cmp $cts->{$b}} keys %{$cts}) {
                next if $_ eq 'US' || $_ eq 'CA';
                push @sorted, $_;
            }

            foreach my $ct (@sorted) {
                $ret .= "<li><a href='$LJ::SITEROOT/schools/?ctc=" . LJ::eurl($ct) . "'>";
                $ret .= LJ::ehtml($cts->{$ct});
                $ret .= "</li>\n";
            }
        }
        $ret .= "</ul>";

        $ret .= "<div id='addlink'><?p <i>$ML{'.dontseeschool'}</i><br />";
        $ret .= "<a href='$LJ::SITEROOT/schools/?ctc=$ectc&add=1' onclick='return addschool()'>$ML{'.dontseeschool.add'}</a>";
        $ret .= " p?></div>";
        $ret .= $add_school->();

        return $ret;
    }

    # Rest of this flow uses a different crumb
    LJ::set_active_crumb('schoolsfind');


    ##########################################################################
    # PAGE 2: return the list of areas in that country

    unless (defined $sc) {
        $ret .= "<?p $ML{'.intro.dontseeschool3'} p?>" unless $ctc eq 'US';

        my $scs = LJ::Schools::get_states($ctc);
        return $err->($ML{'.error.cantgetdata'})
            unless $scs;
        return $err->($ML{'.error.nostates'})
            unless %$scs;

        my ($country) = LJ::Schools::expand_codes($ctc);

        $ret .= $trail->(1, $country);

        my $sop = $ctc eq 'US' ? $ML{'.state.header'} : $ML{'.stateorprovince.header'};

        $ret .= "<?h1 $sop h1?><?p $ML{'.state.select'} p?>";

        $ret .= "<ul>";
        foreach my $sc (sort { $scs->{$a} cmp $scs->{$b} } keys %{$scs}) {
            my $esc = LJ::eurl($sc);
            my $val = LJ::ehtml($scs->{$sc}) || "<i>$ML{'.error.undefinedstate'}</i>";
            $ret .= "<li><a href='$LJ::SITEROOT/schools/?ctc=$ectc&sc=$esc'>$val</a></li>\n";
        }
        $ret .= "</ul>";

        unless ($ctc eq 'US') {
            $ret .= "<div id='addlink'><?p <i>$ML{'.dontseeschool'}</i><br />";
            $ret .= "<a href='$LJ::SITEROOT/schools/?ctc=$ectc&add=1' onclick='return addschool()'>$ML{'.dontseeschool.add'}</a>";
            $ret .= " p?></div>";
            $ret .= $add_school->($ctc);
        }

        return $ret;
    }

    ##########################################################################
    # PAGE 3: return the list of cities in a state

    unless ($cc) {
        $ret .= "<?p $ML{'.intro.dontseeschool3'} p?>";

        my $ccs = LJ::Schools::get_cities($ctc, $sc);
        return $err->($ML{'.error.cantgetdata'})
            unless $ccs;
        return $err->($ML{'.error.nocities'})
            unless %$ccs;

        my ($country, $state) = LJ::Schools::expand_codes($ctc, $sc);

        $ret .= $trail->(1, $country, $state);

        $ret .= "<?h1 $ML{'.city.header'} h1?><?p $ML{'.city.select'} p?>";

        $ret .= "<ul>";
        foreach my $cc (sort { $ccs->{$a} cmp $ccs->{$b} } keys %{$ccs}) {
            my $esci = LJ::eurl($cc);
            $ret .= "<li><a href='$LJ::SITEROOT/schools/?ctc=$ectc&sc=$esc&cc=$esci'>" . LJ::ehtml($ccs->{$cc}) . "</a></li>\n";
        }
        $ret .= "</ul>";

        $ret .= "<div id='addlink'><?p <i>$ML{'.dontseeschool'}</i><br />";
        $ret .= "<a href='$LJ::SITEROOT/schools/?ctc=$ectc&sc=$esc&add=1' onclick='return addschool()'>$ML{'.dontseeschool.add'}</a>";
        $ret .= " p?></div>";
        $ret .= $add_school->($ctc, $sc);

        return $ret;
    }

    ##########################################################################
    # PAGE 4: return the list of schools in a city

    unless ($sid) {
        $ret .= "<?p $ML{'.intro.dontseeschool3'} p?>";

        my $schools = LJ::Schools::get_schools($ctc, $sc, $cc);
        return $err->($ML{'.error.cantgetdata'})
            unless $schools;
        return $err->($ML{'.error.noschools'})
            unless %$schools;

        my ($country, $state, $city) = LJ::Schools::expand_codes($ctc, $sc, $cc);

        $ret .= $trail->(1, $country, $state, $city);

        $ret .= "<?h1 $ML{'.school.header'} h1?><?p $ML{'.school.select'} p?>";

        $ret .= "<ul>";
        foreach my $sid (sort { $schools->{$a} cmp $schools->{$b} } keys %{$schools}) {
            $ret .= "<li><a href='$LJ::SITEROOT/schools/?ctc=$ctc&sc=$esc&cc=$ecc&sid=$sid'>";
            $ret .= LJ::ehtml($schools->{$sid}) . "</a></li>\n";
        }
        $ret .= "</ul>";

        $ret .= "<div id='addlink'><?p <i>$ML{'.dontseeschool'}</i><br />";
        $ret .= "<a href='$LJ::SITEROOT/schools/?ctc=$ectc&sc=$esc&cc=$ecc&add=1' onclick='return addschool()'>$ML{'.dontseeschool.add'}</a>";
        $ret .= " p?></div>";
        $ret .= $add_school->($ctc, $sc, $cc);

        return $ret;
    }

    ##########################################################################
    # PAGE 5: show who has listed this school in their attendance list

    # Make sure this school id actually exists
    my $school = LJ::Schools::load_schools(($sid));
    return $err->($ML{'.error.cantfindschool'})
        unless $school;

    my $year = $GET{'year'} || 0;
    $year += 1900 if $year =~ /^\d{2}$/;
    return $err->($ML{'.error.invalidyear'})
        if $year && $year !~ /^\d{4}$/;

    $year += 0;
    $year = 0 if $year < 1900;

    my @ids = LJ::Schools::get_attendees($sid, $year);

    # now multi-load and split
    my (@users, @comms);

    if (@ids) {
        my $remotes = LJ::load_userids(@ids);
        foreach my $remoteid (@ids) {
            my $u = $remotes->{$remoteid};

            next unless $u;
            next unless $u->is_visible;
            next unless $u->should_show_in_search_results( for => $remote );
            if ($u->is_personal || $u->is_identity) {
                push @users, $u;
            } elsif ($u->is_comm) {
                push @comms, $u;
            }
        }
        @users = sort { $a->{user} cmp $b->{user} } @users;
        @comms = sort { $a->{user} cmp $b->{user} } @comms;
    }

    my $url = $school->{$sid}->{url};

    # dump the header information
    my ($country, $state, $city, $school) = LJ::Schools::expand_codes($ctc, $sc, $cc, $sid);
    my ($ectc, $esc, $ecc) = (LJ::ehtml($ctc), LJ::ehtml($sc), LJ::ehtml($cc));

    # now display the information
    $ret .= "<table><tr><td>";
    $ret .= "<?h1 $school h1?></td>";
    $ret .= "<td valign='middle'><font size='1'>" . BML::ml('.school.url', {'aopts' => "href='" . LJ::ehtml($url) . "'"}) . "</font></td>"
        if $url;
    $ret .= "</table>";
    $ret .= $trail->(0, $country, $state, $city);

    # Figure out if they attended this school
    if ($remote) {
        # user switcher
        my @list = LJ::get_authas_list($remote);

        $ret .= "<br /><form method='get' action='$LJ::SITEROOT/schools/manage.bml'>\n";
        $ret .= LJ::html_hidden('ctc', $ctc) if $ctc;
        $ret .= LJ::html_hidden('cc', $cc) if $cc;
        $ret .= LJ::html_hidden('sid', $sid) if $sid;

        if (@list > 1) {
            my $userlist = LJ::html_select({ name => 'authas', 'selected' => $remote->{'user'}}, map {$_, $_} @list);
            $ret .= BML::ml('.school.addthisschool', {'user' => $userlist});
        } else {
            $ret .= BML::ml('.school.addthisschool', {'user' => LJ::ljuser($remote)});
        }

        $ret .= ' ' . LJ::html_submit($ML{'.btn.add'});
        $ret .= "<br /><a href='$LJ::SITEROOT/schools/'>$ML{'.school.findanother'}</a>";
        $ret .= "<br /><a href='$LJ::SITEROOT/schools/manage.bml?sid=$esid'>$ML{'.school.manage'}</a>";
        $ret .= "</form>";
    }

    $ret .= "<br /><?h2 $ML{'.school.browsejournals'} h2?>";

    if (@users || @comms) {
        $ret .= "<form action='/schools/' method='get'><?p $ML{'.school.limitbyyear'} ";
        $ret .= LJ::html_text({name => 'year', size => 4, maxlength => 4, value => $year ? $year : ''});
        $ret .= LJ::html_hidden('ctc', $ctc, 'cc', $cc, 'sid', $sid, 'sc', $sc);
        $ret .= LJ::html_submit($ML{'.btn.filter'});
        $ret .= " p?></form>";
    }

    if (!(@users || @comms)) {
        if ($year) {
            $ret .= "<?p " . BML::ml('.school.nousersforthisyear', {'year' => $year}) . " p?>";
        } else {
            $ret .= "<?p $ML{'.school.nousers'} p?>";
        }
    } else {
        if (@comms) {
            $ret .= "<?p <b>$ML{'.school.communities'}</b> p?><ul>";
            foreach my $c (@comms) {
                $ret .= "<li>" . LJ::ljuser($c) . " - " . LJ::ehtml($c->{name}) . "</li>\n";
            }
            $ret .= "</ul>";
        }
        if (@users) {
            $ret .= "<?p <b>$ML{'.school.users'}</b> p?>";

            my $navbar;
            my $self_link = sub {
                my %params = map { ($_, $GET{$_}) } grep { exists $GET{$_} } qw(ctc sc cc sid);
                $params{page} = $_[0];
                return "/schools/?" . join('&', map { LJ::eurl($_) . "=" . LJ::eurl($params{$_}) } keys %params);
            };
            my $results = LJ::user_search_display(
                                                  users      => \@users,
                                                  perpage    => 50,
                                                  curpage    => $GET{'page'} || 1,
                                                  navbar     => \$navbar,
                                                  pickwd     => "_schools$sid",
                                                  self_link  => $self_link,
                                                  );

            $ret .= "<div style='text-align: center'>$navbar</div><br />";
            $ret .= $results;
        }
    }

    return $ret;
}
_code?>
<=body
head<=
<script language='JavaScript'>
    function addschool() {
        if (!document.getElementById) {
            return true;
        }

        var d = document.getElementById('addschool');
        var l = document.getElementById('addlink');
        if (!d || !l) {
            return true;
        }

        d.className = '';
        l.className = 'display_none';
        return false;
    }
</script>
<=head
page?>
