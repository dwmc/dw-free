<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%GET);
    use JSON;

    # if any opts aren't defined, they'll be passed in as empty strings
    my $mode = $GET{mode} eq "save" ? "save" : "load";
    my $header = $GET{header} eq "" ? undef : $GET{header};
    my $expand = $GET{expand} eq "false" ? 0 : 1;

    my $remote = LJ::get_remote();
    return unless $remote;

    if ($mode eq "save") {
        return unless $header && $header =~ /_header$/;
        $header =~ s/_header$//;

        my %is_collapsed = map { $_ => 1 } split(/,/, $remote->prop("profile_collapsed_headers"));

        # this header is already saved as expanded or collapsed, so we don't need to do anything
        return if $is_collapsed{$header} && !$expand;
        return if !$is_collapsed{$header} && $expand;

        # remove header from list if expanding
        # add header to list if collapsing
        if ($expand) {
            delete $is_collapsed{$header};
            $remote->set_prop( profile_collapsed_headers => join(",", keys %is_collapsed) );
        } else { # collapse
            $is_collapsed{$header} = 1;
            $remote->set_prop( profile_collapsed_headers => join(",", keys %is_collapsed) );
        }
    } else { # load
        return JSON::objToJson({ headers => [ split(/,/, $remote->prop("profile_collapsed_headers")) ] });
    }

    return;
}
_code?>
