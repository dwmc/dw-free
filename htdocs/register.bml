<?_info
nocache=>1
_info?><?page

body<=

<?_code

 use strict;
 use vars qw(%POST %GET $title);

 LJ::set_active_crumb('register');

 my $ret;
 my $qs = $POST{qs} || BML::get_query_string();
 $title = $ML{'.title'};

 my $remote = LJ::get_remote();

 return "<?p " . BML::ml('.error.identity_no_email', {'aopts' => "href='$LJ::SITEROOT/changeemail.bml'"}) . " p?>"
     if $remote && $remote->is_identity && !$remote->email_raw;

 my $foruser = $GET{foruser};
 my $foru;
 if ($foruser) {
     $foru = LJ::load_user($foruser);

     return "<?p User does not exist. p?>"
         unless $foru;

     return "<?p You do not have access to send email validation requests to other people. p?>"
         unless (LJ::check_priv($remote, "siteadmin", "users") || LJ::check_priv($remote, "siteadmin", "*"));

     return "<?p That user's email address is already validated. p?>"
         if $foru->is_validated;
 }

 my $show_validate = sub {
    my $user = shift;
    return "<?p " . BML::ml('.ask.body', {'email' => $user->email_raw}) . " p?>" .
           "<form action='register.bml' method='post'>" .
           LJ::html_hidden('authas', $user->{'user'}) .
           "<blockquote>" . LJ::html_submit("action:send", "$ML{'.ask.button'}") .
           "</blockquote></form>";
 };

 if ($POST{'action:send'} || $foru) {
     my $u = $foru ? $foru : LJ::get_authas_user($POST{'authas'});
     return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidauth'} p?>"
         unless $u;

     my $aa = LJ::register_authaction($u->{'userid'}, "validateemail", $u->email_raw);

     LJ::send_mail({
         'to' => $u->email_raw,
         'bcc' => $foru ? $remote->email_raw : undef,
         'from' => $LJ::ADMIN_EMAIL,
         'fromname' => $LJ::SITENAME,
         'charset' => 'utf-8',
         'subject' => $ML{'.email.subject'},
         'body' => BML::ml('.email.body',
                           { 'sitename' => $LJ::SITENAME,
                             'siteroot' => $LJ::SITEROOT,
                             'conflink' => "$LJ::SITEROOT/confirm/$aa->{'aaid'}.$aa->{'authcode'}" }),
     });

     $ret .= "<?h1 $ML{'.sent.header'} h1?><?p " . BML::ml('.sent.body',{'email'=>$u->email_raw}) . " p?>";

 } elsif ($qs =~ /^(\d+)[;\.](.+)$/) {
     my ($aaid, $auth) = ($1, $2);
     my $aa = LJ::is_valid_authaction($aaid, $auth);

     unless ($aa) {
         return "<?h1 $ML{'Error'} h1?><?p " .
             BML::ml('.error.invalidcode', { aopts => "href='$LJ::SITEROOT/register.bml'" }) . " p?>";
     }

     my $u = LJ::load_userid($aa->{'userid'});

     # verify their email hasn't subsequently changed
     unless ($u->email_raw eq $aa->{arg1}) {
         return "<?h1 $ML{'Error'} h1?><?p " .
             BML::ml('.error.emailchanged', { aopts => "href='$LJ::SITEROOT/register.bml'" }) . " p?>";
     }

     ## if the user is OpenID, prove that he is human
     if ($u->{journaltype} eq 'I' && LJ::is_enabled("recaptcha")) {
        require Captcha::reCAPTCHA;
        my $c = Captcha::reCAPTCHA->new;
        if ($POST{recaptcha_response_field}) {
            my $result = $c->check_answer(
                LJ::conf_test($LJ::RECAPTCHA{private_key}), $ENV{'REMOTE_ADDR'},
                $POST{'recaptcha_challenge_field'}, $POST{'recaptcha_response_field'}
            );
            return "<?h1 $ML{'Error'} h1?><?p $result->{error}  p?>" unless $result->{is_valid};
        }
        else {
            my $ret = "<?h1 $ML{'.validate.human.title'} h1?>";
            $ret .= "<form method='POST' action='$LJ::SITEROOT/register.bml'><input type='hidden' name='qs' value='$qs'>";
            $ret .= $c->get_options_setter({ theme => 'white' });
            $ret .= $c->get_html( LJ::conf_test($LJ::RECAPTCHA{public_key}) );
            $ret .= "<input type='submit' value='$ML{'.validate.human.submit'}' ></form>";
            return $ret;
        }
     }

     LJ::update_user($u, { status => 'A' });
     $u->update_email_alias;
     LJ::run_hook('email_verified', $u);

     if ($u->{'status'} eq "T") {
         $ret .= "<?h1 $ML{'.trans.header'} h1?><?p $ML{'.trans.body'} p?>";
     } else {
         $title = BML::ml('.new.title', {'sitename' => $LJ::SITENAMESHORT});
         $ret .= "<div class='columns-2-r300'>\n";
         $ret .= "<?warningbar " . BML::ml('.new.bodyuser', {'user'=>LJ::ljuser($u)}) . " warningbar?>";
         $ret .= "<div class='columns-2-left'>";
         $ret .= "<h2 class='widget-header' style='margin-top: 10px;'>" . BML::ml('.new.101.title', {'sitename' => $LJ::SITENAMESHORT}) . "</h2>";
         $ret .= "<p><strong>$ML{'.new.101.journal.question'}</strong><br />";
         $ret .= "$ML{'.new.101.journal.answer'}</p>";
         $ret .= "<p><strong>$ML{'.new.101.profile.question'}</strong><br />";
         $ret .= "$ML{'.new.101.profile.answer'}</p>";
         $ret .= "<p><strong>$ML{'.new.101.friends.question'}</strong><br />";
         $ret .= "$ML{'.new.101.friends.answer'}</p>";
         $ret .= "<p><strong>$ML{'.new.101.community.question'}</strong><br />";
         $ret .= "$ML{'.new.101.community.answer'}</p>";
         $ret .= "</div>";
         $ret .= "<div class='columns-2-right'>";
         $ret .= LJ::CProd->full_box_for($u, width => 300);
         $ret .= "</div>";
         $ret .= "</div><!-- end .columns-2 -->";
     }

     LJ::run_hook('post_email_change',
                  {
                      user     => $u,
                      newemail => $aa->{arg1},
                      suspend  => 1,
                  });
 } else {
     return "<?needlogin?>"
         unless $remote;

     my $authas = $GET{'authas'} || $remote->{'user'};
     my $u = LJ::get_authas_user($authas);
     return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

     my @authas = LJ::get_authas_list($remote);
     my @list;

     $ret .= "<?h1 $ML{'.ask.header'} h1?>";

     if (@authas > 1) {  # only display if they can auth as anyone other than themselves
         foreach (@authas) {
             my $user = LJ::load_user($_);
             push @list, $_;
             if ($user->{'status'} eq "A") {
                 push @list, $_;
             } else {
                 push @list, BML::ml('.asterisk.name', {'journal' => $_});
             }
         }

         $ret .= "<form method='get' action='register.bml'>\n";
         $ret .= $ML{'.ask.select'} . ": ";
         $ret .= LJ::html_select({ 'name' => 'authas', selected => $GET{'authas'} || $remote->{user} }, @list) . " ";
         $ret .= LJ::html_submit(undef, $ML{'.ask.switch'});
         $ret .= " <span class='helper'>" . $ML{'.asterisk.comment'} . "</span>";
         $ret .= "</form>\n\n";
     }

     if ($u->{'status'} eq "A") {
         $ret .= "<?p " . BML::ml('.error.useralreadyvalidated', {'user' => LJ::ljuser($u)}) . " p?>";
     } else {
         $ret .= $show_validate->($u);
     }
 }

 return $ret;

_code?>

<=body
head=><?_code     LJ::need_res('stc/lj_base.css', 'stc/lj_settings.css'); _code?>
title=><?_code return $title; _code?>
page?><?_c <LJDEP>
link: htdocs/login.bml, htdocs/manage/profile/index.bml
link: htdocs/update.bml
</LJDEP> _c?>
