<?_c
#
# stats/site.bml
#
# New public statistics
#
# Authors:
#      Afuna <coder.dw@afunamatata.com>
#      Pau Amma <pauamma@cpan.org>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself. For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#
_c?><?page
body<=

<?_code
{
    use strict;
    use warnings;
    use vars qw/ $title /;

    use DW::StatStore;
    use DW::StatData;

    LJ::ModuleLoader::autouse_subclasses( 'DW::StatData' );

    LJ::need_res( 'stc/sitestats.css' );
    LJ::set_active_crumb( 'sitestats' );

    $title = BML::ml( '.title', { sitenameshort => $LJ::SITENAMESHORT } );

    # number of accounts (total+by type)
    my $accounts_by_type = DW::StatData::AccountsByType->load_latest( DW::StatStore->get( "accounts" ) );
    my $total; # Used in paid account stats below
    my $ret = "<h2>$ML{'.accounts.title'}</h2>";
 
    if ( defined $accounts_by_type ) {
        $ret .= "<ul>";
        $ret .= "<li>" . $ML{".accounts.bytype.$_"} . " "
                . $accounts_by_type->value( $_ ) . "</li>"
            foreach qw/ total personal identity /;
        $ret .= "</ul>";
        $total = $accounts_by_type->value( 'total' );
    } else {
        $ret .= $ML{'.error.notavailable'};
    }
    
    # number of active accounts (by time since last active)
    my $active_accounts = DW::StatData::ActiveAccounts->load_latest( DW::StatStore->get( "active" ) );
    my ( $active, $active_allpaid ); # Used in paid account stats below
    $ret .= "<h2>$ML{'.active.title'}</h2><p>$ML{'.active.desc'}</p>";
 
    if ( defined $active_accounts ) {
        $ret .= "<ul>";
        $ret .= "<li>" . $ML{".active.bytime.$_"} . " "
                . $active_accounts->value( $_ ) . "</li>"
            foreach qw/ active_1d active_7d active_30d /;
        $ret .= "</ul>";
        $active = $active_accounts->value( 'active_30d' );
        $active_allpaid = $active_accounts->value( 'active_30d-paid' )
                          + $active_accounts->value( 'active_30d-premium' )
                          + $active_accounts->value( 'active_30d-seed' );
    } else {
        $ret .= $ML{'.error.notavailable'};
    }
 
    # Paid accounts (by level), with % of total and active
    my $paid = DW::StatData::PaidAccounts->load_latest( DW::StatStore->get( "paid" ) );
    $ret .= "<h2>$ML{'.paid.title'}</h2>";
 
    if ( defined $paid ) {
        $ret .= "<table class='stats-matrix'><tr>";
        $ret .= "<th>" . $ML{".paid.colhdr.$_"} . "</th>"
            foreach qw/ level number pct_total pct_active /;
        $ret .= "</tr>\n";
        foreach my $level ( qw( paid premium seed ) ) {
            $ret .= "<tr><th>" . $ML{".paid.rowhdr.$level"} . "</th>";
            my $n = $paid->value( $level ) || 0;
            $ret .= "<td class='stats'>$n</td>";
            $ret .= "<td class='stats'>"
                    . ( defined $total ? int( 100 * $n / $total ) : "" )
                    . "</td>";
            $ret .= "<td class='stats'>"
                    . ( defined $active ? int( 100 * $n / $active ) : "" )
                    . "</td></tr>\n";
        }
        $ret .= "<tr><th>$ML{'.paid.rowhdr.activepaid'}</th><td class='stats'>";
        $ret .= $active_allpaid
            if defined $active_allpaid;
        $ret .= "</td></tr><tr><th>$ML{'.paid.rowhdr.inactivepaid'}</th><td class='stats'>";
        $ret .= $paid->value( 'total' ) - $active_allpaid
            if defined $active_allpaid;
        $ret .= "</td></tr></table>";
    } else {
        $ret .= $ML{'.error.notavailable'};
    }
    
    return $ret;
}
_code?>

<=body
title=><?_code return $title; _code?>
page?>
