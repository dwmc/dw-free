layerinfo "type"            = "layout";
layerinfo "name"            = "Refried Paper";
layerinfo "redist_uniq"     = "refriedpaper/layout";
layerinfo "previews"        = "refriedpaper/layout.jpg";
layerinfo "des"             = "A clean style with a sidebar.";

propgroup presentation {
  property string content_width {
    des = "Content area width";
    note = "Don't forget to include units; e.g. px, %";
  }
  property string content_alignment {
    des = "Alignment of the content area";
    values = "left|Left|center|Center|right|Right";
  }
  property string content_top_margin {
    des = "Margin size on the top of the content area";
    note = "You can use this to shift your journal contents down in order to display a background image at the top of your journal.  Don't forget to include units; e.g. px, %";
  }
  property string entryborder_size {
    des = "Size of borders around entries";
    note = "Don't forget to include the units, e.g. px";
  }
  property string entryborder_style {
    des = "Style of borders around entries";
    values = "solid|Solid|dashed|Dashed|dotted|Dotted|double|Double|hidden|Invisible";
  }
  property bool transparent {
    des = "Make journal content transparent instead of using given background colors";
  }
  property string sidebar_position {
    des = "Side of the journal that the sidebar appears on";
    values = "left|Left|right|Right";
  }
  property bool reverse_entries_recent {
    des = "Reverse entries on recent entries page";
  }
  property bool reverse_entries_day {
    des = "Reverse entries on day pages";
  }
  property bool show_calendar {
    des = "Show calendar in sidebar";
  }
  property bool show_free_text {
    des = "Show free text in sidebar";
  }
  property bool show_summary {
    des = "Show summary in sidebar";
  }
  property use page_recent_items;
  property use page_friends_items;
  property use view_entry_disabled;
  property use use_shared_pic;
  property use linklist_support;
  property use external_stylesheet;
  property use tags_aware;
  property string counter_code {
    des = "If you have an external web counter, you can enter the HTML for it here";
    note = "Your counter will appear under the navigation links in your journal.";
    maxlength = 2000;
    string_mode = "html-oneline";
  }
  property use custom_control_strip_colors;

  set content_width          = "100%";
  set content_alignment      = "center";
  set content_top_margin     = "0";
  set entryborder_size       = "";
  set entryborder_style      = "hidden";
  set transparent            = false;
  set sidebar_position       = "right";
  set reverse_entries_recent = false;
  set reverse_entries_day    = false;
  set show_calendar          = true;
  set show_free_text         = true;
  set show_summary           = false;
  set view_entry_disabled    = false;
  set linklist_support       = true;
  set external_stylesheet    = true;
  set tags_aware             = true;
  set counter_code           = "";
}

propgroup colors {
  property Color page_bgcolor {
    des = "Page background color";
  }
  property Color page_fgcolor {
    des = "Page text color";
  }
  property Color page_link {
    des = "Link color";
  }
  property Color page_alink {
    des = "Active link color";
  }
  property Color page_hlink {
    des = "Hover link color";
  }
  property Color page_vlink {
    des = "Visited link color";
  }
  property Color border_color {
    des = "Border color";
  }
  property Color border_color_entries {
    des = "Border color for entries";
    note = "If you don't set a border size and style in the \"Presentation\" section, this won't have any effect.";
  }
  property Color top_bar {
    des = "Top bar color";
  }
  property Color title_bgcolor {
    des = "Header background color";
  }
  property Color title_fgcolor {
    des = "Header title color";
  }
  property Color descrip_fgcolor {
    des = "Header subtitle color";
  }
  property Color date_fgcolor {
    des = "Entry and comment details color";
  }
  property Color subhead_bgcolor {
    des = "Sidebar header background color";
  }
  property Color subhead_fgcolor {
    des = "Sidebar header text color";
  }
  property Color subhead_bottom {
    des = "Page's right border color";
  }
  property Color bottom_bar {
    des = "Bottom bar color";
  }
  property Color comment_screened_bgcolor {
    des = "Background color for screened comments";
  }
  property Color comment_screened_fgcolor {
    des = "Text color for screened comments";
  }
  property use control_strip_bgcolor;
  property use control_strip_fgcolor;
  property use control_strip_bordercolor;
  property use control_strip_linkcolor;

  set page_bgcolor             = "#ffffff";
  set page_fgcolor             = "#666666";
  set page_link                = "#cc6633";
  set page_alink               = "#ff9966";
  set page_hlink               = "#ff9966";
  set page_vlink               = "#cc6633";
  set border_color             = "#000000";
  set border_color_entries     = "#000000";
  set top_bar                  = "#666666";
  set title_bgcolor            = "#cccc99";
  set title_fgcolor            = "#666666";
  set descrip_fgcolor          = "#999966";
  set date_fgcolor             = "#336699";
  set subhead_bgcolor          = "#cccccc";
  set subhead_fgcolor          = "#333333";
  set subhead_bottom           = "#aaaaaa";
  set bottom_bar               = "#999999";
  set comment_screened_bgcolor = "#cccccc";
  set comment_screened_fgcolor = "#333333";
}

propgroup fonts {
  property use font_base;
  property use font_fallback;
  property string sec_font_base {
    des = "Second preferred font";
    maxlength = 25;
    size = 10;
    note = "Leave blank if you don't care.";
  }
  property string sec_font_fallback {
    des    = "Second alternative font style";
    values = "sans-serif|Sans-serif|serif|Serif|cursive|Cursive|monospace|Monospaced|none|Use browser's default";
    note   = "This general style will serve as a fallback if your preferred font is unavailable.";
  }

  set font_base         = "Verdana";
  set font_fallback     = "sans-serif";
  set sec_font_base     = "Georgia";
  set sec_font_fallback = "serif";
}

propgroup images {
  property string page_background_image {
    des = "Background image URL";
  }
  property string page_background_repeat {
    des = "Background image repeat";
    values = "repeat|Repeat|no-repeat|Don't repeat|repeat-x|Repeat across only|repeat-y|Repeat down only";
  }
  property string page_background_position {
    des = "Background image position";
    note = "Does not apply if Background Image Repeat is set to 'Repeat'.";
    values = "top|Top|top left|Top-left|top right|Top-right|center|Center|center left|Center-left|center right|Center-right|bottom|Bottom|bottom left|Bottom-left|bottom right|Bottom-right|left|Left|right|Right";
  }
  property string page_background_scrolling {
    des = "Background image scrolling";
    note = "Not supported in all browsers, but allows for the background image to be in a fixed position when scrolling.";
    values = "scroll|Scroll|fixed|Fixed";
  }
  property string img_btwn_comments {
    des = "URL to an image to be used between your comment links";
    note = "If you specify an image to use, it will replace any text between the comment links.";
  }

  set page_background_image = "";
  set page_background_repeat = "repeat";
  set page_background_position = "center";
  set page_background_scrolling = "scroll";
  set img_btwn_comments = "";
}

propgroup text {
  property string text_sidebar_navigation {
    des = "Title for navigation box";
  }
  property string text_sidebar_links {
    des = "Title for links box";
  }
  property string text_sidebar_skiplinks {
    des = "Title for skip links box";
  }
  property string text_sidebar_freetext {
    des = "Title for free text box";
  }
  property string text_sidebar_summary {
    des = "Title for summary box";
  }
  property string text_sidebar_selectyear {
    des = "Title for select year box on archive page";
  }
  property use text_view_recent;
  property use text_view_friends;
  property use text_view_friends_comm;
  property use text_view_archive;
  property use text_view_userinfo;
  property use text_website_default_name;
  property use text_skiplinks_back;
  property use text_skiplinks_forward;
  property use text_entry_prev;
  property use text_entry_next;
  property string text_user {
    des = "Text for user label on entries and comments";
  }
  property string text_date {
    des = "Text for date label on entries and comments";
  }
  property string text_subject {
    des = "Text for subject label on entries and comments";
  }
  property string text_security {
    des = "Text for security label on entries";
  }
  property use text_post_comment;
  property use text_read_comments;
  property use text_post_comment_friends;
  property use text_read_comments_friends;
  property use text_comment_frozen;
  property use text_comment_reply;
  property use text_comment_parent;
  property use text_comment_thread;
  property use text_comment_expand;
  property string text_left_comments {
    des = "Text to be used in front of your entry and comment links";
  }
  property string text_comment_divider {
    des = "Text to be used between your entry and comment links";
    note = "If you specified an image to be used between your comments links in the \"Images\" section, then this option will not have any effect.";
  }
  property string text_right_comments {
    des = "Text to be used at the end of your entry and comment links";
  }
  property use text_meta_location;
  property use text_meta_music;
  property use text_meta_mood;
  property use text_meta_groups;
  property use text_tags;
  property string text_meta_picword {
    des = "Text to label a userpic's keyword";
  }
  property use text_edit_entry;
  property use text_edit_tags;
  property use text_mem_add;
  property use text_tell_friend;
  property use text_flag;
  property use text_permalink;
  property string free_text {
    des = "Free text";
    rows = 10;
    cols = 25;
    string_mode = "html";
  }
  property string text_tagspage_header {
    des = "Title of the tags page";
  }
  property string datetime_format {
    des = "Date and time format for entries and comments";
  }
  property string date_daypage_skip_format {
    des = "Date format for the skip links on the day page";
  }

  set text_sidebar_navigation    = "my journal";
  set text_sidebar_links         = "links";
  set text_sidebar_skiplinks     = "browse";
  set text_sidebar_freetext      = "free text";
  set text_sidebar_summary       = "summary";
  set text_sidebar_selectyear    = "select year";
  set text_view_recent           = "my journal";
  set text_view_friends          = "my friends";
  set text_view_friends_comm     = "my members";
  set text_view_archive          = "my calendar";
  set text_view_userinfo         = "my userinfo";
  set text_user                  = "User:";
  set text_date                  = "Date:";
  set text_subject               = "Subject:";
  set text_security              = "Security:";
  set text_post_comment          = "Post A Comment";
  set text_read_comments         = "# Comment // # Comments";
  set text_post_comment_friends  = "Post A Comment";
  set text_read_comments_friends = "# Comment // # Comments";
  set text_left_comments         = "";
  set text_comment_divider       = " | ";
  set text_right_comments        = "";
  set text_meta_location         = "Location:";
  set text_meta_mood             = "Mood:";
  set text_meta_music            = "Music:";
  set text_meta_groups           = "Groups:";
  set text_tags                  = "Tags:";
  set text_meta_picword          = "Keyword:";
  set text_skiplinks_back        = "back # entries";
  set text_skiplinks_forward     = "forward # entries";
  set text_edit_entry            = "Edit";
  set text_edit_tags             = "Tag";
  set free_text                  = "";
  set text_tagspage_header       = "Visible Tags";
  set datetime_format            = "%%yyyy%%-%%mm%%-%%dd%% %%HH%%:%%min%%";
  set date_daypage_skip_format   = "%%month%% %%dayord%%, %%yyyy%%";

}

propgroup customcss {
  property use include_default_stylesheet;
  property use linked_stylesheet;
  property use custom_css;
}

function prop_init () {
    if ($*control_strip_bgcolor.as_string == "") {
        $*control_strip_bgcolor = $*page_bgcolor;
    }
    if ($*control_strip_fgcolor.as_string == "") {
        $*control_strip_fgcolor = $*page_fgcolor;
    }
    if ($*control_strip_bordercolor.as_string == "") {
        $*control_strip_bordercolor = $*border_color;
    }
    if ($*control_strip_linkcolor.as_string == "") {
        $*control_strip_linkcolor = $*page_link;
    }

    $*theme_bgcolor = $*page_bgcolor;
    $*theme_fgcolor = $*page_fgcolor;
    $*theme_bordercolor = $*border_color;
    $*theme_linkcolor = $*page_link;
}

function make_fontspec(string font_base, string font_fallback) : string {
  var string fontspec;
  if ($font_base != "") {
    $fontspec = $font_base->css_string();
    if ($font_fallback != "none") {
      $fontspec = $fontspec + ", ";
    }
  }
  if ($font_fallback != "") {
    $fontspec = $fontspec + $font_fallback->css_string();
  }
  if($fontspec != "") {
    $fontspec = "font-family: $fontspec;";
  }
  return $fontspec;
}

function print_stylesheet() {
var string fontspec     = make_fontspec($*font_base,     $*font_fallback);
var string sec_fontspec = make_fontspec($*sec_font_base, $*sec_font_fallback);
"""
body {
  background: $*page_bgcolor none;
  color:      $*page_fgcolor;
  margin:     0;
  padding:    0;
""";
if (clean_url($*page_background_image) != "") {
"""  background-image: url("$*page_background_image");
     background-position: $*page_background_position;
     background-repeat: $*page_background_repeat;
     background-attachment: $*page_background_scrolling;
""";
}
"""}

a {
  text-decoration: none;
}

a:link {
  color:           $*page_link;
}

a:visited {
  color:           $*page_vlink;
}

a:active {
  color: $*page_alink;
}

a:hover {
  color: $*page_hlink;
}

#content {
  background-color: $*page_bgcolor;
  color: $*page_fgcolor;
}

.entry {
  border: $*entryborder_size $*entryborder_style $*border_color_entries;
}

td.body {
  padding: 20px;
}

td.title {
  color:          $*title_fgcolor;
  font-size:      16px;
  font-weight:    700;
  letter-spacing: .1em;
  padding:        20px;
$fontspec
}

td.links {
  font-size:   10px;
  line-height: 16px;
  padding:     8px;
$fontspec
}

.descrip {
  color:          $*descrip_fgcolor;
  font-size:      10px;
  font-weight:    700;
  letter-spacing: .2em;
  padding:        5px;
  text-transform: uppercase;
$fontspec
}

.date, .dateheader, .datecontent {
  color:       $*date_fgcolor;
  font-size:   12px;
  line-height: 16px;
$sec_fontspec
}

A.subjlink, A.subjlink:hover, A.subjlink:visited {
   color:       $*date_fgcolor;
   text-decoration: none;
}

.dateheader {
  font-weight: bold;
}

.subhead {
  color:          $*subhead_fgcolor;
  font-size:      11px;
  font-weight:    700;
  letter-spacing: .1em;
  padding:        8px;
$fontspec
}

br, hr, li, ol, p, table, td, tr, ul {
  color:       $*page_fgcolor;
  font-size:   12px;
  line-height: 18px;
  text-align:  justify;
$sec_fontspec
}

p.links {
  color:       #666666;
  font-size:   10px;
  line-height: 12px;
$fontspec
}

.author, .time {
  color:          #336699;
  font-size:      10px;
  line-height:    16px;
  text-transform: uppercase;
$fontspec
}

#commenttext {
  width: 90%;
}
""";
if ($*transparent) {
"""
#content, td  {
    background: transparent !important;
}
""";
}

print_custom_control_strip_css();
}

function print_sidebar_box(string header, string content) {
if($header != "") {
  print safe """
        <tr>
          <td bgcolor="$*subhead_bgcolor"><span class="subhead">$header</span></td>
        </tr>
        <tr>
          <td bgcolor="$*border_color"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>
        </tr>
  """;
}
print safe """
        <tr>
          <td class="links">
            $content
          </td>
    </tr>
    <tr>
      <td bgcolor="$*border_color"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>
    </tr>
""";
}

function num_comments_in_thread (Comment[] comments)  : int {
  var int total = 0;
  foreach var Comment c ($comments) {
    $total = $total + 1;
    if (size $c.replies > 0) {
      $total = $total + num_comments_in_thread($c.replies);
    }
  }
  return $total;
}

function EntryLite::lay_make_id() : string {
  var string id = "";
  if($this isa Comment) {
    var Comment c = $this as Comment;
    $id = "t$c.talkid";
  }
  if($this isa Entry) {
    var Entry e = $this as Entry;
    $id = "$e.journal.username$e.itemid";
  }
  return $id;
}

function EntryLite::lay_make_icon() : string {
  var string icon = "";
  if($this isa Comment) {
    var Comment c = $this as Comment;
    if(defined $c.subject_icon) {
      $icon = $c.subject_icon + " ";
    }
  }
  if($this isa Entry) {
    var Entry en = $this as Entry;
    if(defined $en.security_icon) {
      $icon = $en.security_icon + " ";
    }
  }
  return $icon;
}

function EntryLite::lay_make_userpic() : string {
  var Page   p            = get_page();
  var string alttext      = "";
  var string poster_name  = "";
  var string journal_name = "";
  var string userpic      = "";
  if($.poster.username != "") {
    $poster_name = $.poster.name;
  } else {
    $poster_name = $*text_poster_anonymous;
  }
  $alttext = $poster_name;
  if((not $.poster->equals($.journal)) and ($.depth == 0)) {
    $journal_name = $.journal.name;
    $alttext      = $alttext + " posting in $journal_name";
  }
  if($.metadata{"picture_keyword"} != "") {
    $alttext = $alttext + ": " + $.metadata{"picture_keyword"};
  }
  if(defined $.userpic) {
    $userpic = """<img src="$.userpic.url" width="$.userpic.width" height="$.userpic.height" alt="$alttext" title="$alttext" />""";
  }

  return $userpic;
}

function EntryLite::lay_entry_nav() : string {
  var Page   p       = get_page();
  var string poster  = $.poster.username != "" ? $.poster + "" : """<i class="noposter">$*text_poster_anonymous</i>""";
  var string journal = $.journal + " ::";
  var string icon    = "";
  var string subject = striphtml($.subject);
  var string url     = "";
  var string count   = "";

  if($this isa Comment) {
    var Comment c = $this as Comment;
    $journal      = "";
    if(size ($c.replies) > 0) {
      $count = num_comments_in_thread($c.replies) + "";
    }
  }
  if($this isa Entry) {
    var Entry en = $this as Entry;
    if($.poster->equals($.journal)) {
      $journal = "";
    }
    if($p.view == "recent" and $.journal.journal_type != "C") {
      $poster = "";
    }
    if($en.comments.count > 0 or $en.comments.screened) {
      $count = $en.comments.count + "";
    }
  }
  if($subject == "") {
    $subject = """<i class="nosubject">$*text_nosubject</i>""";
  }
  $icon    = $this->lay_make_icon();
  $url     = "#" + $url + $this->lay_make_id();
  $subject = """<a href="$url">$subject</a>""";
  if($count != "") {
    $count = """ [<a href="$.permalink_url">+$count</a>]""";
  }
  return """<div style="white-space: nowrap;">$journal$poster $icon$subject$count</div>""";
}

function EntryLite::lay_print_metadata() {
  var string   metadata = "";
  var string   icon     = "";
  var string   val      = "";
  var string   tags     = "";
  var string   text     = "";
  var string{} texts    = {
                           "location"        => $*text_meta_location,
                           "mood"            => $*text_meta_mood,
                           "music"           => $*text_meta_music,
                           "groups"          => $*text_meta_groups,
                           "picture_keyword" => $*text_meta_picword,
                           "poster_ip"       => $*text_comment_ipaddr,
                          };
  var string screenedfg = "";

  if ($this isa Comment) {
    var Comment c = $this as Comment;
    if ($c.screened) {
      $screenedfg = " style=\"color: $*comment_screened_fgcolor;\"";
    }
  }

  if($this isa Entry) {
    var Entry en = $this as Entry;
    if(defined $en.mood_icon) {
      var Image  i   = $en.mood_icon;
      var string alt = $.metadata{"mood"};
      $icon = """<img src="$i.url" width="$i.width" height="$i.height" alt="$alt" title="$alt" /> """;
    }
    if(size($en.tags) > 0 and $*tags_aware) {
      var int count = 0;
      foreach var Tag t ($en.tags) {
        var string url  = $t.url;
        var string text = $t.name;
        $tags = $tags + """<a href="$url">$text</a>""";
        $count++;
        if($count < size($en.tags)) {
          $tags = $tags + ", ";
        }
      }
      if($tags != "") {
        $tags = """<tr><td class="dateheader">$*text_tags</td><td class="datecontent">$tags</td></tr>\n""";
      }
    }
  }

  foreach var string k ($.metadata) {
    $val  = $.metadata{$k};
    $text = $texts{$k} != "" ? $texts{$k} : $k;
    if($val != "") {
      if($k == "mood") {
        $val = "$icon$val";
      }
      $metadata = $metadata + """<tr><td class="dateheader"$screenedfg>$text</td><td class="datecontent"$screenedfg>$val</td></tr>\n""";
    }
  }
  $metadata = $metadata + $tags;
  print safe $metadata;
}

function EntryLite::print_linkbar() {
  var Page   p       = get_page();
  var string linkbar = "$*text_left_comments";

  var string url  = "";
  var string text = "";

  var string{} texts = {
    "edit_entry" => $*text_edit_entry,
    "edit_tags"  => $*text_edit_tags,
    "mem_add"    => $*text_mem_add,
    "tell_friend"=> $*text_tell_friend,
    "flag"       => $*text_flag,
  };

  var string btwn_comments = "";
  if (clean_url($*img_btwn_comments) != "") {
    $btwn_comments = """ <img src="$*img_btwn_comments" alt="" /> """;
  } else {
    $btwn_comments = "$*text_comment_divider";
  }

  if($this isa Comment) {
    var Comment c      = $this as Comment;
    var string  reply  = "";
    var string  parent = "";
    var string  thread = "";
    var string expand = "";
    if($c.frozen) {
      $reply = "$*text_comment_frozen$btwn_comments";
    } else {
      $url   = $c.reply_url;
      $text  = $*text_comment_reply;
      $reply = """<a href="$url">$text</a>$btwn_comments""";
    }
    if($c.parent_url != "") {
      $url    = $c.parent_url;
      $text   = $*text_comment_parent;
      $parent = """<a href="$url">$text</a>$btwn_comments""";
    }
    if($c.thread_url != "") {
      $url    = $c.thread_url;
      $text   = $*text_comment_thread;
      $thread = """<a href="$url">$text</a>$btwn_comments""";
      var Link expand_link = $c->get_link("expand_comments");
      if (defined $expand_link) {
        $expand = $c->expand_link() + $btwn_comments;
      }
    }
    ###$c->print_reply_link({"linktext" => "$*text_comment_reply"}); 

        if($c.screened == true) {
            ### if comment screened - show link for unscreen
            var Link link;
            $link = $c->get_link("unscreen_to_reply");
            """<a href="$link.url" title="$link.caption">$link.caption</a>""";
        } else {
            ### showing reply link if comment not screened
            $c->print_reply_link({ "linktext" => $*text_comment_reply });
        }

    
    print " | ";
    $linkbar = $linkbar + $parent + $thread + $expand;
  }
  if($this isa Entry) {
    var Entry en = $this as Entry;
    if ($en.comments.enabled) {
      if ($en.comments.count > 0 or $en.comments.screened) {
        $url  = $en.comments.read_url;
        $text = get_plural_phrase($en.comments.count, ("text_read_comments" + ($p.view == "friends" ? "_friends" : "")));
        $linkbar = $linkbar + """<a href="$url">$text""";
        if($en.comments.screened) {
          $text    = $*text_month_screened_comments;
          $linkbar = $linkbar + """ $text""";
        }
        $linkbar = $linkbar + """</a>$btwn_comments""";
      }

      if ($en.comments.maxcomments) {
        $linkbar = $linkbar + "$*text_max_comments$btwn_comments";
      } else {
        if ($p.view == "entry") {
            $p->print_reply_link({"target" => "topcomment", "linktext" => "$*text_post_comment"}); print " | ";
        } else {
            $url  = $en.comments.post_url;
            $text = get_plural_phrase(0, ("text_post_comment" + ($p.view == "friends" ? "_friends" : "")));
            $linkbar = $linkbar + """<a href="$url">$text</a>$btwn_comments""";
        }
      }
    }
  }
  foreach var string link_key ($.link_keyseq) {
    var Link link = $this->get_link($link_key);
    $url          = $link.url;
    $text         = $texts{$link_key} != "" ? $texts{$link_key} : $link.caption;
    if($url != "") {
      $linkbar = $linkbar + """<a href="$url">$text</a>$btwn_comments""";
    }
  }
  $url     = $.permalink_url;
  $text    = $*text_permalink;
  $linkbar = $linkbar + """<a href="$url">$text</a>""" + $*text_right_comments;
  print $linkbar;
}

function Page::lay_print_skiplinks() {
  var string prev_url  = "";
  var string prev_text = "";
  var string next_url  = "";
  var string next_text = "";
  var string skiplinks = "";

  if($this isa RecentPage) {
    var RecentPage rp = $this as RecentPage;
    var RecentNav  rn = $rp.nav;
    if($rn.backward_url != "") {
      $prev_url  = $rn.backward_url;
      $prev_text = get_plural_phrase($rn.backward_count, "text_skiplinks_back");
    }
    if($rn.forward_url != "") {
      $next_url  = $rn.forward_url;
      $next_text = get_plural_phrase($rn.forward_count, "text_skiplinks_forward");
    }
  }

  if($this isa MonthPage) {
    var MonthPage mp = $this as MonthPage;
    if($mp.prev_url != "") {
      $prev_url  = $mp.prev_url;
      $prev_text = $mp.prev_date->date_format($*lang_fmt_month_long);
    }
    if($mp.next_url != "") {
      $next_url  = $mp.next_url;
      $next_text = $mp.next_date->date_format($*lang_fmt_month_long);
    }
  }

  if($this isa DayPage) {
    var DayPage dp = $this as DayPage;
    if($dp.prev_url != "") {
      $prev_url  = $dp.prev_url;
      $prev_text = $dp.prev_date->date_format($*date_daypage_skip_format);
    }
    if($dp.next_url != "") {
      $next_url  = $dp.next_url;
      $next_text = $dp.next_date->date_format($*date_daypage_skip_format);
    }
  }

  if($this isa EntryPage or $this isa ReplyPage) {
    var Entry e;
    if($this isa EntryPage) {
      var EntryPage ep = $this as EntryPage;
      $e               = $ep.entry;
    }
    if($this isa ReplyPage) {
      var ReplyPage rp = $this as ReplyPage;
      $e               = $rp.entry;
    }
    var Link      pl = $e->get_link("nav_prev");
    var Link      nl = $e->get_link("nav_next");
    $prev_url        = $pl.url;
    $prev_text       = $*text_entry_prev;
    $next_url        = $nl.url;
    $next_text       = $*text_entry_next;
  }

  if($prev_url != "") {
    $skiplinks = $skiplinks + """<a href="$prev_url">$prev_text</a>""";
  }
  if($prev_url != "" and $next_url != "") {
    $skiplinks = $skiplinks + "<br />";
  }
  if($next_url != "") {
    $skiplinks = $skiplinks + """<a href="$next_url">$next_text</a>""";
  }

  if ($skiplinks != "") {
    print_sidebar_box($*text_sidebar_skiplinks, $skiplinks);
  }
}

function Page::lay_sidebar_view_summary() : string {
  var string      return  = "";
  var EntryLite[] entries = [];
  var string      url     = "";
  var string      text    = "";
  if($this isa RecentPage) {
    var RecentPage rp = $this as RecentPage;
    $entries = $rp.entries;
  }
  if($this isa YearPage) {
    var YearPage yp = $this as YearPage;
    foreach var YearMonth m ($yp.months) {
      if($m.has_entries) {
        $url    = "#month$m.month";
        $text   = $m->month_format();
        $return = $return + """<a href="$url">$text</a><br />""";
      }
    }
  }
  if($this isa MonthPage) {
    var MonthPage mp = $this as MonthPage;
    foreach var MonthDay d ($mp.days) {
      if($d.has_entries) {
        $url    = "#day$d.day";
        $text   = $d.date->date_format($*date_daypage_skip_format);
        $return = $return + """<a href="$url">$text</a><br />""";
      }
    }
  }
  if($this isa DayPage) {
    var DayPage dp = $this as DayPage;
    $entries = $dp.entries;
  }
  if($this isa EntryPage) {
    var EntryPage ep = $this as EntryPage;
    $entries = $ep.comments;
  }
  if(size ($entries) > 0) {
    foreach var EntryLite e ($entries) {
      $return = $return + $e->lay_entry_nav();
    }
  }
  return $return;
}

function Page::lay_print_navigation() {
  var string   nav         = "";
  var string   url         = "";
  var string   text        = "";
  var string[] views_order = ["recent", "friends", "archive", "userinfo"];

  foreach var string v ($views_order) {
    $url  = $.view_url{$v};
    $text = lang_viewname($v);
    $nav  = $nav + """<a href="$url">$text</a><br />\n""";
  }
  if($.journal.website_url != ""){
    $url  = $.journal.website_url;
    $text = $.journal.website_name != "" ? $.journal.website_name : $*text_website_default_name;
    $nav  = $nav + """<a href="$url">$text</a><br />\n""";
  }

  if ($*counter_code != "") {
    $nav = $nav + "<br />$*counter_code";
  }

  if($nav != "") {
    print_sidebar_box($*text_sidebar_navigation, $nav);
  }
}

function Page::print_linklist() {
  var Page p = get_page();
  var string return = "";
  if (size $p.linklist <= 0) {
    return;
  } elseif (not $*linklist_support) {
    return;
  }

  var bool section_open = false;

  foreach var UserLink l ($p.linklist) {
    if ($l.title) {
      if ($l.is_heading) {
        if ($section_open) {
          $return = $return + "<br />";
        }
        $return = $return + """<span style="font-weight: bold;">$l.title</span><br />""";
        $section_open = true;
      } else {
        $return = $return + """<a href="$l.url">$l.title</a><br />""";
      }
    }
  }
  print_sidebar_box($*text_sidebar_links, $return);
}

function print_sidebar_calendar() "how to print the calendar for the sidebar" {
  var string calendar;
  var Page p = get_page();
  var YearMonth m = $p->get_latest_month();
  var string month = "<span style='white-space:nowrap;'><a href='" + $p.journal->base_url() + "/$m.year/" + $m->month_format("%%mm%%") +"/'>" + $m->month_format("%%month%%") + "</a> " + "<a href='" + $p.journal->base_url() + "/$m.year/'>" + $m->month_format("%%yyyy%%") + "</a>" + "</span>";
  if($m.has_entries) {
    $calendar = """<table class="calendar">""";
    var YearWeek[] theWeeks = $m.weeks;
    foreach var YearWeek w ($theWeeks) {
      $calendar = $calendar + "<tr>";
      var YearDay[] theDays = $w.days;
      var int pre = $w.pre_empty;
      if($pre > 0) {
        $calendar = $calendar + """<td colspan="$pre" valign="top">&nbsp;</td>""";
      }
      foreach var YearDay d ($theDays) {
        if ($d.num_entries) {
          $calendar = $calendar + """<td valign="top" class="day_with_posts"><a href="$d.url">$d.day</a></td>""";
        } else {
          $calendar = $calendar + """<td valign="top" class="day">$d.day</td>""";
        }
      }
      $calendar = $calendar + "</tr>\n";
    }
    $calendar = $calendar + "</table>";
  }
  if ($calendar != "") {
    print_sidebar_box($month, $calendar);
  }
}

function print_sidebar_linklist() {
  var Page p = get_page();
  $p->print_linklist();
}

function print_sidebar_navigation() "print the navigation box for the sidebar that corresponds to each page type" {
  var Page p = get_page();
  $p->lay_print_navigation();
}

function print_sidebar_skiplinks() {
  var Page p = get_page();
  if ($p isa YearPage) {
    var YearPage yp = $p as YearPage;
    $yp->print_year_links();
  } else {
    $p->lay_print_skiplinks();
  }
}

function print_sidebar_userpic() {
  var Page p = get_page();
  var string userpic = "";
  if(defined $p.journal.default_pic) {
    var Image i = $p.journal.default_pic;
    var string alttext = $p.journal.name;
    $userpic = """<div align="center"><a href="$p.journal.userpic_listing_url"><img src="$i.url" width="$i.width" height="$i.height" alt="$alttext" title="$alttext" border="0" /></a></div>""";
  }
  if($userpic != "") {
    print_sidebar_box("", $userpic);
  }
}

function print_sidebar_summary() {
  var Page   p       = get_page();
  var string content = "";

  $content  = $p->lay_sidebar_view_summary();

  if($content != ""){
    print_sidebar_box($*text_sidebar_summary, $content);
  }
}

function print_free_text() {
  if($*free_text != ""){
    print_sidebar_box($*text_sidebar_freetext, $*free_text);
  }
}

function print_sidebar() {

  # SKIP LINKS
  print_sidebar_skiplinks();

  # NAVIGATION
  print_sidebar_navigation();

  # LINKLIST
  print_sidebar_linklist();

  # CALENDAR
  if($*show_calendar){
    print_sidebar_calendar();
  }

  # FREE TEXT
  if($*show_free_text){
    print_free_text();
  }

  # SUMMARY
  if($*show_summary){
    print_sidebar_summary();
  }

  # USERPIC
  print_sidebar_userpic();
}

function make_poster(EntryLite e) : string {
  var Page   p      = get_page();
  var string return = "";

  var string poster = "";
  var string user   = "";
  var string screenedfg = "";

  if ($e isa Comment) {
    var Comment c = $e as Comment;
    if ($c.screened) {
      $screenedfg = " style=\"color: $*comment_screened_fgcolor;\"";
    }
  }

  if($e isa Entry) {
    $user   = $e.journal + "";
    $poster = $e.poster  + "";
    if($p.view == "recent" and not($e.poster->equals($e.journal))) {
      $user   = $e.poster + "";
      $poster = "";
    } elseif($p.view == "recent") {
      $user = "";
    }
    if($e.poster->equals($e.journal)) {
      if($p.view != "friends") {
        $user = "";
      }
      $poster = "";
    }
  }

  if($e isa Comment) {
    if($e.poster.username != "") {
      $user = $e.poster + "";
    } else {
      $user = """<i class="noposter">$*text_poster_anonymous</i>""";
    }
  }

  if($user != "") {
    $return = $return + """
      <td class="dateheader"$screenedfg>$*text_user</td>
      <td class="datecontent"$screenedfg>$user""";
    if($poster != "") {
      $return = $return + " (posted by $poster)";
    }
    $return = $return + """</td>
    """;
  }
  return $return;
}

function print_entry(EntryLite e, Color bgcolor, Color fgcolor) {
  var Page p            = get_page();
  var string id         = $e->lay_make_id();
  var string userpic    = $e->lay_make_userpic();
  var string posterinfo = make_poster($e);
  var string date       = $e->time_display($*datetime_format, "none");
  var string icon       = $e->lay_make_icon();
  var string subject    = $e.subject != "" ? $e.subject : """<i class="nosubject">$*text_nosubject</i>""";
  var string security   = "";
  var string screenedbg = "";
  var string screenedfg = "";
  
  if ($p.view != "entry" and not $subject->contains("<a ")) {
    $subject = """$icon<a href="$e.permalink_url" class="subjlink subj-link">$subject</a>""";
  } else { $subject = """$icon$subject"""; }
  var int rowspan = 0;

  if ($e isa Entry) {
    var Entry en = $e as Entry;
    $security = $en.security != "" ? $en.security->upperfirst() : "Public";
  }
  if ($e isa Comment) {
    var Comment c = $e as Comment;
    if ($c.screened) {
      $screenedbg = " style=\"background-color: $*comment_screened_bgcolor;\"";
      $screenedfg = " style=\"color: $*comment_screened_fgcolor;\"";
    }
  }

  """
  <a name="$id" id="$id"></a>
  <div class="entry">
  <table cellspacing="0"$screenedbg>
  """;

  if($userpic != "") {
    """
    <tr>
      <td rowspan="$rowspan" valign="top">$userpic</td>
      <td valign="top" width="100%">
        <table cellspacing="0">""";
  }

  if($posterinfo != "") {
    print safe $posterinfo;
  }

  if($date != "") {
    """
    <tr>
      <td class="dateheader"$screenedfg>$*text_date</td>
      <td class="datecontent"$screenedfg>$date</td>
    </tr>
    """;
  }
  if($subject != "") {
    """
    <tr>
      <td class="dateheader"$screenedfg>$*text_subject</td>
      <td class="datecontent"$screenedfg>$subject</td>
    </tr>
    """;
  }
  if($security != "") {
    """
    <tr>
      <td class="dateheader"$screenedfg>$*text_security</td>
      <td class="datecontent"$screenedfg>$security</td>
    </tr>
    """;
  }
  $e->lay_print_metadata();

  if($userpic != "") {
    """
        </table>
      </td>
    </tr>""";
  }

  """
  </table>
  <p>"""; $e->print_text(); """</p>
  <span class="author">""";
  $e->print_linkbar();
  """</span>""";
  if ($e isa Comment) {
    var Comment c = $e as Comment;
    $c->print_reply_container({"class" => "quickreply"});
  } else {
     $p->print_reply_container({"target" => "topcomment"});
  }
  """<br />
  </div>
  <br />
  <hr size="1"><br />
  """;
}

function Page::print_entry(Entry e) {
  var Color bgcolor = null Color;
  var Color fgcolor = null Color;
  if($this isa FriendsPage) {
    var FriendsPage fp = $this as FriendsPage;
    $bgcolor = $fp.friends{$e.journal.username}.bgcolor;
    $fgcolor = $fp.friends{$e.journal.username}.fgcolor;
  }
  print_entry($e, $bgcolor, $fgcolor);
}

function RecentPage::print_body() {
  var Entry[] entries = $.entries;
  if ($*reverse_entries_recent) { $entries = reverse $entries; }

  foreach var Entry e ($entries) {
    $this->print_entry($e);
    if ($e->viewer_sees_ebox()) {
        """<div style="text-align:center">""";
        $e->print_ebox();
        """
        </div>
        <br /><hr size="1" /><br />
        """;
    }
  }
}

function DayPage::print_body() {
  var Entry[] entries = $.entries;
  if ($*reverse_entries_day) { $entries = reverse $entries; }

  foreach var Entry e ($entries) {
    $this->print_entry($e);
    if ($e->viewer_sees_ebox()) {
        """<div style="text-align:center">""";
        $e->print_ebox();
        """
        </div>
        <br /><hr size="1" /><br />
        """;
    }
  }
}

function YearPage::print_body() {
  foreach var YearMonth m ($.months) {
    $this->print_month($m);
  }
}

function YearPage::print_year_links() {
  var string yearlinks = "";

  foreach var YearYear y ($.years) {
    if ($y.displayed) {
      $yearlinks = $yearlinks + """$y.year<br />\n""";
    } else {
      $yearlinks = $yearlinks + """<a href="$y.url">$y.year</a><br />\n""";
    }
  }

  if ($yearlinks != "") {
    print_sidebar_box($*text_sidebar_selectyear, $yearlinks);
  }
}

function EntryPage::print_body() {
  $this->print_entry($.entry);
    
  if ($.entry->viewer_sees_ebox()) {
        """<div style="text-align:center">""";
        $.entry->print_ebox();
        """</div><br /><hr size="1" /><br />""";
  }

  if($.entry.comments.enabled) {
    if($.multiform_on) {
      $this->print_multiform_start();
    }
    if(not $.comment_pages.all_subitems_displayed) {
      $.comment_pages->print();
    }
    $this->print_comments($.comments);
    if(not $.comment_pages.all_subitems_displayed) {
      $.comment_pages->print();
    }
    if($.multiform_on) {
      $this->print_multiform_actionline();
      $this->print_multiform_end();
    }
  }
}

function EntryPage::print_comment(Comment c) {
  print_entry($c, null Color, null Color);
}

function EntryPage::print_comments (Comment[] cs) {
  if (size $cs == 0) { return; }
  foreach var Comment c ($cs) {
    var int indent = ($c.depth - 1) * 25;
    "<div id=\"$c.dom_id\" style='margin-left: ${indent}px; margin-top: 5px'>\n";
    if ($c.full) {
      $this->print_comment($c);
    } else {
      $this->print_comment_partial($c);
    }
    "</div>";
    $this->print_comments($c.replies);
  }
}

function ReplyPage::print_body() {
  $this->print_entry($.entry);
  if($.replyto.depth > 0) { # If we're replying to a comment
    print_entry($.replyto, null Color, null Color);
  }
  if ($.entry->viewer_sees_ebox()) {
        """<div style="text-align:center">""";
        $.entry->print_ebox();
        """</div><br /><hr size="1" /><br />""";
  }
  $.form->print();
}

function Page::print() {
var string margin = "";
if ($*content_top_margin != "0") {
  $margin = """<table border="0" cellspacing="0" cellpadding="0" width="$*content_width" align="$*content_alignment" style="margin-top: $*content_top_margin;">""";
}

var string title    = $this->title();
var string subtitle = $.global_subtitle != "" and $.view != "friends" ? """<br><span class="descrip">$.global_subtitle</span>""" : "";
"""<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n""";
$this->print_head();
$this->print_stylesheets();
print safe """
<title>$title</title>
</head>
<body>
""";

$this->print_control_strip();

if ($margin == "") {
    print safe """<table border="0" cellspacing="0" cellpadding="0" width="$*content_width" align="$*content_alignment">""";
} else {
    print safe $margin;
}
"""
  <tr><td>

<table border="0" cellspacing="0" cellpadding="0" width="100%">
  <tr>
    <td width="100%" bgcolor="$*top_bar"><img src="$*IMGDIR/dot.gif" width="1" height="13"></td>
  </tr>
  <tr>
    <td width="100%" bgcolor="$*page_bgcolor"><img src="$*IMGDIR/dot.gif" width="1" height="2"></td>
  </tr>
  <tr>
""";
    print safe """<td class="title" width="100%" bgcolor="$*title_bgcolor" valign="top">$title$subtitle</td>""";
"""
  </tr>
  <tr>
    <td width="100%" bgcolor="$*border_color"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>
  </tr>
</table>
<table border="0" cellspacing="0" cellpadding="0" width="100%" id="content">
  <tr>""";

if($*sidebar_position == "left") {
  """
    <td valign="top" width="175">
      <table border="0" cellspacing="0" cellpadding="0" width="100%">
        <tr>
          <td bgcolor="$*subhead_bgcolor"><img src="$*IMGDIR/dot.gif" width="175" height="1"></td>
        </tr>
      </table>
      <table border="0" cellspacing="0" cellpadding="0" width="100%">
""";
print_sidebar();
"""
        <tr><td>&nbsp;</td></tr>
      </table>
    </td>
  """;
} else {
  if (viewer_sees_vbox()) {
    """<td valign="top" width="175"><div style="width: 160px; margin-left: auto; margin-right: auto;">""";
    $this->print_vbox();
    "</div></td>";
    """<td width="1" bgcolor="$*border_color" rowspan="2"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>""";
  }
  """
    <td valign="top" class="body"><img src="$*IMGDIR/dot.gif" width="100%" height="1"><br />
  """;
  if (viewer_sees_hbox_top()) {
    """<div align="center" style="margin-bottom: 10px;">""";
    $this->print_hbox_top();
    "</div>";
  }
  $this->print_body();
  if (viewer_sees_hbox_bottom()) {
    """<div style="text-align:center">""";
    $this->print_hbox_bottom();
    "</div>";
  }
  """
    </td>
  """;
}

"""
    <td width="1" bgcolor="$*border_color" rowspan="2"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>
""";

if($*sidebar_position == "right") {
  """
    <td valign="top" width="175">
      <table border="0" cellspacing="0" cellpadding="0" width="100%">
        <tr>
          <td bgcolor="$*subhead_bgcolor"><img src="$*IMGDIR/dot.gif" width="175" height="1"></td>
        </tr>
      </table>
      <table border="0" cellspacing="0" cellpadding="0" width="100%">
""";
print_sidebar();
"""
        <tr><td>&nbsp;</td></tr>
      </table>
    </td>
  """;
} else {
  """
    <td valign="top" class="body"><img src="$*IMGDIR/dot.gif" width="100%" height="1"><br />
  """;
  if (viewer_sees_hbox_top()) {
    """<div align="center" style="margin-bottom: 10px;">""";
    $this->print_hbox_top();
    "</div>";
  }
  $this->print_body();
  if (viewer_sees_hbox_bottom()) {
    """<div style="text-align:center">""";
    $this->print_hbox_bottom();
    "</div>";
  }
  """
    </td>
  """;
  if (viewer_sees_vbox()) {
    """<td width="1" bgcolor="$*border_color" rowspan="2"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>""";
    """<td valign="top" width="175"><div style="width: 160px; margin-left: auto; margin-right: auto;">""";
    $this->print_vbox();
    "</div></td>";
  }
}

"""
    <td width="1" bgcolor="$*border_color" rowspan="2"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>
    <td bgcolor="$*subhead_bottom" rowspan="2"><img src="$*IMGDIR/dot.gif" width="1" height="1"></td>
  </tr>
  <tr>
    <td colspan="5" bgcolor="$*bottom_bar"><img src="$*IMGDIR/dot.gif" width="1" height="10"></td>
  </tr>
</table>
</td></tr></table>
</body>
</html>""";
}
