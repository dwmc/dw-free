# -*-s2-*-

layerinfo type = "layout";
layerinfo name = "Classic";
layerinfo redist_uniq = "classic/layout";
layerinfo previews = "classic/classic.jpg";
layerinfo des = "The original LiveJournal style: simple and effective.";

propgroup presentation {
  property string content_width {
      des = "Content area width";
      note = "Don't forget to include units; e.g. px, %";
  }
  property string content_alignment {
      des = "Alignment of the content area";
      values = "left|Left|center|Center|right|Right";
  }
  property string content_top_margin {
      des = "Margin size on the top of the content area";
      note = "You can use this to shift your journal contents down in order to display a background image at the top of your journal.  Don't forget to include units; e.g. px, %";
  }
  property string entryborder_size {
      des = "Size of borders around entries";
      note = "Don't forget to include the units, e.g. px";
  }
  property string entryborder_style {
      des = "Style of borders around entries";
      values = "solid|Solid|dashed|Dashed|dotted|Dotted|double|Double|hidden|Invisible";
  }
  property bool transparent {
      des = "Make journal content transparent instead of using given background colors";
  }
  property bool show_entry_userpic {
      des = "Display your userpic with your entries";
  }
  property use page_recent_items;
  property use page_friends_items;
  property use view_entry_disabled;
  property use use_shared_pic;
  property bool show_entrynav_icons {
      des = "Toggle to show the next, memory, edit, etc icons on the entry view page";
  }
  property use external_stylesheet;
  property use linklist_support;
  property string counter_code {
      des = "If you have an external web counter, you can enter the HTML for it here";
      note = "Your counter will appear in a tab at the bottom of your journal.";
      maxlength = 2000;
      string_mode = "html-oneline";
  }
  property use custom_control_strip_colors;
  property string text_expand_link {
        des = "Text for comments expander link in link bar";
        noui = 1;
    }
    set text_expand_link = "Expand";

}
set content_width = "100%";
set content_alignment = "left";
set content_top_margin = "0";
set entryborder_size = "";
set entryborder_style = "hidden";
set transparent = false;
set show_entry_userpic = false;
set page_recent_items = 20;
set page_friends_items = 25;
set view_entry_disabled = false;
set show_entrynav_icons = true;
set counter_code = "";

propgroup colors {
  property Color body_bgcolor {
      des = "Background color of page";
      s1color = "stronger_back";
  }
  property Color main_bgcolor {
      des = "Background color of main text area";
      s1color = "page_back";
  }
  property Color main_fgcolor {
      des = "Color of text on main text areas";
      s1color = "page_text";
  }
  property Color border_color {
      des = "Color of borders around entries";
      note = "If you don't set a border size and style in the \"Presentation\" section, this won't have any effect.";
  }
  property Color headerbar_bgcolor {
      des = "Background color of header bars";
      s1color = "strong_back";
  }
  property Color headerbar_fgcolor {
      des = "Color of text on header bars";
      s1color = "strong_text";
  }
  property Color metabar_bgcolor {
      des = "Background color of side bar";
      s1color = "weak_back";
  }
  property Color metabar_fgcolor {
      des = "Color of text on side bar";
      s1color = "weak_text";
  }
  property Color page_title_color {
      des = "Text color of the page's main title";
      s1color = "page_text_title";
  }
  property Color page_subtitle_color {
      des = "Text color of the page's subtitles";
      s1color = "page_text_em";
  }
  property Color link_color {
      des = "Text color of links";
      s1color = "page_link";
  }
  property Color vlink_color {
      des = "Text color of visited links";
      s1color = "page_vlink";
  }
  property Color alink_color {
      des = "Text color of active links";
      s1color = "page_alink";
  }
  property Color comment_bar_one_bgcolor {
      des = "Alternating background color for comment bars (one)";
  }
  property Color comment_bar_two_fgcolor {
      des = "Text color on alternating comment bars (one)";
  }
  property Color comment_bar_two_bgcolor {
      des = "Alternating background color for comment bars (two)";
  }
  property Color comment_bar_one_fgcolor {
      des = "Text color on alternating comment bars (two)";
  }
  property Color comment_bar_screened_bgcolor {
      des = "Background bar color for screened comments";
  }
  property Color comment_bar_screened_fgcolor {
      des = "Text color on background bar for screened comments";
  }
  property use control_strip_bgcolor;
  property use control_strip_fgcolor;
  property use control_strip_bordercolor;
  property use control_strip_linkcolor;
}
set body_bgcolor = "#6666cc";
set main_bgcolor = "#ffffff";
set main_fgcolor = "#000000";
set border_color = "#000000";
set headerbar_bgcolor = "#c0c0ff";
set headerbar_fgcolor = "#000000";
set metabar_bgcolor = "#eeeeff";
set metabar_fgcolor = "#000000";
set page_title_color = "#8b1a1a";
set page_subtitle_color = "#c00000";
set link_color = "#000050";
set vlink_color = "#500050";
set alink_color = "#ff00c0";
set comment_bar_one_bgcolor = "#c0c0ff";
set comment_bar_one_fgcolor = "#000000";
set comment_bar_two_bgcolor = "#eeeeff";
set comment_bar_two_fgcolor = "#000000";
set comment_bar_screened_bgcolor = "#dddddd";
set comment_bar_screened_fgcolor = "#000000";

propgroup fonts {
  property use font_base;
  property use font_fallback;

}
set font_base = "Arial, Helvetica";
set font_fallback = "sans-serif";

propgroup images {
    property string page_background_image {
        des = "Background image URL";
    }

    property string page_background_repeat {
        des = "Background image repeat";
        values = "repeat|Repeat|no-repeat|Don't repeat|repeat-x|Repeat across only|repeat-y|Repeat down only";
    }

    property string page_background_position {
        des = "Background image position";
        note = "Does not apply if Background Image Repeat is set to 'Repeat'.";
        values = "top|Top|top left|Top-left|top right|Top-right|center|Center|center left|Center-left|center right|Center-right|bottom|Bottom|bottom left|Bottom-left|bottom right|Bottom-right|left|Left|right|Right";
    }

    property string page_background_scrolling {
        des = "Background image scrolling";
        note = "Not supported in all browsers, but allows for the background image to be in a fixed position when scrolling.";
        values = "scroll|Scroll|fixed|Fixed";
    }
    property string img_btwn_comments {
        des = "URL to an image to be used between your comment links";
        note = "If you specify an image to use, it will replace any text between the comment links.";
    }
}
set page_background_image = "";
set page_background_repeat = "repeat";
set page_background_position = "center";
set page_background_scrolling = "scroll";
set img_btwn_comments = "";

propgroup text {
  property use text_post_comment;
  property use text_read_comments;
  property use text_post_comment_friends;
  property use text_read_comments_friends;
  property use text_website_default_name;

  property string text_left_comments {
        des = "Text to be used in front of your comment links";
  }
  property string text_btwn_comments {
        des = "Text to be used between your comment links";
        note = "If you specified an image to be used between your comments links in the \"Images\" section, then this option will not have any effect.";
  }
  property string text_right_comments {
        des = "Text to be used at the end of your comment links";
  }
  property string date_format {
        des = "Date format for entries";
  }
  property string time_format {
        des = "Time format for entries";
  }
  property string datetime_comments_format {
        des = "Date and time format for comments";
  }
  property string date_daypage_format {
        des = "Date format for the day page";
  }
  property string date_daypage_skip_format {
        des = "Date format for the skip links on the day page";
  }
}
set text_left_comments = "(";
set text_btwn_comments = " | ";
set text_right_comments = ")";
set date_format = "%%month%% %%dayord%%, %%yyyy%%";
set time_format = "%%hh%%:%%min%% %%a%%m";
set datetime_comments_format = "%%month%% %%dayord%%, %%yyyy%% %%hh%%:%%min%% %%a%%m";
set date_daypage_format = "%%month%% %%dayord%%, %%yyyy%%";
set date_daypage_skip_format = "%%yyyy%%/%%mm%%/%%dd%%";

propgroup customcss {
  property use include_default_stylesheet;
  property use linked_stylesheet;
  property use custom_css;
}

set tags_aware = true;

function prop_init () {
    if ($*control_strip_bgcolor.as_string == "") {
        $*control_strip_bgcolor = $*main_bgcolor;
    }
    if ($*control_strip_fgcolor.as_string == "") {
        $*control_strip_fgcolor = $*main_fgcolor;
    }
    if ($*control_strip_bordercolor.as_string == "") {
        $*control_strip_bordercolor = $*border_color;
    }
    if ($*control_strip_linkcolor.as_string == "") {
        $*control_strip_linkcolor = $*link_color;
    }

    $*theme_bgcolor = $*main_bgcolor;
    $*theme_fgcolor = $*main_fgcolor;
    $*theme_bordercolor = $*border_color;
    $*theme_linkcolor = $*link_color;
}

function print_stylesheet ()
{
    var string align = "";
    if ($*content_alignment == "center") {
        $align = "margin-left: auto; margin-right: auto;";
    } elseif ($*content_alignment == "right") {
        $align = "float: right;";
    } else {
        $align = "float: left;";
    }

    if(clean_url($*page_background_image) != "") {
      """body {
    background-image: url("$*page_background_image");
    background-position: $*page_background_position;
    background-repeat: $*page_background_repeat;
    background-attachment: $*page_background_scrolling;
}""";
    }
    var string font;
    if ($*font_base) {
        $font = "\"$*font_base\"";
        if ($*font_fallback != "none") {
            $font = "$font, ";
        }
    }
    if ($*font_fallback != "none") {
        $font = "$font $*font_fallback";
    }

if ($font != "") {
"""
body, table, td, th, .page_title, #yearheader {
font-family: $font;
}
""";
}

    """
body,.body {
    background-color:    $*body_bgcolor;
    color:               $*main_fgcolor;
    padding:             5pt;
}
a, a:link {
    color:               $*link_color;
}
a:visited {
    color:               $*vlink_color;
}
a:active {
    color:               $*alink_color;
}
table.main {
    background-color:    $*main_bgcolor;
    color:               $*main_fgcolor;
}
#whole {
    width:               $*content_width;
    $align
}
.page_title {
    color:               $*page_title_color;
    font-size:           18pt;
}
.view_links {
    font-family:         monospace;
    white-space:         nowrap;
}
.view_links2 {
    font-family:         monospace;
    font-size:           9pt;
}
th.headerbar {
    background-color:    $*headerbar_bgcolor;
    color:               $*headerbar_fgcolor;
    font-weight:         bold;
    font-size:           16pt;
    text-align:          left;
}
td.metabar {
    text-align:          right;
    white-space:         nowrap;
    background-color:    $*metabar_bgcolor;
    color:               $*metabar_fgcolor;
}
.entry {
    border: $*entryborder_size $*entryborder_style $*border_color;
}
.subject {
    color:               $*page_subtitle_color;
    font-weight:         bold;
}
.comments {
    text-align:          right;
}
#yearheader {
    color:               $*page_subtitle_color;
    font-weight:         bold;
    font-style:          italic;
    font-size:           14pt;
}
th.monthheader {
    background-color:    $*headerbar_bgcolor;
    color:               $*headerbar_fgcolor;
    font-size:           12pt;
}
th.daysheader {
    background-color:    $*metabar_bgcolor;
    color:               $*metabar_fgcolor;
    font-weight:         normal;
}
td.weekday_empty {
    background-color:    $*metabar_bgcolor;
    color:               $*metabar_fgcolor;
}
.day_id {
    font-weight:         bold;
    font-size:           10pt;
}
#archiveyearpage_nav {
    font-size:           14pt;
    font-weight:         bold;
}
""";
if ($*transparent) {
"""
table.main, th.headerbar, td.metabar, th.monthheader, th.daysheader, td.weekday_empty {
    background: transparent !important;
}
""";
}

print_custom_control_strip_css();
}

function Page::lay_nav_blurb() { }

function Page::lay_primary_userpic() : Image {
   return $.journal.default_pic;
}

function EntryPage::lay_primary_userpic() : Image {
   return $.entry.userpic;
}

function Page::print_linklist() {
    if (size $.linklist <= 0) {
        return;
    }

    var bool section_open = false;

    println "<span class='view_links2'>";
    foreach var UserLink l ($.linklist) {
        if ($l.title) {
            if ($l.is_heading) {
                if ($section_open) {
                    println "<br />";
                }
                println """<span style="font-weight: bold;">$l.title</span> """;
                $section_open = true;
            } else {
                println """[<a href="$l.url">$l.title</a>]""";
            }
        } else {
            println "<br />";
        }
    }
    if ($section_open) {
        println "</span><br /><br />";
    }
    println "";
}

function Page::print ()
{
    var string title = $this->title();
    var string userpic;
    var Image default_userpic = $this->lay_primary_userpic();
    if (defined $default_userpic)
    {
        $userpic = "<img align='right' style='padding: 2px' src='$default_userpic.url' "+
                   "width='$default_userpic.width' height='$default_userpic.height' alt='' />";
    }
    var string website_name = $.journal.website_name ? $.journal.website_name : $*text_website_default_name;
    var string website = $.journal.website_url ?
        """<td><a href="$.journal.website_url">$website_name</a></td><td class="body">&nbsp;</td>""" :
        "";
    var string links;
    foreach var string v ($.views_order) {
        $links = $links + ($.view == $v ?
                           "["+lang_viewname($v)+"]" :
                           "[<a href='$.view_url{$v}'>"+lang_viewname($v)+"</a>]");
    }
    var string margin = "";
    var string margin2 = "";
    if ($*content_top_margin != "0") {
        $margin = "<table width=\"100%\" height=\"100%\" style=\"margin-top: $*content_top_margin;\">";
        $margin2 = "<table id=\"whole\" cellpadding=\"0\" cellspacing=\"0\" style=\"margin-top: $*content_top_margin;\">";
    }
"""<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n""";

    $this->print_head();
    $this->print_stylesheets();

print safe """
  <title>$title</title>
</head>
<body>
""";
 $this->print_control_strip();
 if (viewer_sees_vbox()) {
    if ($margin == "") {
        """<table width="100%" height="100%">""";
    } else {
        print safe $margin;
    }
    """<tr><td valign="top">""";
 }
 if (viewer_sees_hbox_top()) {
    """<div style="text-align: center; margin-bottom: 10px;">""";
    $this->print_hbox_top();
    "</div>";
 }
 if ($margin2 != "" and not viewer_sees_vbox()) {
     print safe $margin2;
 } else {
     "<div></div><table id=\"whole\" cellpadding=\"0\" cellspacing=\"0\">";
 }
"""<tr><td>""";
print safe """<table class="main" width="100%"><tr><td>
    $userpic
    <span class="page_title">$title</span>
    <p class="view_links">$links</p>
""";
if (size $.linklist > 0 and $*linklist_support) {
$this->print_linklist();
}

    $this->lay_nav_blurb();
    $this->print_body();
    "</td></tr></table></td></tr>\n";

    ### Affliations

    "<tr><td><table class='main' align='right'><tr>";

    if ($*counter_code != "") {
        """<td>$*counter_code</td><td class="body">&nbsp;</td>""";
    }
    print safe $website; "<td>"; server_sig(); "</td></tr>";

    "</table></td></tr></table>";
    if (viewer_sees_hbox_bottom()) {
        """<div style="text-align: center; margin-top: 50px;">""";
        $this->print_hbox_bottom();
        "</div>";
    }
    if (viewer_sees_vbox()) {
        "</td>";
        """<td valign="top" align="right" width="20%"><div style="margin-right: 10px;">""";
        $this->print_vbox();
        "</div></td></tr></table>";
    }
    "\n</body>\n</html>";
}

function print_entry (Page p, Entry e, Color bgcolor, Color fgcolor, bool hide_text)
{
    var string time = $e.time->time_format($*time_format);
    var string userpic = "";
    if (defined $e.userpic)
    {
        $userpic = "<img src='$e.userpic.url' alt='[User Picture]' height='$e.userpic.height' width='$e.userpic.width' />";
    }
    if ($e.new_day or $p.view == "entry")
    {
        "<tr><th colspan='2' align='left' class='headerbar'>";
        print $e.time->date_format($*date_format);
        "</th></tr>\n";
    } elseif ($p.view == "day") {
        "<tr><th class='headerbar'>Time</td><td class='headerbar' style='width: 100%'>Event</th></tr>";
    }
    "<tr valign='top'>";

    # Metabar
      "<td style='background-color: $bgcolor;' class='metabar'>";
      # Time
      "<em>$time</em><br />";
      # Altposter crap
      if ($p.view == "friends")
      {
          "<strong><a style='color: $fgcolor' href='" + $e.journal->base_url() + "/'>";
          print $e.journal.username;
          "</a></strong><br />";
      }
      if ($e.journal.username != $e.poster.username)
      {
          "[<a href='" + $e.poster->base_url() + "/'>";
          print $e.poster.username;
          "</a>]<br />";
      }
      if ($userpic != "" and ($p.view == "friends" or $*show_entry_userpic == true))
      {
          print $userpic;
      }
      # Security icon
      if ($e.security) { print $e.security_icon; }
      # Permalink
      "<p>[<a href='$e.permalink_url'>$*text_permalink</a>]</p>";
      "</td>";

    # Entry
      "<td class='entry' style='text-align:left'>";

      if ($p.view == "entry" and $*show_entrynav_icons)
      {
          print "<div style='text-align: center'>";
          $e->print_linkbar();
          print "</div>";
      }

      if ($e.subject) { "\n\n<span class='subject'>$e.subject</span><br />"; }
      if (not $hide_text) {
          $e->print_text();
          print "\n\n";
          if (size $e.metadata or size $e.tags)
          {
              "<p>";
              foreach var string k ($e.metadata)
              {
                  var string key = $k;
                  var string val = $e.metadata{$k};
                  if ($k == "mood")  { $key = $*text_meta_mood;  }
                  if ($k == "music") { $key = $*text_meta_music; }
                  if ($k == "location") { $key = $*text_meta_location; }
                  if ($k == "groups") { $key = $*text_meta_groups; }
                  if ($k == "mood" and defined $e.mood_icon)
                  {
                      var Image i = $e.mood_icon;
                      $val = "<img src='$i.url' width='$i.width' height='$i.height' alt='' /> $val";
                  }
                  "<strong>$key:</strong> $val<br />";
              }

              if ($e.tags) {
                  var int tcount = 0;
                  "<strong>Tags:</strong> ";
                  foreach var Tag t ($e.tags) {
                      """<a rel="tag" href="$t.url">$t.name</a>""";
                      $tcount++;
                      if ($tcount != size $e.tags) { ", "; }
                  }
                  "<br />";
              }

              "</p>";
          }
      }
      $e.comments->print();
      "</td>";
    "</tr>\n";
}

function Page::print_entry (Entry e)
{
    print_entry($this, $e, $*metabar_bgcolor, $*metabar_fgcolor, false);
}

function FriendsPage::print_entry (Entry e)
{
    var Friend f = $.friends{$e.journal.username};
    print_entry($this, $e, $f.bgcolor, $f.fgcolor, false);
}

function RecentPage::lay_nav_blurb ()
{
    var string user = "<a href='$.base_url/info'>$.journal.name</a>";
    if ($.nav.skip > 0)
    {
        "Below are $.nav.count entries, after skipping $.nav.skip most recent ones in the \"$user\" journal:";
    } else {
        "Below are the $.nav.count most recent journal entries recorded in the \"$user\" journal:";
    }
}

function RecentPage::print_body ()
{
    var string nav = "";
    if ($.nav.forward_url != "" or $.nav.backward_url != "")
    {
        if ($.nav.backward_url != "")
        {
            $nav = "<a href='$.nav.backward_url'>&lt;&lt; Previous $.nav.backward_count entries</a>";
        }
        if ($.nav.backward_url != "" and $.nav.forward_url != "")
        {
            $nav = "$nav --";
        }
        if ($.nav.forward_url != "")
        {
            $nav = "$nav <a href='$.nav.forward_url'>Next $.nav.forward_count entries &gt;&gt;</a>";
        }
        $nav = "<p align='center'>[$nav]</p>";
    }
    if ($nav != "") { print $nav; }
    "<table style='margin-left: 30px'>\n";
    foreach var Entry e ($.entries) {
        $this->print_entry($e);
        if ($e->viewer_sees_ebox()) {
            """<tr><td colspan="2" align="center">""";
            $e->print_ebox();
            "</td></tr>";
        }
    }
    "</table>\n";
    if ($nav != "") { print $nav; }
}

function FriendsPage::lay_nav_blurb ()
{
    var int total = size $.entries;
    if ($.nav.skip > 0)
    {
        "Below are $total friends entries, after skipping $.nav.skip most recent ones:";
    } else {
        "Below are the $total most recent friends journal entries:";
    }
}

function CommentInfo::print ()
{
    if ($.show_readlink or $.show_postlink) {
        print safe "<p class='comments'>$*text_left_comments";
        if ($.show_readlink) {
            $this->print_readlink();
        }
        if ($.show_postlink and $.show_readlink) {
            if (clean_url($*img_btwn_comments) != "") {
                """ <img src="$*img_btwn_comments" alt="" /> """;
            } else {
                print safe "$*text_btwn_comments";
            }
        }
        if ($.show_postlink) {
            $this->print_postlink();
        }
        print safe "$*text_right_comments</p>";
    }
}

function YearPage::lay_nav_blurb()
{
    "<p id='yearpage_nav'>";
    $this->print_year_links();
    "</p>";
}

function YearPage::print_body
{
    "<p id='yearheader'>$.year&hellip;</p>\n";
    foreach var YearMonth m ($.months) {
        $this->print_month($m);
    }
}

function YearPage::print_year_links ()
{
    foreach var YearYear y ($.years) {
        if ($y.displayed) {
            "[ $y.year ]";
        } else {
            "[ <a href=\"$y.url\">$y.year</a> ]";
        }
    }
}

function YearPage::print_month(YearMonth m)
{
    if (not $m.has_entries) { return; }
    # Table Wrapper
    "<center><p><table border='1' cellpadding='4' width='80%'>\n";

    # Month Header
    "<tr align='center'><th colspan='7' class='monthheader'>\n";
    print $m->month_format();
    "</th></tr>\n";

    # Weekdays Header
    "<tr align='center'>\n";
    foreach var int d (weekdays()) {
        "<th class='daysheader'>"+$*lang_dayname_short[$d]+"</th>\n";
    }
    "</tr>\n";

    # Weeks
    foreach var YearWeek w ($m.weeks) {
        $w->print();
    }

    # Footer
    "<tr><td colspan='7'><div style='text-align: center'><a href='$m.url'>$*text_view_month</a></div></td></tr>\n";

    # End Table
    "</table></p></center>\n";
}

function YearWeek::print ()
{
    "<tr>";
    if ($.pre_empty) { "<td colspan='$.pre_empty' class='weekday_empty'>&nbsp;</td>"; }
    foreach var YearDay d ($.days) {
        "<td valign='top'><span class='day_id'>$d.day</span><div style='text-align: center'>";
        if ($d.num_entries) {
            "<a href='$d.url'>$d.num_entries</a>";
        } else {
            "&nbsp;";
        }
        "</div></td>\n";
    }
    if ($.post_empty) { "<td colspan='$.post_empty' class='weekday_empty'>&nbsp;</td>"; }
    "</tr>";
}

function DayPage::print_body ()
{
    "<h2 class='daypage_header'>"; print $.date->date_format($*date_daypage_format); "</h2>";
    if (not $.has_entries)
    {
        "<blockquote><em>"; print ehtml($*text_noentries_day); "</em></blockquote>";
    } else {
        "<table style='margin-left: 30px'>";
        foreach var Entry e ($.entries) {
            $this->print_entry($e);
            if ($e->viewer_sees_ebox()) {
                """<tr><td colspan="2" align="center">""";
                $e->print_ebox();
                "</td></tr>";
            }
        }
        "</table>";
    }

    var string tprev = ehtml($*text_day_prev);
    var string tnext = ehtml($*text_day_next);

    "<table align='center'><tr align='middle'>\n";

    "<td width='33%' align='left'><a href='$.prev_url'>$tprev</a></td>\n";
    "<td align='center' width='33%'>";
      "<strong>"; print $.date->date_format($*date_daypage_skip_format); "</strong><br />";
      "[<a href='"; print $this.journal->base_url(); "/calendar'>$*text_view_archive</a>]</td>\n";
    "<td width='33%' align='right'><a href='$.next_url'>$tnext</a></td>\n";

    "</tr></table>";

}

function EntryPage::print_body () {
        set_handler("unscreen_comment_#", [
                                           [ "style_bgcolor", "cmtbar#", "$*comment_bar_one_bgcolor", ],
                                           [ "style_color", "cmtbar#", "$*comment_bar_one_fgcolor", ],
                                           ]);
        set_handler("screen_comment_#", [
                                         [ "style_bgcolor", "cmtbar#", "$*comment_bar_screened_bgcolor", ],
                                         [ "style_color", "cmtbar#", "$*comment_bar_screened_fgcolor", ],
                                         ]);

    "<table style='margin-left: 30px'>\n";
    print_entry($this, $.entry, $*metabar_bgcolor, $*metabar_fgcolor, $.viewing_thread);

    if ($.entry.comments.enabled and $.comment_pages.total_subitems > 0)
    {
        var string background = $*metabar_bgcolor;
        if ($*transparent) {
            $background = "transparent";
        }

        $this->print_multiform_start();
        "<tr valign='top'><th class='headerbar' colspan='2'>Comments</th></tr>";
        "<tr valign='top'><td style='background-color: $background'>&nbsp;</td><td style='width: 100%'>";
        if ($.comment_pages.total_subitems > 0) {
            $.comment_pages->print();
            $this->print_comments($.comments);
        }
        "</td></tr>";
        if ($this.multiform_on) {
            "<tr valign='top'><th class='headerbar' colspan='2'>Mass Action</th></tr>";
            "<tr valign='top'><td style='background-color: $background'>&nbsp;</td><td style='width: 100%'>";
            $this->print_multiform_actionline();
            $this->print_multiform_end();
            "</td></tr>";
        }
    }
    "</table>\n";
}

function EntryPage::print_comment (Comment c) {
    var Color background; var Color color;
    if ($c.screened) {
        $background = $*comment_bar_screened_bgcolor;
        $color = $*comment_bar_screened_fgcolor;
    } elseif ($c.depth % 2) {
        $background = $*comment_bar_one_bgcolor;
        $color = $*comment_bar_one_fgcolor;
    } else {
        $background = $*comment_bar_two_bgcolor;
        $color = $*comment_bar_two_fgcolor;
    }
    if ($*transparent) {
        $background = "transparent";
    }
    var string poster = defined $c.poster ? $c.poster->as_string() : "<i>(Anonymous)</i>";
    var string sub_icon;
    if (defined $c.subject_icon) {
        $sub_icon = $c.subject_icon->as_string();
    }
    "<a name='$c.anchor'></a><div id='cmtbar$c.talkid' style='background-color: $background; color: $color; margin-top: 10px; width: 100%'>";
    "<table cellpadding='2' cellspacing='0' summary='0' style='width: 100%'><tr valign='top'>";
    if (defined $c.userpic and $*comment_userpic_style != "off") {
        var int w = $c.userpic.width;
        var int h = $c.userpic.height;
        # WARNING: this will later be done by the system (it'll be a
        # constructional property), so don't copy this hack into your
        # layout layers or you'll be messed up later.
        if ($*comment_userpic_style == "small") {
            $w = $w / 2;
            $h = $h / 2;
        }
        print "<td style='width: 102px'><img src='$c.userpic.url' width='$w' height='$h' alt='[User Picture]' /></td>";
    }

    "<td style='width: 100%'><table style='width: 100%'><tr>";

    ### From, date, etc
    "<td align='left' style='width: 50%'>";
      print "<table>";
      print "<tr><th align='right'>From:</th><td>$poster</td></tr>\n";
      print "<tr><th align='right'>Date:</th><td style='white-space: nowrap'>";
        print $c->time_display($*datetime_comments_format, "none") + "</td></tr>";
      if ($c.metadata{"poster_ip"}) { print "<tr><th align='right'>IP Address:</th><td>(" + $c.metadata{"poster_ip"} + ")</td></tr>"; }
    "</table></td>";

    ### Gadgets
    "<td align='right' style='width: 50%'>";
    if ($this.multiform_on) {
        " <label for='ljcomsel_$c.talkid'>$*text_multiform_check</label>";
        $c->print_multiform_check();
    }
    $c->print_linkbar();
    "</td></tr>";

    ### Subject / icon
    print "<tr valign='top'><td style='width: 50%'>";
    print (defined $c.subject_icon or $c.subject != "") ? "<h3>$c.subject_icon $c.subject</h3>" : "";
    print "</td>";

    ### Permalink
    print "<td style='width: 50%' align='right'><strong>(<a href='$c.permalink_url'>Link</a>)</strong></td></tr>";

    print "</table></td></tr></table></div>";
    print "<div style='margin-left: 5px'>"; $c->print_text(); "</div>";
    print "<div style='margin-top: 3px; font-size: smaller'>";
    if ($c.frozen) {
        print "(Replies frozen) ";
    } else {
        print "(<a href='$c.reply_url'>Reply to this</a>) ";
    }
    if ($c.parent_url != "") { "(<a href='$c.parent_url'>Parent</a>) "; }
    if ($c.thread_url != "") { 
		"(<a href='$c.thread_url'>Thread</a>) "; 
		var Link expand_link = $c->get_link("expand_comments");
		if (defined $expand_link) {
			"""(<a href='$c.thread_url'  onClick="Expander.make(this,'$c.thread_url','$c.talkid'); return false;">$*text_expand_link</a>) """;
		}
	}
    "</div>";
}

function EntryPage::print_comment_partial (Comment c) {
    var string poster = defined $c.poster ? $c.poster->as_string() : "<i>$*text_poster_anonymous</i>";
    var string subj = $c.subject != "" ? $c.subject : $*text_nosubject;
    print safe "<a href='$c.permalink_url'>$subj</a> - $poster";
    var Link expand_link = $c->get_link("expand_comments");
    if ($c.thread_url != "" and defined $expand_link) {
        """ <a style='font-size: smaller' href='$c.thread_url'  onClick="Expander.make(this,'$c.thread_url','$c.talkid'); return false;">$*text_expand_link</a>""";
    }
}


function ReplyPage::print_body()
{
    "<table style='margin-left: 30px'>\n";
    if (not $.entry.comments.enabled) {
        print "<tr><th class='headerbar'>$*text_reply_nocomments_header</th></tr><tr><td>$*text_reply_nocomments</td></tr></table>";
        return;
    }

    var string background = $*metabar_bgcolor;
    if ($*transparent) {
        $background = "transparent";
    }

    if ($.replyto isa Entry) {
        var Entry en = $.replyto as Entry;

        print_entry($this, $en, $*metabar_bgcolor, $*metabar_fgcolor, false);
    } else {
        var string time = $.replyto.time->time_format($*time_format);
        var string userpic = "";
        if (defined $.replyto.userpic)
        {
            $userpic = "<img src='$.replyto.userpic.url' />";
        }
        "<tr><th class='headerbar'>Time</td><th class='headerbar' style='width: 100%'>Text</th></tr>";
        "<tr valign='top'>";

        # Metabar
        "<td style='background-color: $*metabar_bgcolor;' class='metabar'>";
        # Time
        "<em>$time</em><br />";
        if ($userpic)
        {
            print $userpic + "<br />\n";
        }
        print defined $.replyto.poster ? $.replyto.poster->as_string() : "<i>(Anonymous)</i>";
        # Permalink
        "<p>[<a href='$.replyto.permalink_url'>$*text_permalink</a>]</p>";
        "</td>";

        # Text
        "<td style='text-align:left'>";
        if ($.replyto.subject != "") { "\n\n<span class='subject'>$.replyto.subject</span><br />"; }
        $.replyto->print_text();

        "</td></tr>\n";
    }

    "<div align='center'><a href='$.entry.comments.read_url'>( Read Comments )</a></div>";
    "<tr valign='top'><th class='headerbar' colspan='2'>Reply:</th></tr>";
    "<tr valing='top'><td style='background-color: $background'>&nbsp;</td><td>";
    $.form->print();
    "</td></tr></table>";
}

function print_theme_preview ()
{

    """
<table width='100%' style='background-color: $*body_bgcolor'>
  <tr><td>
    <table height='95%' cellpadding='5' width='100%' bgcolor='$*main_bgcolor'>
      <tr><td>
        <span style='font: normal bold 16pt $*font_base, $*font_fallback; color: $*page_title_color'>John Doe</span>

        <ul><table>
          <tr><td align="left" style="background-color: $*headerbar_bgcolor; color: $*headerbar_fgcolor" colspan="2">
            <span style='font: normal bold 14pt $*font_base, $*font_fallback'>Friday, November 15th, 2002</span>
          </td></tr>
          <tr valign="top"><td style="text-align: right; background-color: $*metabar_bgcolor; white-space: nowrap">
            <span style="font: italic normal 10pt $*font_base, $*font_fallback; color: $*metabar_fgcolor">
10:21 pm</span>
          </td><td>

<p style="text-align:left">
  <span style="font: italic bold 10pt $*font_base, $*font_fallback; color: $*page_subtitle_color">
Neque porro quisquam est&hellip;
  </span><br />

Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit
Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit
Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit
Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit
Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit
Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit

</p><p style="text-align:right; font-size: 8pt">
  (<a href="#" style="font-weight: bold; color: $*link_color">1 Comment</a> |
   <a href="#" style="color: $*vlink_color">Comment on this</a>)

</p>

          </td></tr>
        </table></ul>
      </td></tr>
    </table>
  </td></tr>
</table>
    """;
}
