layerinfo "type"            = "layout";
layerinfo "name"            = "Disjointed";
layerinfo "redist_uniq"     = "disjointed/layout";
layerinfo "previews"        = "disjointed/layout.jpg";
layerinfo "des"             = "A style that uses overlapping boxes.";

propgroup presentation {
    property use external_stylesheet;
    property string entries_width {
        des = "Content area width";
        note = "This does not include the sidebar.  Don't forget to include units; e.g. px, %";
    }
    property string entries_alignment {
        des = "Alignment of the content area";
        values = "left|Left|center|Center|right|Right";
    }
    property string content_top_margin {
        des = "Margin size on the top of the content area";
        note = "You can use this to shift your journal contents down in order to display a background image at the top of your journal.  Don't forget to include units; e.g. px, %";
    }
    property string entryborder_size {
        des = "Size of borders around entries";
        note = "Don't forget to include the units, e.g. px";
    }
    property string entryborder_style {
        des = "Style of borders around entries";
        values = "solid|Solid|dashed|Dashed|dotted|Dotted|double|Double|hidden|Invisible";
    }
    property string entries_text_alignment {
        des = "Alignment of the entry text";
        values = "left|Left|center|Center|right|Right|justify|Justify";
    }
    property bool transparent {
        des = "Make journal content transparent instead of using given background colors";
    }
    property bool transparent_borders {
        des = "Make journal borders transparent instead of using given colors";
    }
    property string sidebar_align {
        des = "Side of the journal that the sidebar appears on";
        values = "left|Left|right|Right";
    }
    property bool reverse_entries_recent {
        des = "Reverse entries on recent entries page";
    }
    property bool reverse_entries_day {
        des = "Reverse entries on day pages";
    }
    property bool show_calendar {
        des = "Show calendar in sidebar";
    }
    property bool show_free_text {
        des = "Show free text in sidebar";
    }
    property bool show_summary {
        des = "Show summary in sidebar";
    }
    property bool show_footer {
        des = "Show footer under content";
    }
    property use page_recent_items;
    property use page_friends_items;
    property use view_entry_disabled;
    property use use_shared_pic;
    property use linklist_support;
    property use tags_aware;
    property string counter_code {
        des = "If you have an external web counter, you can enter the HTML for it here";
        note = "Your counter will appear in a tab at the bottom of your journal.";
        maxlength = 2000;
        string_mode = "html-oneline";
    }
    property use custom_control_strip_colors;

    set external_stylesheet    = true;
    set entries_width          = "85%";
    set entries_alignment      = "center";
    set content_top_margin     = "0";
    set entryborder_size       = "2px";
    set entryborder_style      = "solid";
    set entries_text_alignment = "left";
    set transparent            = false;
    set transparent_borders    = false;
    set sidebar_align          = "right";
    set reverse_entries_recent = false;
    set reverse_entries_day    = false;
    set show_calendar          = true;
    set show_free_text         = true;
    set show_summary           = false;
    set show_footer            = true;
    set view_entry_disabled    = false;
    set linklist_support       = true;
    set tags_aware             = true;
    set counter_code           = "";
}

propgroup colors {
    property Color main_bgcolor {
        des = "Main background color";
        s1color = "page_back";
    }
    property Color under_bgcolor {
        des = "Under box background color";
        s1color = "stronger_back";
    }
    property Color under_fgcolor {
        des = "Under box foreground color";
        s1color = "stronger_text";
    }
    property Color over_bgcolor {
        des = "Over box background color";
        s1color = "strong_back";
    }
    property Color over_fgcolor {
        des = "Over box foreground color";
        s1color = "strong_text";
    }
    property Color bordercolor {
        des = "Border color";
        note = "If you don't set a border size and style in the \"Presentation\" section, this won't have any effect.";
        s1color = "weak_back";
    }
    property Color main_link {
        des = "Main link color";
        s1color = "page_link";
    }
    property Color main_vlink {
        des = "Main visited link color";
        s1color = "page_vlink";
    }
    property Color main_alink {
        des = "Main active link color";
        s1color = "page_alink";
    }
    property Color main_hlink {
        des = "Main hover link color";
    }
    property use color_comment_bar;
    property Color comment_screened_bgcolor {
        des = "Background color for screened comments";
    }
    property Color comment_screened_fgcolor {
        des = "Text color for screened comments";
    }
    property use control_strip_bgcolor;
    property use control_strip_fgcolor;
    property use control_strip_bordercolor;
    property use control_strip_linkcolor;

    set main_bgcolor               = "#ffffff";
    set under_bgcolor              = "#6666cc";
    set under_fgcolor              = "#ffffff";
    set over_bgcolor               = "#c0c0ff";
    set over_fgcolor               = "#000000";
    set bordercolor                = "#eeeeff";
    set main_link                  = "#000050";
    set main_vlink                 = "#500050";
    set main_alink                 = "#ff00c0";
    set main_hlink                 = "#ff00c0";
    set color_comment_bar          = "#6666cc";
    set comment_screened_bgcolor   = "#4444aa";
    set comment_screened_fgcolor   = "#ffffff";
}

propgroup fonts {
    property use font_base;
    property use font_fallback;
    property string main_font_size {
        des  = "Main font size";
        note = "In terms of em, px or pt.";
    }

    set font_base      = "Courier";
    set font_fallback  = "monospace";
    set main_font_size = "10pt";
}

propgroup images {
    property string page_background_image {
        des = "Background image URL";
    }
    property string page_background_repeat {
        des = "Background image repeat";
        values = "repeat|Repeat|no-repeat|Don't repeat|repeat-x|Repeat across only|repeat-y|Repeat down only";
    }
    property string page_background_position {
        des = "Background image position";
        note = "Does not apply if Background Image Repeat is set to 'Repeat'.";
        values = "top|Top|top left|Top-left|top right|Top-right|center|Center|center left|Center-left|center right|Center-right|bottom|Bottom|bottom left|Bottom-left|bottom right|Bottom-right|left|Left|right|Right";
    }
    property string page_background_scrolling {
        des = "Background image scrolling";
        note = "Not supported in all browsers, but allows for the background image to be in a fixed position when scrolling.";
        values = "scroll|Scroll|fixed|Fixed";
    }
    property string img_btwn_comments {
        des = "URL to an image to be used between your comment links";
        note = "If you specify an image to use, it will replace any text between the comment links.";
    }

    set page_background_image = "";
    set page_background_repeat = "repeat";
    set page_background_position = "center";
    set page_background_scrolling = "scroll";
    set img_btwn_comments = "";
}

propgroup text {
    property string text_sidebar_navigation {
        des = "Title for navigation box";
    }
    property string text_sidebar_links {
        des = "Title for links box";
    }
    property use text_view_recent;
    property use text_view_friends;
    property use text_view_friends_comm;
    property use text_view_archive;
    property use text_view_userinfo;
    property use text_website_default_name;
    property use text_skiplinks_back;
    property use text_skiplinks_forward;
    property use text_entry_prev;
    property use text_entry_next;
    property use text_post_comment;
    property use text_read_comments;
    property use text_post_comment_friends;
    property use text_read_comments_friends;
    property use text_comment_frozen;
    property use text_comment_reply;
    property use text_comment_parent;
    property use text_comment_thread;
    property string text_left_comments {
        des = "Text to be used in front of your entry and comment links";
    }
    property string text_comment_divider {
        des = "Text to be used between your entry and comment links";
        note = "If you specified an image to be used between your comments links in the \"Images\" section, then this option will not have any effect.";
    }
    property string text_right_comments {
        des = "Text to be used at the end of your entry and comment links";
    }
    property use text_meta_location;
    property use text_meta_music;
    property use text_meta_mood;
    property use text_meta_groups;
    property use text_tags;
    property string text_meta_picword {
        des = "Text to label a userpic's keyword";
    }

    property string text_back_to_top {
        des = "Text for back to top link";
    }
    property use text_edit_entry;
    property use text_edit_tags;
    property use text_mem_add;
    property use text_tell_friend;
    property use text_flag;
    property use text_permalink;
    property string free_text {
        des = "Free text";
        rows = 10;
        cols = 25;
        string_mode = "html";
    }
    property string text_tagspage_header {
        des = "Title of the tags page";
    }

    property string datetime_format {
        des = "Date and time format for entries and comments";
    }
    property string time_monthpage_format {
        des = "Time format for the month page";
    }
    property string date_daypage_format {
        des = "Date format for the day page";
    }

    set text_sidebar_navigation    = "Navigation";
    set text_sidebar_links         = "Links";
    set text_view_archive          = "Calendar";
    set text_view_userinfo         = "Info";
    set text_post_comment          = "Post";
    set text_read_comments         = "Read #";
    set text_post_comment_friends  = "Post";
    set text_read_comments_friends = "Read #";
    set text_left_comments         = "";
    set text_comment_divider       = " - ";
    set text_right_comments        = "";
    set text_meta_location         = "location:";
    set text_meta_mood             = "mood:";
    set text_meta_music            = "music:";
    set text_meta_groups           = "groups:";
    set text_tags                  = "tags:";
    set text_meta_picword          = "picword:";
    set text_comment_ipaddr        = "ip:";
    set text_back_to_top           = "Top";
    set text_edit_entry            = "Edit";
    set text_edit_tags             = "Tag";
    set free_text                  = "";
    set text_tagspage_header       = "Visible Tags";
    set datetime_format            = "%%hh%%:%%min%%%%a%%m %%dd%%/%%mm%%/%%yyyy%%";
    set time_monthpage_format      = "%%hh%%:%%min%% %%a%%m";
    set date_daypage_format        = "%%month%% %%dayord%%, %%yyyy%%";
}

propgroup customcss {
    property use include_default_stylesheet;
    property use linked_stylesheet;
    property use custom_css;
}

function prop_init () {
    if ($*control_strip_bgcolor.as_string == "") {
        $*control_strip_bgcolor = $*under_bgcolor;
    }
    if ($*control_strip_fgcolor.as_string == "") {
        $*control_strip_fgcolor = $*under_fgcolor;
    }
    if ($*control_strip_bordercolor.as_string == "") {
        $*control_strip_bordercolor = $*bordercolor;
    }
    if ($*control_strip_linkcolor.as_string == "") {
        $*control_strip_linkcolor = $*main_link;
    }

    $*theme_bgcolor = $*under_bgcolor;
    $*theme_fgcolor = $*under_fgcolor;
    $*theme_bordercolor = $*bordercolor;
    $*theme_linkcolor = $*main_link;
}

function makefontspec() : string {
  var string fontspec;
  if ($*font_base != "") {
    $fontspec = $*font_base->css_string();
    if ($*font_fallback != "none") {
      $fontspec = $fontspec + ",";
    }
  }
  # Don't need to be paranoid about the fallback since it's restricted by the "values" attribute
  if ($*font_fallback != "none") {
    $fontspec = $fontspec + $*font_fallback;
  }
  if($fontspec != "") {
    $fontspec = "font-family: $fontspec;";
  }
  return $fontspec;
}

function print_stylesheet() "Prints the code for the stylesheet" {
var Page p = get_page();
var string fontspec = makefontspec();

"""
body, table, td, div {
  font-size: $*main_font_size;
}
body {
  background-color: $*main_bgcolor;
""";
if(clean_url($*page_background_image) != ""){
"""  background-image: url("$*page_background_image");
     background-position: $*page_background_position;
     background-repeat: $*page_background_repeat;
     background-attachment: $*page_background_scrolling;
""";
}
if ($*content_top_margin != "0") {
"""  margin-top:       $*content_top_margin;""";
} else {
"""  margin-top:       30px;""";
}
"""  margin-bottom:    10px;
  width:            100%;
$fontspec
}
.daycol {
  text-align: center;
  width:      14%;
}
.monthDay {
  background-color: $*over_bgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  color:            $*over_fgcolor;
  font-weight:      bold;
  padding:          4px;
  text-align:       center;
}
.monthDayEvent {
  height:     10px;
  margin-top:  3px;
  text-align: center;
}
.entries {
  margin-bottom: 50px;
  width: 100%;
  text-align: $*entries_text_alignment;
}
.entries td {
  padding: 4px;
}
.entries td.nopad {
  padding: 0px;
}
.metabox {
  background:  $*over_bgcolor;
  color:       $*over_fgcolor;
  border:      $*entryborder_size $*entryborder_style $*bordercolor;
  font-weight: bold;
  width:       50%;
}
.altposter {
  background:    $*over_bgcolor;
  border:        $*entryborder_size $*entryborder_style $*bordercolor;
  border-bottom: 0;
  font-weight:   bold;
  text-align:    center;
  color:         $*main_link;
}
.necorn {
  background:   $*under_bgcolor;
  border-right: $*entryborder_size $*entryborder_style $*bordercolor;
  border-top:   $*entryborder_size $*entryborder_style $*bordercolor;
  color:        $*under_fgcolor;
  font-style:   italic;
  text-align:   right;
}
.sidepad {
  width: 5%;
}
.entrybox {
  background:    $*under_bgcolor;
  border:        $*entryborder_size $*entryborder_style $*bordercolor;
  border-top:    0px;
  border-bottom: 0px;
  color:         $*under_fgcolor;
  margin-bottom: 100px;
  padding-left:  2px;
  padding-right: 2px;
  width:         80%;
}
.entrytext {
  width:    100%;
  overflow: auto;
}
.currbox {
  background: $*over_bgcolor;
  border:     $*entryborder_size $*entryborder_style $*bordercolor;
  color:      $*over_fgcolor;
  margin:     3px;
}
.swcorn {
  background:    $*under_bgcolor;
  border-left:   $*entryborder_size $*entryborder_style $*bordercolor;
  border-bottom: $*entryborder_size $*entryborder_style $*bordercolor;
  color:         $*under_fgcolor;
}
a {
  text-decoration: none;
}
a:link {
  color: $*main_link;
}
a:visited {
  color: $*main_vlink;
}
a:hover, .entrybox a:hover, a:active {
  color:           $*main_hlink;
  text-decoration: underline;
}
a img {
  border: 0px;
}
.secorn {
  background-color: $*under_bgcolor;
  border-bottom:    $*entryborder_size $*entryborder_style $*bordercolor;
  border-right:     $*entryborder_size $*entryborder_style $*bordercolor;
  color:            $*under_fgcolor;
  width:            40%;
}
#navlink, #skiplink {
  text-align: right;
  width:      60%;
}
.nav {
  background-color: $*under_bgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  border-bottom:    0px;
  color:            $*under_fgcolor;
  text-align:       center;
}
.footer {
  border:  0px;
  margin:  0px;
  padding: 0px;
  width:   100%;
}
.footer .back {
  text-align:left;
  width:     33%;
}
.footer .top {
  text-align:center;
  width:     33%;
}
.footer .next {
  text-align:right;
  width:     33%;
}
#postform select, #postform input, #postform textarea {
  background-color: $*under_bgcolor;
  color:            $*under_fgcolor;
}
#postform {
  background-color: $*over_bgcolor;
  color:            $*over_fgcolor;
}
.dis {
  background-color: $*under_bgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  text-align:       center;
  color:            $*under_fgcolor;
}
.jointed {
  background-color: $*over_bgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  color:            $*over_fgcolor;
  text-align:       right;
  font-weight:      bold;
  width:            60%;
}
.joint {
  background-color: $*under_bgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  border-bottom:    0px;
  color:            $*under_fgcolor;
  text-align:       center;
  font-weight:      bold;
  width:            85%;
}
.dissed {
  background-color: $*over_bgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  color:            $*over_fgcolor;
  text-align:       right;
  font-weight:      bold;
  width:            60%;
}

.pic {
  border:      $*entryborder_size $*entryborder_style $*bordercolor;
  font-weight: bold;
  text-align:  center;
  background:  $*over_bgcolor;
  color:       $*over_fgcolor;
  margin:      2px;
}""";

var Color color_comment_bar_two = $*color_comment_bar->clone();
$color_comment_bar_two->lightness(($color_comment_bar_two->lightness() + 255) / 2);
"""
.comments {
  background-color: $*over_bgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  color:            $*over_fgcolor;
  float:            right;
  font-weight:      bold;
  height:           50px;
  width:            50%;
}
.comments_normal_one {
  background-color: $*color_comment_bar;
}
.comments_normal_two {
  background-color: $color_comment_bar_two;
}
.comments_screened {
  color: $*comment_screened_fgcolor;
  background-color: $*comment_screened_bgcolor;
}
.entry_comments {
  background-color: $*over_bgcolor;
  color:            $*over_fgcolor;
  border:           $*entryborder_size $*entryborder_style $*bordercolor;
  width:            100%;
}
#commenttext {
  width: 90%;
}
""";
if ($*transparent or $*transparent_borders) {
"""
.monthDay, .metabox, .altposter, .necorn, .entrybox, .currbox, .swcorn, .secorn, .nav, #postform, .dis, .jointed, .joint, .dissed, .pic, .comments, .comments_normal_one, .comments_normal_two, .comments_screened, .entry_comments {""";
print ($*transparent) ? "background: transparent !important;" : "";
print ($*transparent_borders) ? "border: 0;" : "";
"""}
""";
}

print_custom_control_strip_css();
}

function num_comments_in_thread (Comment[] comments)  : int {
  var int total = 0;
  foreach var Comment c ($comments) {
    $total = $total + 1;
    if (size $c.replies > 0) {
      $total = $total + num_comments_in_thread($c.replies);
    }
  }
  return $total;
}

function print_disjointed_box(string dis, string jointed) {
print safe """
<br />
<br />
<table cellspacing="0" cellpadding="4" style="width:100%;">
  <tr>
    <td style="width:15%;">&nbsp;</td>
    <td style="width:85%; border-bottom:0px; font-weight:bold;" colspan="2" class="dis">
      $dis
    </td>
  </tr>
  <tr>
    <td colspan="2" rowspan="2" class="jointed">
      $jointed
    </td>
    <td class="secorn">&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
  </tr>
</table>
""";
}

function print_dis_open() {
"""
<br />
<br />
<table cellspacing="0" cellpadding="4" style="width:100%;">
  <tr>
    <td style="width:100%;" colspan="2" class="dis">
""";
}

function print_dis_close() {
"""
    </td>
  </tr>
</table>
""";
}

function print_dis(string content) {
  print_dis_open();
  print safe """$content""";
  print_dis_close();
}

function print_jointed_open() "Prints the code to open a 'jointed' box" {
"""
<br />
<br />
<table cellspacing="0" cellpadding="4" style="width:100%;">
  <tr>
    <td style="width:100%;" colspan="2" class="jointed">
""";
}

function print_jointed_close() "Print the code to close a 'jointed' box" {
"""
    </td>
  </tr>
</table>
""";
}

function print_jointed(string content) {
  print_jointed_open();
  print safe """$content""";
  print_jointed_close();
}

function print_jointdissed_box(string joint, string dissed) {
print safe """
<table style="width:80%; margin-top:2em;" cellpadding="4" cellspacing="0">
  <tr>
    <td class="joint" colspan="2">$joint</td>
    <td style="width:15%;">&nbsp;</td>
  </tr>
  <tr>
    <td class="swcorn" style="width:40%;">&nbsp;</td>
    <td class="dissed" colspan="2" rowspan="2">$dissed</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
  </tr>
</table>
""";
}

function print_layout_disjointed_box_top_left(string dis, string altposter) {
if ($dis == "") {
  $dis = "&nbsp;";
}
print safe """
<table cellspacing="0" class="entries">
  <tr>
    <td colspan="2" rowspan="2" class="metabox">$dis</td>
    <td class="nopad" valign="bottom">$altposter</td>
    <td>&nbsp;</td>
  </tr>
""";
}

function print_layout_disjointed_box_top_left(string dis) {
  print_layout_disjointed_box_top_left($dis, "");
}

function print_layout_disjointed_box_top_right(string date) {
if ($date == "") {
  $date = "&nbsp;";
}
print safe """
  <tr>
    <td class="necorn">$date</td>
    <td>&nbsp;</td>
  </tr>
""";
}

function print_layout_disjointed_box_top_right(string date, bool screened) {
if ($date == "") {
  $date = "&nbsp;";
}
"""
  <tr>
""";
print safe ($screened) ? """<td class="necorn comments_screened">$date</td>""" : """<td class="necorn">$date</td>""";
"""
    <td>&nbsp;</td>
  </tr>
""";
}

function print_layout_disjointed_box_middle_open() {
"""
  <tr>
    <td class="sidepad">&nbsp;</td>
    <td colspan="2" class="entrybox">
""";
}

function print_layout_disjointed_box_middle_open(bool screened) {
"""
  <tr>
    <td class="sidepad">&nbsp;</td>
""";
print ($screened) ? """<td colspan="2" class="entrybox comments_screened">""" : """<td colspan="2" class="entrybox">""";
}

function print_layout_disjointed_box_middle_close() {
"""
    </td>
    <td class="sidepad">&nbsp;</td>
  </tr>
""";
}

function print_layout_disjointed_box_bottom_open() {
"""
  <tr>
    <td>&nbsp;</td>
    <td class="swcorn">&nbsp;</td>
    <td colspan="2" rowspan="2" class="metabox">
""";
}

function print_layout_disjointed_box_bottom_open(bool screened) {
"""
  <tr>
    <td>&nbsp;</td>
""";
    print ($screened) ? """<td class="swcorn comments_screened">&nbsp;</td>""" : """<td class="swcorn">&nbsp;</td>""";
"""
    <td colspan="2" rowspan="2" class="metabox">
""";
}

function print_layout_disjointed_box_bottom_close() {
"""
    </td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
</table>
""";
}

function print_layout_disjointed_box_open(string dis, string date) {
  print_layout_disjointed_box_top_left($dis);
  print_layout_disjointed_box_top_right($date);
  print_layout_disjointed_box_middle_open();
}

function print_layout_disjointed_box_open(string dis, string altposter, string date) {
  print_layout_disjointed_box_top_left($dis, $altposter);
  print_layout_disjointed_box_top_right($date);
  print_layout_disjointed_box_middle_open();
}

function print_layout_disjointed_box_open(string dis, string altposter, string date, bool screened) {
  print_layout_disjointed_box_top_left($dis, $altposter);
  print_layout_disjointed_box_top_right($date, $screened);
  print_layout_disjointed_box_middle_open($screened);
}

function print_layout_disjointed_box_close(string jointed) {
  if($jointed == "") {
    $jointed = "&nbsp;";
  }
  print_layout_disjointed_box_middle_close();
  print_layout_disjointed_box_bottom_open();
  print safe $jointed;
  print_layout_disjointed_box_bottom_close();
}

function print_layout_disjointed_box(string dis, string date, string content, string jointed) {
  print_layout_disjointed_box_open($dis, $date);
  print safe $content;
  print_layout_disjointed_box_close($jointed);
}

function server_sig() {
  print_disjointed_box("Powered by", """<a href="$*SITEROOT/">$*SITENAME</a>""");
}

function EntryLite::lay_make_id() : string {
  var string id = "";
  if($this isa Comment) {
    var Comment c = $this as Comment;
    $id = "t$c.talkid";
  }
  if($this isa Entry) {
    var Entry e = $this as Entry;
    $id = "$e.journal.username$e.itemid";
  }
  return $id;
}

function EntryLite::lay_make_icon() : string {
  var string icon = "";
  if($this isa Comment) {
    var Comment c = $this as Comment;
    if(defined $c.subject_icon) {
      $icon = $c.subject_icon + " ";
    }
  }
  if($this isa Entry) {
    var Entry en = $this as Entry;
    if(defined $en.security_icon) {
      $icon = $en.security_icon + " ";
    }
  }
  return $icon;
}

function EntryLite::lay_entry_nav() : string {
  var Page   p       = get_page();
  var string poster  = $.poster.username != "" ? $.poster + "" : """<i class="noposter">$*text_poster_anonymous</i>""";
  var string journal = $.journal + " ::";
  var string icon    = "";
  var string subject = striphtml($.subject);
  var string url     = "";
  var string count   = "";

  if($this isa Comment) {
    var Comment c = $this as Comment;
    $journal      = "";
    if(size ($c.replies) > 0) {
      $count = num_comments_in_thread($c.replies) + "";
    }
  }
  if($this isa Entry) {
    var Entry en = $this as Entry;
    if($.poster->equals($.journal)) {
      $journal = "";
    }
    if($p.view == "recent" and $.journal.journal_type != "C") {
      $poster = "";
    }
    if($en.comments.count > 0 or $en.comments.screened) {
      $count = $en.comments.count + "";
    }
  }
  if($subject == "") {
    $subject = """<i class="nosubject">$*text_nosubject</i>""";
  }
  $icon    = $this->lay_make_icon();
  $url     = "#" + $url + $this->lay_make_id();
  $subject = """<a href="$url">$subject</a>""";
  if($count != "") {
    $count = """ [<a href="$.permalink_url">+$count</a>]""";
  }
  return """<div style="white-space: nowrap;">$journal$poster $icon$subject$count</div>""";
}

function EntryLite::lay_make_altposter(Color bgcolor, Color fgcolor) : string {
  var Page   p            = get_page();
  var string posternames  = "";
  var string poster       = "";
  var string poster_base  = "";
  var string poster_name  = "";
  var string journal      = "";
  var string journal_base = "";
  var string journal_name = "";
  if($.poster.username != "") {
    $poster_base = $.poster->base_url();
    $poster      = """<a href="$poster_base" style="color: $fgcolor;">$.poster.username</a>""";
  } else {
    $poster = """<i class="noposter" style="color: $fgcolor;">$*text_poster_anonymous</i>""";
  }
  if((not $.poster->equals($.journal)) and ($.depth == 0)) {
    $journal_base = $.journal->base_url();
    $journal = """<a href="$journal_base" style="color: $fgcolor;">$.journal.username</a>""";
  }
  if($p.view == "friends" or (not $.poster->equals($.journal)) or $.depth > 0){
    $posternames = $poster;
    if($journal != "") {
      $posternames = """$journal - ($posternames)""";
    }
  }

  if($posternames != "") {
    $posternames = """<table cellspacing="0" style="float: right;"><tr><td>&nbsp;</td><td class="altposter" style="background-color: $bgcolor;">$posternames</td></tr></table>""";
  }

  return $posternames;
}

function EntryLite::lay_make_userpic() : string {
  var Page   p            = get_page();
  var string alttext      = "";
  var string poster_name  = "";
  var string journal_name = "";
  var string userpic      = "";
  if($.poster.username != "") {
    $poster_name = $.poster.name;
  } else {
    $poster_name = $*text_poster_anonymous;
  }
  $alttext = $poster_name;
  if((not $.poster->equals($.journal)) and ($.depth == 0)) {
    $journal_name = $.journal.name;
    $alttext      = $alttext + " posting in $journal_name";
  }
  if($.metadata{"picture_keyword"} != "") {
    $alttext = $alttext + ": " + $.metadata{"picture_keyword"};
  }
  if(defined $.userpic) {
    var string div_width = $.userpic.width + "px";
    $userpic = """<img src="$.userpic.url" width="$.userpic.width" height="$.userpic.height" alt="$alttext" title="$alttext" />""";
    $userpic = """<div class="pic" style="text-align: center; width: $div_width;">$userpic</div>""";
  }


  return $userpic;
}

function EntryLite::lay_print_metadata() {
  var string   metadata = "";
  var string   icon     = "";
  var string   val      = "";
  var string   tags     = "";
  var string   text     = "";
  var string{} texts    = {
                           "location"        => $*text_meta_location,
                           "mood"            => $*text_meta_mood,
                           "music"           => $*text_meta_music,
                           "groups"          => $*text_meta_groups,
                           "picture_keyword" => $*text_meta_picword,
                           "poster_ip"       => $*text_comment_ipaddr,
                          };

  if($this isa Entry) {
    var Entry en = $this as Entry;
    if(defined $en.mood_icon) {
      var Image  i   = $en.mood_icon;
      var string alt = $.metadata{"mood"};
      $icon = """<img src="$i.url" width="$i.width" height="$i.height" alt="$alt" title="$alt" /> """;
    }
    if(size($en.tags) > 0 and $*tags_aware) {
      var int count = 0;
      foreach var Tag t ($en.tags) {
        var string url  = $t.url;
        var string text = $t.name;
        $tags = $tags + """<a href="$url">$text</a>""";
        $count++;
        if($count < size($en.tags)) {
          $tags = $tags + ", ";
        }
      }
      if($tags != "") {
        $tags = """<div><span style="font-weight:bold;">$*text_tags</span> $tags</div>""";
      }
    }
  }

  foreach var string k ($.metadata) {
    $val  = $.metadata{$k};
    $text = $texts{$k} != "" ? $texts{$k} : $k;
    if($val != "") {
      if($k == "mood") {
        $val = "$icon$val";
      }
      $metadata = $metadata + """<div><span style="font-weight:bold;">$text</span> $val</div>""";
    }
  }
  if($metadata != "" or $tags != "") {
    $metadata = """<table class="currbox"><tr><td>$metadata$tags</td></tr></table>""";
  }
  print safe $metadata;
}

function EntryLite::print_linkbar() {
  var Page   p       = get_page();
  var string linkbar = "$*text_left_comments";

  var string url  = "";
  var string text = "";

  var string btwn_comments = "";
  if (clean_url($*img_btwn_comments) != "") {
      $btwn_comments = """ <img src="$*img_btwn_comments" alt="" /> """;
  } else {
      $btwn_comments = "$*text_comment_divider";
  }

  if($this isa Comment) {
    var Comment c      = $this as Comment;
    var string  reply  = "";
    var string  parent = "";
    var string  thread = "";
    if($c.frozen) {
      $reply = "$*text_comment_frozen$btwn_comments";
    } else {
      $url   = $c.reply_url;
      $text  = $*text_comment_reply;
      $reply = """<a href="$url">$text</a>$btwn_comments""";
    }
    if($c.parent_url != "") {
      $url    = $c.parent_url;
      $text   = $*text_comment_parent;
      $parent = """<a href="$url">$text</a>$btwn_comments""";
    }
    if($c.thread_url != "") {
      $url    = $c.thread_url;
      $text   = $*text_comment_thread;
      $thread = """<a href="$url">$text</a>$btwn_comments""";
    }
    $linkbar = $linkbar + $reply + $parent + $thread;
  }
  if($this isa Entry) {
    var Entry en = $this as Entry;
    if ($en.comments.enabled) {
      if ($en.comments.count > 0 or $en.comments.screened) {
        $url  = $en.comments.read_url;
        $text = get_plural_phrase($en.comments.count, ("text_read_comments" + ($p.view == "friends" ? "_friends" : "")));
        $linkbar = $linkbar + """<a href="$url">$text""";
        if($en.comments.screened) {
          $text    = $*text_month_screened_comments;
          $linkbar = $linkbar + """ $text""";
        }
        $linkbar = $linkbar + """</a>$btwn_comments""";
      }
    }

    if ($en.comments.maxcomments) {
      $linkbar = $linkbar + "$*text_max_comments$btwn_comments";
    } else {
      $url  = $en.comments.post_url;
      $text = get_plural_phrase(0, ("text_post_comment" + ($p.view == "friends" ? "_friends" : "")));
      $linkbar = $linkbar + """<a href="$url">$text</a>$btwn_comments""";
    }
  }
  foreach var string link_key ($.link_keyseq) {
    var Link link = $this->get_link($link_key);
    $url          = $link.url;
    $text         = $link.caption;
    if($url != "") {
      $linkbar = $linkbar + """<a href="$url">$text</a>$btwn_comments""";
    }
  }
  $url     = $.permalink_url;
  $text    = $*text_permalink;
  $linkbar = $linkbar + """<a href="$url">$text</a>""" + $*text_right_comments;
  print safe $linkbar;
}

function Page::lay_get_skiplinks() : string{} {
  var string prev      = "";
  var string prev_url  = "";
  var string prev_text = "";
  var string next      = "";
  var string next_url  = "";
  var string next_text = "";

  if($this isa RecentPage) {
    var RecentPage rp = $this as RecentPage;
    var RecentNav  rn = $rp.nav;
    if($rn.backward_url != "") {
      $prev_url  = $rn.backward_url;
      $prev_text = get_plural_phrase($rn.backward_count, "text_skiplinks_back");
    }
    if($rn.forward_url != "") {
      $next_url  = $rn.forward_url;
      $next_text = get_plural_phrase($rn.forward_count, "text_skiplinks_forward");
    }
  }

  if($this isa YearPage) {
    var YearPage yp               = $this as YearPage;
    var int      index            = 0;
    var int      currentYearIndex = 0;
    foreach var YearYear y ($yp.years) {
      if ($y.displayed) {
        $currentYearIndex = $index;
      }
      $index = $index + 1;
    }
    if($currentYearIndex > 0) {
      $prev_url  = $yp.years[$currentYearIndex - 1].url;
      $prev_text = $yp.years[$currentYearIndex - 1].year + "";
    }
    if($currentYearIndex < (size($yp.years) - 1)) {
      $next_url  = $yp.years[$currentYearIndex + 1].url;
      $next_text = $yp.years[$currentYearIndex + 1].year + "";
    }
  }

  if($this isa MonthPage) {
    var MonthPage mp = $this as MonthPage;
    if($mp.prev_url != "") {
      $prev_url  = $mp.prev_url;
      $prev_text = $mp.prev_date->date_format($*lang_fmt_month_long);
    }
    if($mp.next_url != "") {
      $next_url  = $mp.next_url;
      $next_text = $mp.next_date->date_format($*lang_fmt_month_long);
    }
  }

  if($this isa DayPage) {
    var DayPage dp = $this as DayPage;
    if($dp.prev_url != "") {
      $prev_url  = $dp.prev_url;
      $prev_text = $dp.prev_date->date_format($*date_daypage_format);
    }
    if($dp.next_url != "") {
      $next_url  = $dp.next_url;
      $next_text = $dp.next_date->date_format($*date_daypage_format);
    }
  }

  if($this isa EntryPage or $this isa ReplyPage) {
    var Entry e;
    if($this isa EntryPage) {
      var EntryPage ep = $this as EntryPage;
      $e               = $ep.entry;
    }
    if($this isa ReplyPage) {
      var ReplyPage rp = $this as ReplyPage;
      $e               = $rp.entry;
    }
    var Link      pl = $e->get_link("nav_prev");
    var Link      nl = $e->get_link("nav_next");
    $prev_url        = $pl.url;
    $prev_text       = $*text_entry_prev;
    $next_url        = $nl.url;
    $next_text       = $*text_entry_next;
  }

  if($prev_url != "") {
    $prev = """<a href="$prev_url">$prev_text</a>""";
  }
  if($next_url != "") {
    $next = """<a href="$next_url">$next_text</a>""";
  }

  return {"prev" => $prev, "next" => $next};
}

function Page::lay_sidebar_view_summary() : string {
  var string      return  = "";
  var EntryLite[] entries = [];
  var string      url     = "";
  var string      text    = "";
  if($this isa RecentPage) {
    var RecentPage rp = $this as RecentPage;
    $entries = $rp.entries;
  }
  if($this isa YearPage) {
    var YearPage yp = $this as YearPage;
    foreach var YearMonth m ($yp.months) {
      if($m.has_entries) {
        $url    = "#month$m.month";
        $text   = $m->month_format();
        $return = $return + """<a href="$url">$text</a><br />""";
      }
    }
  }
  if($this isa MonthPage) {
    var MonthPage mp = $this as MonthPage;
    foreach var MonthDay d ($mp.days) {
      if($d.has_entries) {
        $url    = "#day$d.day";
        $text   = $d.date->date_format($*date_daypage_format);
        $return = $return + """<a href="$url">$text</a><br />""";
      }
    }
  }
  if($this isa DayPage) {
    var DayPage dp = $this as DayPage;
    $entries = $dp.entries;
  }
  if($this isa EntryPage) {
    var EntryPage ep = $this as EntryPage;
    $entries = $ep.comments;
  }
  if(size ($entries) > 0) {
    foreach var EntryLite e ($entries) {
      $return = $return + $e->lay_entry_nav();
    }
  }
  return $return;
}

function Page::lay_print_navigation() {
  var string   nav       = "";
  var string{} skiplinks = $this->lay_get_skiplinks();
  var string   prev      = $skiplinks{"prev"};
  var string   next      = $skiplinks{"next"};

  if($prev != "" or $next != "") {
    $nav = """<span style="white-space: nowrap;">""";
    $nav = $nav + $prev;
    if($prev != "" and $next != "") {
      $nav = $nav + "<br />";
    }
    $nav = $nav + $next;
    $nav = $nav + "</span>";
    print_jointdissed_box($*text_sidebar_navigation, $nav);
  }
}

function Page::lay_footer() : string {
  var string   return    = "";
  var string{} skiplinks = $this->lay_get_skiplinks();
  var string   prev      = $skiplinks{"prev"};
  var string   next      = $skiplinks{"next"};
  var string   top       = """<a href="#top">$*text_back_to_top</a>""";

  if($prev != "" or $next != "") {
    $prev = $prev != "" ? $prev : "&nbsp;";
    $next = $next != "" ? $next : "&nbsp;";
    $prev = """<td class="back">$prev</td>""";
    $next = """<td class="next">$next</td>""";
  }

  $return = """<table border="0" class="footer"><tr>$prev<td class="top">$top</td>$next</tr></table>""";
  return $return;
}

function print_sidebar_calendar() "how to print the calendar for the sidebar" {
  var string calendar;
  var Page p = get_page();
  var YearMonth m = $p->get_latest_month();
  var string month = "<span style='white-space:nowrap;'><a href='" + $p.journal->base_url() + "/$m.year/" + $m->month_format("%%mm%%") +"/'>" + $m->month_format("%%month%%") + "</a> " + "<a href='" + $p.journal->base_url() + "/$m.year/'>" + $m->month_format("%%yyyy%%") + "</a>" + "</span>";
  if($m.has_entries) {
    $calendar = """<table class="calendar">""";
    var YearWeek[] theWeeks = $m.weeks;
    foreach var YearWeek w ($theWeeks) {
      $calendar = $calendar + "<tr>";
      var YearDay[] theDays = $w.days;
      var int pre = $w.pre_empty;
      if($pre > 0) {
        $calendar = $calendar + """<td colspan="$pre" valign="top">&nbsp;</td>""";
      }
      foreach var YearDay d ($theDays) {
        if ($d.num_entries) {
          $calendar = $calendar + """<td valign="top" class="day_with_posts"><a href="$d.url">$d.day</a></td>""";
        } else {
          $calendar = $calendar + """<td valign="top" class="day">$d.day</td>""";
        }
      }
      $calendar = $calendar + "</tr>\n";
    }
    $calendar = $calendar + "</table>";
  }
  if ($calendar != "") {
    print_jointdissed_box($month, $calendar);
  }
}

function print_sidebar_linklist() {
  var Page p = get_page();
  $p->print_linklist();
}

function print_sidebar_navigation() "print the navigation box for the sidebar that corresponds to each page type" {
  var Page p = get_page();
  $p->lay_print_navigation();
}

function print_sidebar_profile() {
  var Page   p    = get_page();
  var string url  = "";
  var string text = "";
"""
<table cellspacing="0" cellpadding="4" style="width:100%;">
  <tr>
    <td style="width:15%;">&nbsp;</td>
    <td style="width:85%;" colspan="2" class="nav">
""";
  if(defined $p.journal.default_pic) {
    var string alttext = $p.journal.name;
    """<a href="$p.journal.userpic_listing_url"><img src="$p.journal.default_pic.url" height="$p.journal.default_pic.height" width="$p.journal.default_pic.width" alt="$alttext" title="$alttext" /><br /></a>\n""";
  }
  """$p.journal</td>
  </tr>
  <tr>
    <td colspan="2" rowspan="2" class="metabox" id="navlink">
""";
  foreach var string v ($p.views_order) {
    $url  = $p.view_url{$v};
    $text = lang_viewname($v);
    """<a href="$url">$text</a><br />\n""";
  }
  if($p.journal.website_url != ""){
    $url  = $p.journal.website_url;
    $text = $p.journal.website_name != "" ? $p.journal.website_name : $*text_website_default_name;
    print safe """<a href="$url">$text</a><br />\n""";
  }
  if($p isa YearPage) {
    var YearPage yp = $p as YearPage;
    $yp->print_year_links();
  }
  if ($*counter_code != "") {
    "$*counter_code\n";
  }
  """
    </td>
    <td class="secorn">&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
  </tr>
</table>
""";
}

function print_sidebar_summary() {
  var Page   p      = get_page();
  var string joint  = "";
  var string dissed = "";

  $joint  = $p.view != "archive" ? $p.view : "year";
  $dissed = $p->lay_sidebar_view_summary();


  if($joint != "" and $dissed != ""){
    print_jointdissed_box($joint, $dissed);
  }
}

function print_free_text() {
  if($*free_text != ""){
    print_dis_open();
    """$*free_text""";
    print_dis_close();
  }
}

function print_sidebar() {

  # PROFILE
  print_sidebar_profile();

  # LINKLIST
  print_sidebar_linklist();

  # NAVIGATION
  print_sidebar_navigation();

  # CALENDAR
  if($*show_calendar){
    print_sidebar_calendar();
  }

  # FREE TEXT
  if($*show_free_text){
    print_free_text();
  }

  # SUMMARY
  if($*show_summary){
    print_sidebar_summary();
  }
}

function print_entry(EntryLite e, Color bgcolor, Color fgcolor) {
  var string id            = $e->lay_make_id();
  var string poster        = $e.poster.username != "" ? $e.poster + "" : """<i class="noposter">$*text_poster_anonymous</i>""";
  var string journal       = $e.journal + "";
  var string icon          = $e->lay_make_icon();
  var string subject       = $e.subject != "" ? $e.subject : """<i class="nosubject">$*text_nosubject</i>""";
  var string altposter     = $e->lay_make_altposter($bgcolor, $fgcolor);
  var string date          = "";
  var string userpic       = $e->lay_make_userpic();
  var bool metadata_exists = size $e.metadata > 0;
  var bool tags_exist      = size $e.tags > 0;
  var bool userpic_exists  = $userpic != "";
  $date    = """<div style="float: right;">""" + $e->time_display($*datetime_format, "none") + """</div>""";
  $subject = """<a name="$id" id="$id"></a>$icon$subject""";

  if ($e isa Comment) {
    var Comment c = $e as Comment;
    print_layout_disjointed_box_open($subject, $altposter, $date, $c.screened);
  } else {
    print_layout_disjointed_box_open($subject, $altposter, $date);
  }

  """<div class="entrytext">""";

  if($userpic != "") {
    """<div style="float: right;">$userpic</div>""";
  }

  $e->print_text();
  $e->lay_print_metadata();

  """</div>""";

  print_layout_disjointed_box_middle_close();
  if ($e isa Comment) {
    var Comment c = $e as Comment;
    print_layout_disjointed_box_bottom_open($c.screened);
  } else {
    print_layout_disjointed_box_bottom_open();
  }
  $e->print_linkbar();
  print_layout_disjointed_box_bottom_close();
}

function Page::print_entry(Entry e) {
  var Color bgcolor = $*over_bgcolor;
  var Color fgcolor = $*over_fgcolor;
  if($this isa FriendsPage) {
    var FriendsPage fp = $this as FriendsPage;
    $bgcolor = $fp.friends{$e.journal.username}.bgcolor;
    $fgcolor = $fp.friends{$e.journal.username}.fgcolor;
  }
  print_entry($e, $bgcolor, $fgcolor);
}

function Page::print_linklist() {
  var Page p = get_page();
  var string return = "";
  if (size $p.linklist <= 0) {
    return;
  } elseif (not $*linklist_support) {
    return;
  }

  var bool section_open = false;

  foreach var UserLink l ($p.linklist) {
    if ($l.title) {
      if ($l.is_heading) {
        if ($section_open) {
          $return = $return + "<br />";
        }
        $return = $return + """<span style="font-weight: bold;">$l.title</span><br />""";
        $section_open = true;
      } else {
        $return = $return + """<a href="$l.url">$l.title</a><br />""";
      }
    }
  }
  print_jointdissed_box($*text_sidebar_links, $return);
}

function RecentPage::print_body() {
  var Entry[] entries = $.entries;
  if ($*reverse_entries_recent) { $entries = reverse $entries; }

  foreach var Entry e ($entries) {
    $this->print_entry($e);
    if ($e->viewer_sees_ebox()) {
        """<div align="center" style="margin-bottom: 50px;">""";
        $e->print_ebox();
        "</div>";
    }
  }
}

function DayPage::print_body() {
  var Entry[] entries = $.entries;
  if ($*reverse_entries_day) { $entries = reverse $entries; }

  foreach var Entry e ($entries) {
    $this->print_entry($e);
    if ($e->viewer_sees_ebox()) {
        """<div align="center" style="margin-bottom: 50px;">""";
        $e->print_ebox();
        "</div>";
    }
  }
}

function YearPage::print_year_links() {
  var string url  = "";
  var string text = "";
  foreach var YearYear y ($.years) {
    $url  = $y.url;
    $text = $y.year + "";
    """<a href="$url">$text</a><br />\n""";
  }
}

function YearPage::print_month(YearMonth m) {
  if (not $m.has_entries) { return; }

  var string days = "";

  $days = $days + """<a name="month$m.month" id="month$m.month"></a><table style="width:90%;" align="center" cellpadding="1" cellspacing="0" style="margin-bottom:4px;">\n<tr>""";
  foreach var int d (weekdays()) {
    $days = $days + "<td class='daycol'>"+$*lang_dayname_short[$d]+"</td>\n";
  }
  $days = $days + "</tr>\n";
  foreach var YearWeek w ($m.weeks) {
    $days = $days + """<tr valign="top" style="height: 2em;">\n""";
    if ($w.pre_empty > 0) {
      $days = $days + """<td class="emptyday" colspan="$w.pre_empty">&nbsp;</td>\n""";
    }

    foreach var YearDay d ($w.days) {
      $days = $days + """<td valign="top">\n""";
      $days = $days + """<div class="monthDay">$d.day</div>\n""";
      if ($d.num_entries > 0) {
        $days = $days + """<div class="monthDayEvent"><a href="$d.url">$d.num_entries</a></div>\n""";
      }
      $days = $days + """</td>\n""";
    }
    if ($w.post_empty > 0) {
      $days = $days + """<td colspan="$w.post_empty">&nbsp;</td>\n""";
    }
    $days = $days + "</tr>";
  }
  $days = $days + "</table>";
  print_layout_disjointed_box("""<a id="$.journal.username$m.month" name="$.journal.username$m.month"></a>""" + $m->month_format(), "", $days, """<a href="$m.url">$*text_view_month</a>""");
}

function YearPage::print_body() {
  foreach var YearMonth m ($.months) {
    $this->print_month($m);
  }
}

function MonthPage::print_body {
  "<form method='post' action='$.redir.url'><center><table class='dis' style='white-space:nowrap;'><tr><td>";
  $.redir->print_hiddens();
  if ($.prev_url != "") { "[<a href='$.prev_url'>&lt;&lt;&lt;</a>]\n"; }
  if (size $.months > 1) {
    "<select name='redir_key'>\n";
    foreach var MonthEntryInfo mei ($.months) {
      var string sel;
      if ($mei.date.year == $.date.year and $mei.date.month == $.date.month) {
        $sel = " selected='selected'";
      }
      "<option value='$mei.redir_key'$sel>" + $mei.date->date_format($*lang_fmt_month_long) + "</option>";
    }
    "</select>\n<input type='submit' value='View' />";
  }
  if ($.next_url != "") { "\n[<a href='$.next_url'>&gt;&gt;&gt;</a>]\n"; }
  "</td></tr></table></center></form>\n";
  """<div style="width:500px; margin-left:25%;">""";
  foreach var MonthDay d ($.days) {
    var string joint  = "";
    var string dissed = "";
    if ($d.has_entries) {
      $joint = $joint + "<a id=\"day$d.day\" name=\"day$d.day\" href=\"$d.url\"><b>";
      $joint = $joint + lang_ordinal($d.day);
      $joint = $joint + "</b></a>\n";
      foreach var Entry e ($d.entries) {
        $dissed = $dissed + $e.time->time_format($*time_monthpage_format) + ": ";
        if (not $e.poster->equals($e.journal)) {
          $dissed = $dissed + $e.poster + " ";
        }
        $dissed = $dissed + "$e.security_icon";
        if ($e.subject != "") {
          $dissed = $dissed + " <a href=\"$e.permalink_url\">" + $e->plain_subject() + "</a>";
        } else {
          $dissed = $dissed + " <a href=\"$e.permalink_url\" style=\"font-style: italic;\">($*text_nosubject)</a>";
        }
        if ($e.comments.count > 0) {
          $dissed = $dissed + " - " + get_plural_phrase($e.comments.count, "text_read_comments");
        }
        if ($e.comments.screened) {
          $dissed = $dissed + " <b>$*text_month_screened_comments</b>";
        }
        $dissed = $dissed + "<br />\n";
      }
      print_jointdissed_box($joint, $dissed);
    }
  }
  "</div>";
}

function EntryPage::print_body() {
  $this->print_entry($.entry);
  if($.entry.comments.enabled) {
    "<hr />";
    if($.multiform_on) {
      $this->print_multiform_start();
    }
    if(not $.comment_pages.all_subitems_displayed) {
      $.comment_pages->print();
      "<hr />";
    }
    $this->print_comments($.comments);
    if(not $.comment_pages.all_subitems_displayed) {
      "<hr />";
      $.comment_pages->print();
    }
    if($.multiform_on) {
      "<hr />";
      print_dis_open();
      $this->print_multiform_actionline();
      print_dis_close();
      $this->print_multiform_end();
    }
  }
}

function EntryPage::print_comment(Comment c) {
  print_entry($c, null Color, null Color);
}

function EntryPage::print_comments (Comment[] cs) {
  if (size $cs == 0) { return; }
  foreach var Comment c ($cs) {
    var int indent = ($c.depth - 1) * 25;
    "<div style='margin-left: ${indent}px; margin-top: 5px'>\n";
    if ($c.full) {
      $this->print_comment($c);
    } else {
      $this->print_comment_partial($c);
    }
    "</div>";
    $this->print_comments($c.replies);
  }
}

function ReplyPage::print_body() {
  $this->print_entry($.entry);
  "<hr />";
  if($.replyto.depth > 0) { # If we're replying to a comment
    print_entry($.replyto, null Color, null Color);
    "<hr />";
  }
  $.form->print();
}

function TagsPage::print_body() {
  var string subject = $*text_tagspage_header;
  var Entry  e       = new Entry;
  $e.time = $.time;
  var string date    = $e->time_display($*datetime_format, "none");
  var string tags    = "";

  if(size($this->visible_tag_list()) > 0) {
    $tags = $tags + "<ul>";
    foreach var TagDetail td ($this->visible_tag_list()) {
      var string url  = $td.url;
      var string text = $td.name;
      var string uses = get_plural_phrase($td.use_count, "text_tag_uses");
      $tags = $tags + """<li><a href="$url">$text</a> - $uses</li>""";
    }
    $tags = $tags + "</ul>";
  }

  print_layout_disjointed_box($subject, $date, $tags, "");
}

function Page::print () {
  var string title = $this->title();

"""
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en" lang="en" dir="ltr">
<head>
""";
$this->print_head();
$this->print_stylesheets();
print safe """<title>$title</title>
</head>
<body>""";

$this->print_control_strip();

"""<table style="width: 100%;">""";
"<tr>";
if ($*sidebar_align == "left") {
"""
    <td valign='top' style='width: 200px;'>""";

print_sidebar();

server_sig();

"""
    </td>
""";
} else {
if (viewer_sees_vbox()) {
    """<td width="20%" valign="top"><div style="float: right;">""";
    $this->print_vbox();
    """</div></td>""";
}
}
"""
    <td valign="top" style="width: 100%;"><a name="top" id="top"></a>
""";
if (viewer_sees_hbox_top()) {
    """
      <table align="$*entries_alignment">
        <tr>
          <td align="$*entries_alignment"><div style="text-align: center;">""";
          $this->print_hbox_top();
          """</div></td>
        </tr>
      </table>
    """;
}
print safe """
      <table border="0" align="$*entries_alignment" style="width: $*entries_width;">
        <tr>
          <td valign="top" align="$*entries_alignment" style="width: $*entries_width;">""";

$this->print_body();

"""
          </td>
        </tr>
      </table>
""";

if($*show_footer) {
  print safe """
      <table align="$*entries_alignment" style="width: $*entries_width;">
        <tr>
          <td align="$*entries_alignment" style="width: $*entries_width;">"""; print_dis($this->lay_footer()); """</td>
        </tr>
      </table>""";
}
if (not viewer_sees_vbox() and viewer_sees_hbox_bottom()) {
    """
      <table align="$*entries_alignment">
        <tr>
          <td align="$*entries_alignment"><div style="text-align: center;">""";
          $this->print_hbox_bottom();
          """</div></td>
        </tr>
      </table>
    """;
}
"""
    </td>
""";
if ($*sidebar_align == "right") {
"""
    <td valign='top' style='width: 200px;'>""";

print_sidebar();

server_sig();

"""
    </td>
""";
} else {
if (viewer_sees_vbox()) {
    """<td width="20%" valign="top"><div style="float: right;">""";
    $this->print_vbox();
    """</div></td>""";
}
}
"""
  </tr>
""";
if (viewer_sees_vbox() and viewer_sees_hbox_bottom()) {
    """
  <tr>
    <td colspan="3">
      <table align="$*entries_alignment">
        <tr>
          <td align="$*entries_alignment"><div style="text-align: center;">""";
            $this->print_hbox_bottom();
          """</div></td>
        </tr>
      </table>
    </td>
  </tr>
    """;
}
"""
</table>
</body>
</html>
""";
}

function print_theme_preview () {
var string fontspec = makefontspec();
"""
<div style='width: 100%; font-size: $*main_font_size; background-color: $*main_bgcolor; $fontspec'>
<table cellspacing="0" style="width: 100%; text-align: $*entries_text_alignment;">
  <tr>
    <td colspan="2" rowspan="2" style="background: $*over_bgcolor; color: $*over_fgcolor; border: $*entryborder_size $*entryborder_style $*bordercolor; font-weight: bold; width: 50%; padding: 4px;">Lorem ipsum dolor sit amet</td>
    <td style="padding: 0;" valign="bottom"></td>

    <td>&nbsp;</td>
  </tr>

  <tr>
    <td style="background: $*under_bgcolor; border-right: $*entryborder_size $*entryborder_style $*bordercolor; border-top: $*entryborder_size $*entryborder_style $*bordercolor; color: $*under_fgcolor; font-style: italic; text-align: right; padding: 4px;"><div style="float: right;">02:10pm 05/07/2006</div></td>
    <td>&nbsp;</td>
  </tr>

  <tr>

    <td style="width: 5%;">&nbsp;</td>
    <td colspan="2" style="background: $*under_bgcolor; border: $*entryborder_size $*entryborder_style $*bordercolor; border-top: 0; border-bottom: 0; color: $*under_fgcolor; margin-bottom: 100px; padding: 4px; padding-left: 2px; padding-right: 2px; width: 80%;">
<div style="width: 100%">
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nunc tincidunt sollicitudin orci. Vivamus sollicitudin arcu non mi lobortis lacinia. Sed quis orci. Vestibulum in risus sit amet lectus gravida pellentesque. Curabitur faucibus risus eu pede hendrerit eleifend. Nunc vitae odio. Praesent turpis velit, venenatis vitae, accumsan quis, aliquam scelerisque, diam. Nulla fringilla dapibus nulla. Sed in sapien sit amet odio eleifend venenatis. Nunc neque ipsum, convallis id, volutpat eget, bibendum placerat, magna. Integer commodo, nunc eu faucibus tincidunt, est lectus sodales purus, pulvinar pretium purus diam sollicitudin justo. Nulla facilisi. Vivamus eleifend. Fusce sodales dui sit amet dolor.
</div>
    </td>
    <td style="width: 5%;">&nbsp;</td>
  </tr>

  <tr>
    <td>&nbsp;</td>
    <td style="background: $*under_bgcolor; border-left: $*entryborder_size $*entryborder_style $*bordercolor; border-bottom: $*entryborder_size $*entryborder_style $*bordercolor; color: $*under_fgcolor; padding: 4px;">&nbsp;</td>
    <td colspan="2" rowspan="2" style="background: $*over_bgcolor; color: $*over_fgcolor; border: $*entryborder_size $*entryborder_style $*bordercolor; font-weight: bold; width: 50%; padding: 4px;">
<a style="text-decoration: none; color: $*main_link;" href="#">Link</a>
    </td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
</table>
</div>
""";
}

