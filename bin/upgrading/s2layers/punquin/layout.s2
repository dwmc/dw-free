# -*-s2-*-

layerinfo type = "layout";
layerinfo name = "Punquin Elegant";
layerinfo redist_uniq = "punquin/layout";
layerinfo previews = "punquin/punquin.jpg";
layerinfo des = "The original sidebar layout, with a single box containing all of your recent entries.";

propgroup presentation {
  property string content_width {
      des = "Content area width";
      note = "Don't forget to include units; e.g. px, %";
  }
  property string content_alignment {
      des = "Alignment of the content area";
      values = "left|Left|center|Center|right|Right";
  }
  property string content_top_margin {
      des = "Margin size on the top of the content area";
      note = "You can use this to shift your journal contents down in order to display a background image at the top of your journal.  Don't forget to include units; e.g. px, %";
  }
  property string sidebar_position {
      des = "Position of the sidebar relative to the main content";
      values = "left|Left|right|Right";
  }
  property string entryborder_size {
      des = "Size of borders around entries";
      note = "Don't forget to include the units, e.g. px";
  }
  property string entryborder_style {
      des = "Style of borders around entries";
      values = "solid|Solid|dashed|Dashed|dotted|Dotted|double|Double|hidden|Invisible";
  }
  property bool transparent {
      des = "Make journal content transparent instead of using given background colors";
  }
  property bool show_recent_userpic {
      des = "Display your userpic with your entries on the recent entries page";
  }
  property use page_recent_items;
  property use page_friends_items;
  property use use_shared_pic;
  property use view_entry_disabled;
  property bool show_entrynav_icons {
    des = "Toggle to show the next, memory, edit, etc icons on the entry view page";
  }
  property use linklist_support;
  property string counter_code {
      des = "If you have an external web counter, you can enter the HTML for it here";
      note = "Your counter will appear under the navigation links in your journal's sidebar.";
      maxlength = 2000;
      string_mode = "html-oneline";
  }
  property use external_stylesheet;
  property use custom_control_strip_colors;
}
set content_width = "90%";
set content_alignment = "center";
set content_top_margin = "0";
set sidebar_position = "left";
set entryborder_size = "";
set entryborder_style = "hidden";
set transparent = false;
set show_recent_userpic = false;
set page_recent_items = 20;
set page_friends_items = 20;
set view_entry_disabled = false;
set show_entrynav_icons = true;
set counter_code = "";

# Colors
propgroup colors {
  property Color body_bgcolor {
      des = "Page background color";
      s1color = "stronger_accent";
  }
  property Color main_bgcolor {
      des = "Background of text areas";
      s1color = "page_back";
  }
  property Color main_fgcolor {
      des = "Text color";
      s1color = "page_text";
  }
  property Color subject_color {
      des = "Color of entry subjects";
      s1color = "page_text_em";
  }
  property Color title_color {
      des = "Color of headers and titles";
      s1color = "page_text_title";
  }
  property Color border_color {
      des = "Color of borders";
      s1color = "weak_back";
  }
  property Color border_color_entries {
      des = "Color of borders around entries";
  }
  property Color link_color {
      des = "Link color";
      s1color = "page_link";
  }
  property Color vlink_color {
      des = "Visited link color";
      s1color = "page_vlink";
  }
  property Color alink_color {
      des = "Active link color";
      s1color = "page_alink";
  }
  property Color comment_bar_one_bgcolor {
      des = "Alternating background color for comment bars (one)";
  }
  property Color comment_bar_two_fgcolor {
      des = "Text color on alternating comment bars (one)";
  }
  property Color comment_bar_two_bgcolor {
      des = "Alternating background color for comment bars (two)";
  }
  property Color comment_bar_one_fgcolor {
      des = "Text color on alternating comment bars (two)";
  }
  property Color comment_bar_screened_bgcolor {
      des = "Background bar color for screened comments";
  }
  property Color comment_bar_screened_fgcolor {
      des = "Text color on background bar for screened comments";
  }
  property use control_strip_bgcolor;
  property use control_strip_fgcolor;
  property use control_strip_bordercolor;
  property use control_strip_linkcolor;
}
set body_bgcolor = "#6666cc";
set main_bgcolor = "#ffffff";
set main_fgcolor = "#000000";
set subject_color = "#c00000";
set title_color = "#8b1a1a";
set border_color = "#eeeeff";
set border_color_entries = "#000000";
set link_color = "#000050";
set vlink_color = "#500050";
set alink_color = "#ff00c0";
set comment_bar_one_bgcolor = "#c0c0ff";
set comment_bar_one_fgcolor = "#000000";
set comment_bar_two_bgcolor = "#eeeeff";
set comment_bar_two_fgcolor = "#000000";
set comment_bar_screened_bgcolor = "#dddddd";
set comment_bar_screened_fgcolor = "#000000";

propgroup fonts {
  property use font_base;
  property use font_fallback;
}
set font_base = "Verdana, Arial, Helvetica";
set font_fallback = "sans-serif";

propgroup images {
  property string page_background_image {
    des = "Background image URL";
  }

  property string page_background_repeat {
    des = "Background image repeat";
    values = "repeat|Repeat|no-repeat|Don't repeat|repeat-x|Repeat across only|repeat-y|Repeat down only";
  }

  property string page_background_position {
    des = "Background image position";
    note = "Does not apply if Background Image Repeat is set to 'Repeat'.";
    values = "top|Top|top left|Top-left|top right|Top-right|center|Center|center left|Center-left|center right|Center-right|bottom|Bottom|bottom left|Bottom-left|bottom right|Bottom-right|left|Left|right|Right";
  }

  property string page_background_scrolling {
    des = "Background image scrolling";
    note = "Not supported in all browsers, but allows for the background image to be in a fixed position when scrolling.";
    values = "scroll|Scroll|fixed|Fixed";
  }

  property string img_btwn_comments {
    des = "URL to an image to be used between your comment links";
    note = "If you specify an image to use, it will replace any text between the comment links.";
  }
}
set page_background_image = "";
set page_background_repeat = "repeat";
set page_background_position = "center";
set page_background_scrolling = "scroll";
set img_btwn_comments = "";

propgroup text {
  property string text_gotop {
      des = "Link text to 'top of the page'";
      noui = 1;
  }
  property use text_post_comment;
  property use text_read_comments;
  property use text_post_comment_friends;
  property use text_read_comments_friends;
  property use text_website_default_name;
  property string text_left_comments {
        des = "Text to be used in front of your comment links";
  }
  property string text_btwn_comments {
        des = "Text to be used between your comment links";
        note = "If you specified an image to be used between your comments links in the \"Images\" section, then this option will not have any effect.";
  }
  property string text_right_comments {
        des = "Text to be used at the end of your comment links";
  }
  property string date_format {
      des = "Date format for entries";
  }
  property string time_format {
      des = "Time format for entries";
  }
  property string datetime_comments_format {
        des = "Date and time format for comments";
  }
}
set text_gotop = "Go to Top";
set text_left_comments = "(";
set text_btwn_comments = " | ";
set text_right_comments = ")";
set date_format = "%%month%% %%dayord%%, %%yyyy%%";
set time_format = "%%hh%%:%%min%% %%a%%m";
set datetime_comments_format = "%%month%% %%dayord%%, %%yyyy%% %%hh%%:%%min%% %%a%%m";
set tags_aware = true;

propgroup customcss {
  property use include_default_stylesheet;
  property use linked_stylesheet;
  property use custom_css;
}

function prop_init () {
    if ($*control_strip_bgcolor.as_string == "") {
        $*control_strip_bgcolor = $*main_bgcolor;
    }
    if ($*control_strip_fgcolor.as_string == "") {
        $*control_strip_fgcolor = $*main_fgcolor;
    }
    if ($*control_strip_bordercolor.as_string == "") {
        $*control_strip_bordercolor = $*border_color;
    }
    if ($*control_strip_linkcolor.as_string == "") {
        $*control_strip_linkcolor = $*link_color;
    }

    $*theme_bgcolor = $*main_bgcolor;
    $*theme_fgcolor = $*main_fgcolor;
    $*theme_bordercolor = $*border_color;
    $*theme_linkcolor = $*link_color;
}

function print_stylesheet ()
{
    var string font = "$*font_base, $*font_fallback";
    if(clean_url($*page_background_image) != "") {
      """body {
    background-image: url("$*page_background_image");
    background-position: $*page_background_position;
    background-repeat: $*page_background_repeat;
    background-attachment: $*page_background_scrolling;
}""";
    }
    print """
body {
    background-color:  $*body_bgcolor;
    color:             $*main_fgcolor;
    font:              normal normal 10pt $font;
}
a {
    text-decoration:   none;
    color:             $*link_color;
    background:        transparent;
    font:              normal normal 10pt $font;
}
a:visited {
    color:             $*vlink_color;
    background:        transparent;
}
a:active {
    color:             $*alink_color;
    background:        transparent;
}
#title {
    font:              normal bold 10pt $font;
    color:             $*title_color;
    text-align:        center;
}
.date {
    font:              normal bold 12pt $font;
    color:             $*title_color;
    text-align:        right;
}
.comments {
    font:              normal normal 8pt $font;
}
hr.separator {
    color:             $*border_color;
}
.siteplug {
    font:              normal normal 8pt $font;
}
#yearheader {
    text-align:        right;
    color:             $*title_color;
    font:              normal bold 12pt $font;
}
th.monthheader {
    color:             $*title_color;
}
th.daysheader {
    color:             $*subject_color;
}

/* Tables. Fun. */

table#main {
    border:            solid 0px $*body_bgcolor;
}
table.standard {
    border:            solid 5px $*border_color;
    background-color:  $*main_bgcolor;
    color:             $*main_fgcolor;
    font:              normal normal 10pt $font;
}
table.standard>td {
    background-color:  $*main_bgcolor;
    color:             $*main_fgcolor;
}
table.standard td {
    font:              normal normal 10pt $font;
}
.entry {
    border: $*entryborder_size $*entryborder_style $*border_color_entries;
    width: 100%;
}

A.subjlink, A.subjlink:hover, A.subjlink:visited {
   color:$*subject_color;
   text-decoration: none;
   font-weight: bold;
}

table.standard td.poster {
    text-align: center;
}

""";
if ($*transparent) {
"""
table.standard {
    background: transparent !important;
    border: none;
}
""";
}

print_custom_control_strip_css();
}


function Page::lay_sidebar_navigation () { }

function print_sidebar(Page p) {
    var string title = $p->title();
    var string userpic;
    var Image up_img = $p.journal.default_pic;
    if (defined $up_img) {
        $userpic = """<p align="center"><img border="0" src="$up_img.url" height="$up_img.height" width="$up_img.width" alt="" /></p>""";
    }

    var string website_name = $p.journal.website_name ? $p.journal.website_name : $*text_website_default_name;
    var string website;
    if ($p.journal.website_url != "") {
        $website = """&gt; <a href="$p.journal.website_url">$website_name</a><br />""";
    }

    var string links;
    foreach var string v ($p.views_order) {
        $links = "$links&gt; " + ($p.view == $v ?
                           lang_viewname($v) :
                           "<a href='$p.view_url{$v}'>"+lang_viewname($v)+"</a>") + "<br />\n";
    }

    # Table Wrapper
    "<!-- Begin Main Sidebar -->\n<td valign='top' align='$*sidebar_position'>";
    "<table width='150' class='standard' cellpadding='5' cellspacing='0'>\n";
    "<tr valign='top'><td align='left'>";

    # Title
    print safe "<div style='text-align:center'><span style='color: $*title_color'><strong>$title</strong></span></div>\n";

    # Links
    print safe "<p>$links\n$website\n";
    $p->lay_sidebar_navigation();

    # Counter
    if ($*counter_code != "") {
        """<br />$*counter_code""";
    }

    # Userpic
    "</p>"; if($userpic != "") { "<div style='text-align:center'>$userpic</div>"; }

    # Link List
    if (size $p.linklist > 0 and $*linklist_support) {
        if (not $p.linklist[0].is_heading) {
            "<b>Links</b><br />";
        }
        $p->print_linklist();
    }

    # End Table

    if (viewer_sees_vbox()) {
        "<p>";
        $p->print_vbox();
        "</p>";
    }
    "</td></tr></table>\n<!-- End Main Sidebar -->";
}

function print_gotop (Page p)
{
    "<td valign='bottom' align='$*sidebar_position'>\n<!-- Begin Small Sidebar -->\n";
    "<table width='150' class='standard' cellpadding='5' cellspacing='0'>\n";
    "<tr valign='top'><td align='left'>\n";
    $p->lay_sidebar_navigation();
    "<br />&gt; <a href='#top'>$*text_gotop</a><br>\n</td></tr></table>\n<!-- End Small Sidebar -->";
}

function Page::print ()
{
    var string title = $this->title();
    var string main_position = $*sidebar_position == "left" ? "right" : "left";

    var string margin = "";
    if ($*content_top_margin != "0") {
        $margin = "<table id='main' cellpadding='5' cellspacing='0' width='$*content_width' align='$*content_alignment' style='margin-top: $*content_top_margin;'>";
    }

    # Head
    println """<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n""";

    $this->print_head();
    $this->print_stylesheets();

    print safe "<title>$title</title>\n</head>\n";

    # Body
    "<body>\n";

    "<a name='top'></a>";
    $this->print_control_strip();
    "<div align='center'>\n";

    # Table wrapper
    if ($margin == "") {
        print safe "<table id='main' cellpadding='5' cellspacing='0' width='$*content_width' align='$*content_alignment'>\n";
    } else {
        print safe "$margin\n";
    }
    "<tr>";

    if (viewer_sees_hbox_top()) {
        """<td colspan="2"><div style="text-align: center;">""";
        $this->print_hbox_top();
        "</div></td></tr><tr>";
    }

    if ($*sidebar_position == "left") { print_sidebar($this); }

    # Main content
    "<td valign='top' align='$main_position' rowspan='2'>\n<!-- Begin Main -->\n";
    "<table class='standard' width='100%' height='90%' cellpadding='5' cellspacing='0'><tr valign='top'><td align='left'>\n";
    $this->print_body();
    "</td></tr></table>\n<!-- End Main -->\n</td>";

    if ($*sidebar_position == "right") { print_sidebar($this); }

    # Go to top
    "</tr><tr>";
    print_gotop($this);
    "</tr><tr>";

    # Plug the site!
    "<td colspan='2' align='$main_position'>\n";
    "<a href='$*SITEROOT/'>$*SITENAME</a></td>\n";

    if (viewer_sees_hbox_bottom()) {
        """</tr><tr><td colspan="2"><div style="text-align: center;">""";
        $this->print_hbox_bottom();
        "</div></td>";
    }
    "</tr></table>";
    "</div></body></html>";
}

function print_entry (Page p, Entry e, Color bgcolor, Color fgcolor, bool hide_text)
{
    var string time = $e.time->time_format($*time_format);
    if ($e.new_day or $p.view == "entry") {
        "<p class='date'>"; print $e.time->date_format($*date_format); "</p>";
        "<hr class='separator' />";
    }

    if ($p.view == "entry" and $*show_entrynav_icons)
    {
        print "<div style='text-align: center'>";
        $e->print_linkbar();
        print "</div>";
    }

    "<table border='0' cellpadding='2' cellspacing='0' class='entry'><tr>";

    if ($p.view == "friends" or
        $e.poster.username != $e.journal.username or
        $*show_recent_userpic == true)
    {
        # Lots of muddled logic. Yay.

        """<td valign="top" class="poster" align="center" style="background-color: $bgcolor" width="100">""";
        if ($p.view == "friends") {
            """<a href='""" + $e.journal->base_url() + """/' style="color: $fgcolor; font-weight: bold">$e.journal.username</a><br />""";
        }
        if ($e.poster.username != $e.journal.username) {
            if ($p.view == "friends") {
                """[<a href='""" + $e.poster->base_url() + """/' style="color: $fgcolor">$e.poster.username</a>]<br />""";
            } else {
                """<a href='""" +  $e.poster->base_url() + """/' style="color: $fgcolor; font-weight: bold">$e.poster.username</a><br />""";
            }
        }
        if (defined $e.userpic) {
            if (($*show_recent_userpic == false) and
            ($p.view != "friends") and
        ($p.journal_type != "C") ) { }
            else { """<img border="0" src="$e.userpic.url" width="$e.userpic.width" height="$e.userpic.height" alt="" />""";
            }
        }
        "</td>";
    }
    "<td valign='top'><strong>$time";
    if ($e.subject) { " - ";
       if ($p.view != "entry") {
         print $e->formatted_subject({"class"=>"subj-link subjlink"});
       } else { "<span style='color: $*subject_color'>$e.subject</span>"; } 
    }

    if ($e.security) {
        " "; $e.security_icon->print();
    }
    "</strong><br />";
    if (not $hide_text) {
        $e->print_text(); "<br />";
        if (size $e.metadata) {
            foreach var string k ($e.metadata) {
                var string key = $k;
                var string val = $e.metadata{$k};
                if ($k == "mood") {
                    $key = $*text_meta_mood;
                } elseif ( $k == "music" ) {
                    $key = $*text_meta_music;
                } elseif ( $k == "location" ) {
                    $key = $*text_meta_location;
                } elseif ( $k == "groups") {
                    $key = $*text_meta_groups;
                }
                if ($k == "mood" and defined $e.mood_icon) {
                    var Image i = $e.mood_icon;
                    $val = "<img src='$i.url' width='$i.width' height='$i.height' align='absmiddle' alt='[mood icon]' /> $val";
                }
                "<strong>$key:</strong> $val<br />";
            }
        }
        if ($e.tags) {
            var int tcount = 0;
            "<div class='ljtags'><strong>Tags:</strong> ";
            foreach var Tag t ($e.tags) {
                """<a rel="tag" href="$t.url">$t.name</a>""";
                $tcount++;
                if ($tcount != size $e.tags) { ", "; }
            }
            "</div>";
        }
    }
    "</td></tr></table>";

    if ($p.view != "reply") {
        $e.comments->print();
    }
}

function Page::print_entry (Entry e)
{
    print_entry($this, $e, null Color, null Color, false);
}

function FriendsPage::print_entry (Entry e) {
    var Friend f = $.friends{$e.journal.username};
    print_entry($this, $e, $f.bgcolor, $f.fgcolor, false);
}
function print_ebox (Entry e) {
    if ($e->viewer_sees_ebox()) {
        """<div style="text-align:center; margin-bottom: 10px;">""";
        $e->print_ebox();
        "</div>";
    }
}

function RecentPage::print_body {
    foreach var Entry e ($.entries) {
        $this->print_entry($e);
        print_ebox($e);
    }
}

function FriendsPage::print_body {
    foreach var Entry e ($.entries) {
        $this->print_entry($e);
        if ($e->viewer_sees_ebox()) {
            """<div style="text-align:center; margin-bottom: 10px;">""";
            $e->print_ebox();
            "</div>";
        }
    }
}


function RecentPage::lay_sidebar_navigation () {
    var string nav = "";
    if ($.nav.backward_url != "") {
        $nav = """&gt; <a href="$.nav.backward_url">previous $.nav.backward_count entries</a>""";
    }
    if ($.nav.forward_url != "" and $.nav.backward_url != "") {
        $nav = "$nav<br />";
    }
    if ($.nav.forward_url != "") {
        $nav = """${nav}&gt; <a href="$.nav.forward_url">next $.nav.forward_count entries</a>""";
    }
    print $nav;
}

function CommentInfo::print_postlink() {
    var Page p = get_page();
    if ($.maxcomments) {
        print safe "$*text_max_comments";
    } else {
        if ($p.view == "entry") {
                $p->print_reply_link({"target" => "topcomment", "linktext" => $*text_post_comment});
        } else {
        print safe "<a href=\"$.post_url\">"+($p.view == "friends" ? $*text_post_comment_friends : $*text_post_comment)+"</a>";
       }
    }
}


function CommentInfo::print() {
    var Page p = get_page();
    "<p align='right' class='comments'>";
    if ($.show_readlink or $.show_postlink) {
        print safe "$*text_left_comments";
        if ($.show_readlink) {
            $this->print_readlink();
        }
        if ($.show_postlink and $.show_readlink) {
            if (clean_url($*img_btwn_comments) != "") {
                """ <img src="$*img_btwn_comments" alt="" /> """;
            } else {
                print safe "$*text_btwn_comments";
            }
        }
        if ($.show_postlink) {
            $this->print_postlink();
        }
        print safe "$*text_right_comments";
    }
    else {
        "&nbsp;";
    }
    "</p>";
    $p->print_reply_container({"target" => "topcomment"});
}

function YearPage::print_body {
    "<p id='yearheader'>$.year</p>\n";
    foreach var YearMonth m ($.months) {
        $this->print_month($m);
    }
}

function YearPage::print_year_links ()
{
    foreach var YearYear y ($.years) {
        if ($y.displayed) {
            "&gt; $y.year<br />";
        } else {
            "&gt; <a href=\"$y.url\">$y.year</a><br />";
        }
    }
}

function YearPage::lay_sidebar_navigation ()
{
    $this->print_year_links();
}

function YearPage::print_month(YearMonth m)
{
    if (not $m.has_entries) { return; }
    # Table Wrapper
    "<center><p><table border='1' cellpadding='4' width='80%'>\n";

    # Month Header
    "<tr align='center'><th colspan='7' class='monthheader'>\n";
    print $m->month_format();
    "</th></tr>\n";

    # Weekdays Header
    "<tr align='center'>\n";
    foreach var int d (weekdays()) {
        "<th class='daysheader'>"+$*lang_dayname_short[$d]+"</th>\n";
    }
    "</tr>\n";

    # Weeks
    foreach var YearWeek w ($m.weeks) {
        $w->print();
    }

    # Footer
    "<tr><td colspan='7'><div style='text-align: center'><a href='$m.url'>view subjects</a></div></td></tr>\n";

    # End Table
    "</table></p></center>\n";
}

function YearWeek::print () {
    "<tr>";
    if ($.pre_empty) { "<td colspan='$.pre_empty'>&nbsp;</td>"; }
    foreach var YearDay d ($.days) {
        "<td valign='top'><strong>$d.day</strong><div style='text-align: center'>";
        if ($d.num_entries) {
            "<a href='$d.url'>$d.num_entries</a>";
        } else {
            "&nbsp;";
        }
        "</div></td>\n";
    }
    if ($.post_empty) { "<td colspan='$.post_empty'>&nbsp;</td>"; }
    "</tr>";
}

function DayPage::print_body() {
    if (not $.has_entries) {
        "<table width='100%'><tr><td><p class='date'>\n";
        print $.date->date_format($*date_format);
        "</p><hr class='separator' width='100%' /></td></tr>";
        "<tr><td><blockquote align='center'>"; print ehtml($*text_noentries_day); "</blockquote></td></tr></table>";
    } else {
        foreach var Entry e ($.entries) {
            $this->print_entry($e);
            if ($e->viewer_sees_ebox()) {
                """<div style="text-aling: center; margin-bottom: 10px;">""";
                $e->print_ebox();
                "</div>";
            }
        }
    }

    var string tprev = ehtml($*text_day_prev);
    var string tnext = ehtml($*text_day_next);

    "<hr class='separator' width='100%' />\n";
    "<table width='100%'><tr align='center'>\n";

    "<td width='33%' align='left'>";
    if ($.prev_url != "") {
        "<a href='$.prev_url'>$tprev</a>";
    }
    "</td>\n";
    "<td align='center' width='33%'>[<a href='"; print $this.journal->base_url(); "/calendar'>$*text_view_archive</a>]</td>\n";
    "<td width='33%' align='right'>";
    if ($.next_url != "") {
        "<a href='$.next_url'>$tnext</a>";
    }
    "</td>\n";

    "</tr></table>";
}

function EntryPage::print_body ()
{
        set_handler("unscreen_comment_#", [
                                           [ "style_bgcolor", "cmtbar#", "$*comment_bar_one_bgcolor", ],
                                           [ "style_color", "cmtbar#", "$*comment_bar_one_fgcolor", ],
                                           ]);
        set_handler("screen_comment_#", [
                                         [ "style_bgcolor", "cmtbar#", "$*comment_bar_screened_bgcolor", ],
                                         [ "style_color", "cmtbar#", "$*comment_bar_screened_fgcolor", ],
                                         ]);

    print_entry($this, $.entry, null Color, null Color, $.viewing_thread);
    print_ebox($.entry);
    if ($.entry.comments.enabled and $.comment_pages.total_subitems > 0)
    {
        $this->print_multiform_start();
        print "<h2 class='date'>Comments:</h2>";
        "<hr class='separator' />";
        if ($.comment_pages.total_subitems > 0) {
            $.comment_pages->print();
            $this->print_comments($.comments);
        }
        if ($this.multiform_on) {
            print "<h2 class='date'>Mass Action:</h2>";
            "<hr class='separator' />";
            $this->print_multiform_actionline();
            $this->print_multiform_end();
        }
    }
}

function EntryPage::print_comment (Comment c) {
    var Color background; var Color color;
    if ($c.screened) {
        $background = $*comment_bar_screened_bgcolor;
        $color = $*comment_bar_screened_fgcolor;
    } elseif ($c.depth % 2) {
        $background = $*comment_bar_one_bgcolor;
        $color = $*comment_bar_one_fgcolor;
    } else {
        $background = $*comment_bar_two_bgcolor;
        $color = $*comment_bar_two_fgcolor;
    }
    var string poster = defined $c.poster ? $c.poster->as_string() : "<i>(Anonymous)</i>";
    var string sub_icon;
    if (defined $c.subject_icon) {
        $sub_icon = $c.subject_icon->as_string();
    }
    "<a name='$c.anchor'></a><div id='cmtbar$c.talkid' style='background-color: $background; color: $color; margin-top: 10px; width: 100%'>";
    "<table cellpadding='2' cellspacing='0' summary='0' style='width: 100%'><tr valign='top'>";
    if (defined $c.userpic and $*comment_userpic_style != "off") {
        var int w = $c.userpic.width;
        var int h = $c.userpic.height;
        # WARNING: this will later be done by the system (it'll be a
        # constructional property), so don't copy this hack into your
        # layout layers or you'll be messed up later.
        if ($*comment_userpic_style == "small") {
            $w = $w / 2;
            $h = $h / 2;
        }
        print "<td style='width: 102px'><img src='$c.userpic.url' width='$w' height='$h' alt='[User Picture]' /></td>";
    }

    "<td style='width: 100%'><table style='width: 100%'><tr>";

    ### From, date, etc
    "<td align='left' style='width: 50%'>";
      print "<table>";
      print "<tr><th align='right' style='font-size: .9em'>From:</th><td>$poster</td></tr>\n";
      print "<tr><th align='right' style='font-size: .9em'>Date:</th><td style='white-space: nowrap'>";
        print $c->time_display($*datetime_comments_format, "none") + "</td></tr>";
      if ($c.metadata{"poster_ip"}) { print "<tr><th align='right' style='font-size: .9em'>IP Address:</th><td>(" + $c.metadata{"poster_ip"} + ")</td></tr>"; }
    "</table></td>";

    ### Gadgets
    "<td align='right' style='width: 50%'>";
    if ($this.multiform_on) {
        " <label for='ljcomsel_$c.talkid'>$*text_multiform_check</label>";
        $c->print_multiform_check();
    }
    $c->print_linkbar();
    "</td></tr>";

    ### Subject / icon
    print "<tr valign='top'><td style='width: 50%'>";
    print (defined $c.subject_icon or $c.subject != "") ? "<h3>$c.subject_icon $c.subject</h3>" : "";
    print "</td>";

    ### Permalink
    print "<td style='width: 50%' align='right'><strong>(<a href='$c.permalink_url'>Link</a>)</strong></td></tr>";

    print "</table></td></tr></table></div>";
    print "<div style='margin-left: 5px'>"; $c->print_text(); "</div>";
    print "<div style='margin-top: 3px; font-size: smaller'>";
    if ($c.frozen) {
        print "(Replies frozen)";
    } else {
        # print "(<a href='$c.reply_url'>Reply to this</a>) ";
        print "("; 
        ###$c->print_reply_link({"linktext" => $*text_comment_reply}); 
        if($c.screened == true) {
            ### if comment screened - show link for unscreen
            var Link link;
            $link = $c->get_link("unscreen_to_reply");
            """<a href="$link.url" title="$link.caption">$link.caption</a>""";
        } else {
            ### showing reply link if comment not screened
            $c->print_reply_link({ "linktext" => $*text_comment_reply });
        }

        
        ") ";
    }
    if ($c.parent_url != "") { "(<a href='$c.parent_url'>Parent</a>) "; }
    if ($c.thread_url != "") {
         "(<a href='$c.thread_url'>Thread</a>) ";
         var Link expand_link = $c->get_link("expand_comments");
         if (defined $expand_link) {
             "(" + $c->expand_link() + ") ";
         }
    }
    "</div>";
    if (not $c.frozen) {
        $c->print_reply_container({"class" => "quickreply"});
    }

}

function ReplyPage::print_body() {
    if (not $.entry.comments.enabled)
    {
        "<h2 class='date'>$*text_reply_nocomments_header</h2>";
        "<hr class='separator' />";
        "<p>$*text_reply_nocomments</p>";
        return;
    }
    "<p class='date'>"; print $.replyto.time->date_format($*date_format); "</p>";
    "<hr class='separator' />";

    if ($.replyto isa Entry) {
        var Entry en = $.replyto as Entry;

        print_entry($this, $en, null Color, null Color, false);
        "<p align='right' class='comments'><a href='$.entry.comments.read_url'>Read Comments</a></p>";
    } else {
        "<table border='0' cellpadding='2' cellspacing='0'><tr>";

        """<td valign=top align="center" width="100">""";
        print defined $.replyto.poster ? $.replyto.poster->as_string() : "<i>(Anonymous)</i>";
        if (defined $.replyto.userpic) {
            print """<img border="0" src="$.replyto.userpic.url" width="$.replyto.userpic.width" height="$.replyto.userpic.height" alt="" />""";
        }
        "</td>";

        "<td valign='top'><strong>"; print $.replyto.time->time_format($*time_format);
        if ($.replyto.subject) { " - <span style='color: $*subject_color'>$.replyto.subject</span>"; }

        "</strong><br />";

        $.replyto->print_text(); "<br />";

        "</td></tr></table>";
        "<p align='right' class='comments'><a href='$.entry.comments.read_url'>Read Comments</a></p>";
    }
    print_ebox($.entry);
    "<hr class='separator' />";
    "<h2 class='date'>Reply</h2>";
    "<hr class='separator' />";
    $.form->print();
}

function print_theme_preview ()
{
    """
<table width="100%" style="background-color: $*body_bgcolor; border: solid 1px #000000"><tr><td style="color:$*main_fgcolor">
  <table bgcolor="$*border_color" border="0" cellpadding="5" cellspacing="0" width="60%" align="center">
    <tr><td valign="center" align="center">
      <table width="100%" height=90% bgcolor="$*main_bgcolor" border="0" cellpadding="5" cellspacing="0">
        <tr valign="top"><td>
          <p align="right"><font color="$*title_color" face="verdana,arial,helvetica" size="3">
            <strong>December 18th, 2002</strong></font><hr noshade color="$*border_color" size="1" width="100%" />
          </p>
          <font face="verdana,arial,helvetica" size="2">
          <b>01:22 am - <font color="$*subject_color">Test</font></b><font face="verdana,arial,helvetica" size="2"><br />
          Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.
          Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.</font>
          <p align="right">(<a style="color: $*link_color" href="#">Read # Comments</a> | <a style="color: $*vlink_color" href="#">Leave a comment</a>)</p>
        </td></tr>
      </table>
    </td></tr>
  </table>
</td></tr></table>
    """;
}
