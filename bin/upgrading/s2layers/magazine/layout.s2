# -*-s2-*-

layerinfo type = "layout";
layerinfo name = "Magazine";
layerinfo redist_uniq = "magazine/layout";
layerinfo previews = "magazine/magazine.jpg";
layerinfo des = "An uncluttered, efficient layout with a centered heading and clearly-separated entries.";

propgroup presentation {
  property int content_width {
      des = "Percentage width of the content area";
      note = "Maximum is 100, minimum is 20";
  }
  property string content_alignment {
      des = "Alignment of the content area";
      values = "left|Left|center|Center|right|Right";
  }
  property string entryborder_size {
      des = "Size of borders around entries";
      values = "thin|Thin|medium|Medium|thick|Thick";
  }
  property string entryborder_style {
      des = "Style of borders around entries";
      values = "solid|Solid|dashed|Dashed|dotted|Dotted|double|Double|hidden|Invisible";
  }
  property bool show_entry_userpic {
      des = "Display your userpic with your entries";
  }
  property use page_recent_items;
  property use page_friends_items;
  property use use_shared_pic;
  property use view_entry_disabled;
  property bool show_entrynav_icons {
    des = "Toggle to show the next, memory, edit, etc icons on the entry view page";
  }
  property use linklist_support;
  property use external_stylesheet;
  property string counter_code {
    des = "If you have an external web counter, you can enter the HTML for it here";
    note = "Your counter will under the main navigation links in your journal.";
    maxlength = 2000;
    string_mode = "html-oneline";
  }
  property use custom_control_strip_colors;
property string text_expand_link {
        des = "Text for comments expander link in link bar";
        noui = 1;
    }
    set text_expand_link = "Expand";

}
set content_width = 100;
set content_alignment = "center";
set entryborder_size = "thin";
set entryborder_style = "solid";
set show_entry_userpic = false;
set view_entry_disabled = false;
set show_entrynav_icons = true;
set counter_code = "";

propgroup colors {
  property Color main_bgcolor {
      des = "Main Background color";
      s1color = "page_back";
  }
  property Color main_fgcolor {
      des = "Main text color";
      s1color = "page_text";
  }
  property Color sidebar_color {
      des = "Sidebar color";
      s1color = "stronger_back";
  }
  property Color headerbar_bgcolor {
      des = "Headerbar background color";
      s1color = "strong_back";
  }
  property Color headerbar_fgcolor {
      des = "Text color on headerbar";
      s1color = "strong_text";
  }
  property Color headerbar_bevel_color {
      des = "Accent line color for headerbar";
      s1color = "stronger_back";
  }
  property Color highlight_bgcolor {
      des = "Highlighting color for accented text";
      s1color = "weak_back";
  }
  property Color highlight_fgcolor {
      des = "Highlighted text color";
      s1color = "weak_text";
  }
  property Color border_color {
      des = "Color of borders";
      note = "If you don't set a border size and style in the \"Presentation\" section, this won't have any effect.";
      s1color = "weak_text";
  }
  property Color title_color  {
      des = "Text color of top title";
      s1color = "page_text_title";
  }
  property Color meta_color {
      des = "Text color of meta descriptions";
      s1color = "page_text_em";
  }
  property Color link_color {
      des = "Text color of links";
      s1color = "page_link";
  }
  property Color vlink_color {
      des = "Text color of visited links";
      s1color = "page_vlink";
  }
  property Color alink_color {
      des = "Text color of active links";
      s1color = "page_alink";
  }
  property Color comment_bar_one_bgcolor {
      des = "Alternating background color for comment bars (one)";
  }
  property Color comment_bar_two_fgcolor {
      des = "Text color on alternating comment bars (one)";
  }
  property Color comment_bar_two_bgcolor {
      des = "Alternating background color for comment bars (two)";
  }
  property Color comment_bar_one_fgcolor {
      des = "Text color on alternating comment bars (two)";
  }
  property Color comment_bar_screened_bgcolor {
      des = "Background bar color for screened comments";
  }
  property Color comment_bar_screened_fgcolor {
      des = "Text color on background bar for screened comments";
  }
  property use control_strip_bgcolor;
  property use control_strip_fgcolor;
  property use control_strip_bordercolor;
  property use control_strip_linkcolor;
}
set main_bgcolor = "#ffffff";
set main_fgcolor = "#000000";
set sidebar_color = "#6666cc";
set headerbar_bgcolor = "#c0c0ff";
set headerbar_fgcolor = "#000000";
set headerbar_bevel_color = "#6666cc";
set highlight_bgcolor = "#eeeeff";
set highlight_fgcolor = "#000000";
set border_color = "#000000";
set title_color = "#8b1a1";
set meta_color = "#c00000";
set link_color = "#000050";
set vlink_color = "#500050";
set alink_color = "#ff00c0";
set comment_bar_one_bgcolor = "#c0c0ff";
set comment_bar_one_fgcolor = "#000000";
set comment_bar_two_bgcolor = "#eeeeff";
set comment_bar_two_fgcolor = "#000000";
set comment_bar_screened_bgcolor = "#dddddd";
set comment_bar_screened_fgcolor = "#000000";

propgroup images {
  property string page_background_image {
      des = "URL to an image to be used for the page background";
  }

  property string page_background_repeat {
      des = "Background image repeat";
      values = "repeat|Repeat|no-repeat|Don't repeat|repeat-x|Repeat across only|repeat-y|Repeat down only";
  }

  property string page_background_position {
      des = "Background image position";
      note = "Does not apply if Background Image Repeat is set to 'Repeat'.";
      values = "top|Top|top left|Top-left|top right|Top-right|center|Center|center left|Center-left|center right|Center-right|bottom|Bottom|bottom left|Bottom-left|bottom right|Bottom-right|left|Left|right|Right";
  }

  property string page_background_scrolling {
      des = "Background image scrolling";
      note = "Not supported in all browsers, but allows for the background image to be in a fixed position when scrolling.";
      values = "scroll|Scroll|fixed|Fixed";
  }
  property string img_btwn_comments {
      des = "URL to an image to be used between your comment links";
      note = "If you specify an image to use, it will replace any text between the comment links.";
  }
}
set page_background_image = "";
set page_background_repeat = "repeat";
set page_background_position = "center";
set page_background_scrolling = "scroll";
set img_btwn_comments = "";

propgroup text {
  property use text_post_comment;
  property use text_read_comments;
  property use text_post_comment_friends;
  property use text_read_comments_friends;
  property string text_left_comments {
    des = "Text to be used in front of your comment links";
  }
  property string text_btwn_comments {
    des = "Text to be used between your comment links";
    note = "If you specified an image to be used between your comments links in the \"Images\" section, then this option will not have any effect.";
  }
  property string text_right_comments {
    des = "Text to be used at the end of your comment links";
  }
  property string date_format {
    des = "Date format for entries";
  }
  property string time_format {
    des = "Time format for entries";
  }
  property string datetime_comments_format {
    des = "Date and time format for comments";
  }
}
set text_left_comments = "(";
set text_btwn_comments = " | ";
set text_right_comments = ")";
set date_format = "%%mon%%. %%dayord%%, %%yyyy%%";
set time_format = "%%hh%%:%%min%% %%a%%m";
set datetime_comments_format = "%%month%% %%dayord%%, %%yyyy%% %%hh%%:%%min%% %%a%%m";

propgroup customcss {
  property use include_default_stylesheet;
  property use linked_stylesheet;
  property use custom_css;
}

set tags_aware = true;

function prop_init() {
    if ($*content_width > 100) {
        $*content_width = 100;
    } elseif ($*content_width < 20) {
        $*content_width = 20;
    }

    if ($*control_strip_bgcolor.as_string == "") {
        $*control_strip_bgcolor = $*main_bgcolor;
    }
    if ($*control_strip_fgcolor.as_string == "") {
        $*control_strip_fgcolor = $*main_fgcolor;
    }
    if ($*control_strip_bordercolor.as_string == "") {
        $*control_strip_bordercolor = $*border_color;
    }
    if ($*control_strip_linkcolor.as_string == "") {
        $*control_strip_linkcolor = $*link_color;
    }

    $*theme_bgcolor = $*main_bgcolor;
    $*theme_fgcolor = $*main_fgcolor;
    $*theme_bordercolor = $*border_color;
    $*theme_linkcolor = $*link_color;
}

function Page::lay_skip_navigation() {}

function Page::lay_bottom_navigation() {}

function print_stylesheet ()
{
    var int margin_width = 99 - $*content_width;
    var string align = "";
    if ($*content_alignment == "left") {
        $align = """margin-right: ${margin_width}%;""";
    } elseif ($*content_alignment == "right") {
        $align = """margin-left: ${margin_width}%;""";
    } else { # center
        $align = """margin-left: auto; margin-right: auto;""";
    }

    var string bgimg_selector = viewer_sees_control_strip() ? "#content" : "BODY";
    if(clean_url($*page_background_image) != "") {
      """$bgimg_selector {
    background-image: url("$*page_background_image");
    background-position: $*page_background_position;
    background-repeat: $*page_background_repeat;
    background-attachment: $*page_background_scrolling;
}""";
    }
    if (not viewer_sees_control_strip()) {
      """HTML {
    border-left: 1cm solid $*sidebar_color;
    padding: 1cm;
    }
BODY {
    line-height: 1.3;
    margin: 0;
    background-color: $*main_bgcolor;
    color: $*main_fgcolor;
}
""";
    }
"""P {
    margin-top: 0;
    text-align: justify;
}
H1 {
    font: x-large Verdana, sans-serif; text-align: center;
    letter-spacing: -0.09em;
    color: $*title_color;
    width: $*content_width%;
    $align
}
H2 {
    background-color: $*headerbar_bgcolor;
    color: $*headerbar_fgcolor;
    border-bottom: thin solid $*headerbar_bevel_color;
    font: normal 1.3em Georgia, serif;
    width: $*content_width%;
    $align
}
H3 {
    color: $*highlight_fgcolor;
    font: medium sans-serif;
}
H3 SPAN {
    background-color: $*highlight_bgcolor;
    border-right: thin solid $*border_color;
    border-bottom: thin solid $*border_color;
    padding-right: 0.5ex;
}
H3 EM {
    color: $*meta_color;
    font-style: normal;
}
""";
if (viewer_sees_control_strip()) {
"""#content {
    padding: 1cm;
    margin: 0 0 0 1cm;
    background-color: $*main_bgcolor;
}
BODY {
    line-height: 1.3;
    margin: 0;
    background-color: $*sidebar_color;
    color: $*main_fgcolor;
}""";
}
"""
.H3Holder {
    """;
    if (not viewer_sees_vbox()) { "clear: both;"; }
    """
    padding-left: 2ex;
    border-left: $*entryborder_size $*entryborder_style $*border_color;
    border-bottom: $*entryborder_size $*entryborder_style $*border_color;
    margin-bottom: 1em;
    width: $*content_width%;
    $align
}
A:link {
    color: $*link_color;
}
A:visited {
    color: $*vlink_color;
}
A:active {
    color: $*alink_color;
}
.Navigation {
    text-align: center;
    font-family: sans-serif;
    width: $*content_width%;
    $align
}
.Comments {
    width: $*content_width%;
    $align
}
.Comment {
    font-size: 0.7em;
    margin-top: -1em;
    text-align: right;
}
.Comment, .Current {
    margin-bottom: 1em;
    """;
    if (not viewer_sees_vbox()) { "clear: right;"; }
    """
}
.Picture {
    border-left: thin solid $*border_color;
    border-top: thin solid $*border_color;
    float: right;
    margin: 0 0 0.5em 0.5em;
    padding: 0.2em;
}
.Picture DIV {
    text-align: center;
}
.Active {
    background-color: $*highlight_bgcolor;
}
ACRONYM {
    border-bottom: thin dashed $*border_color;
    cursor: help;
}
.Bottom {
    border-top: thin solid $*border_color;
    text-align: center;
    width: $*content_width%;
    $align
}
.Empty {
    background-color: $*highlight_bgcolor;
}
.Month {
    margin-top: 1em;
    width: $*content_width%;
    $align
}
.MonthHeader {
    color: $*headerbar_fgcolor;
    background-color: $*headerbar_bgcolor ! important;
    line-height: 1.5;
}
.Month TD {
    color: $*highlight_fgcolor;
    width: 14%;
    border: thin outset;
}
.Month TH {
    background-color: $*highlight_bgcolor;
    font-family: Verdana, sans-serif;
    border: thin outset;
}
.Listing, .ljtaglist {
    width: $*content_width%;
    $align
}
""";

print_custom_control_strip_css();
}

function Page::print_linklist() {
    if (size $.linklist <= 0) {
        return;
    }

    var bool section_open = false;

    println "<p class='Navigation'>";
    foreach var UserLink l ($.linklist) {
        if ($l.title) {
            if ($l.is_heading) {
                if ($section_open) {
                    println "<br />";
                }
                println """$l.title: """;
                $section_open = true;
            } else {
                println """(<a href="$l.url">$l.title</a>)""";
                $section_open = true;
            }
        }
    }
    if ($section_open) {
        println "</p>";
    }
    println "";
}

function Page::print () {
    var string title = $this->title();

    """<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n""";

    $this->print_head();
    $this->print_stylesheets();
    print safe """<title>$title</title>
  </head>
  <body>
    """;
    $this->print_control_strip();
    if (viewer_sees_control_strip()) { """<div id="content">"""; }
    if (viewer_sees_hbox_top()) {
        """<div style="text-align: center;"""; if (viewer_sees_vbox()) { " width: 75%;"; } "\">";
        $this->print_hbox_top();
        "</div>";
    }

    if (viewer_sees_vbox()) {
        """<div style="float: right;">""";
        $this->print_vbox();
        "</div>";
        """<div style="width: 75%;">""";
    }
    print safe """<h1>$title</h1>""";

    var string website_name = $.journal.website_name ? $.journal.website_name : $*text_website_default_name;
    var string website = ($.journal.website_url != "" ? "(<a href='$.journal.website_url'>$website_name</a>)" : "");

    var string links;
    foreach var string v ($.views_order) {
        $links = "$links(<span style='white-space: nowrap;'>" + ($.view == $v ?
                           "<span class='Active'>"+lang_viewname($v)+"</span>" :
                           "<a href='$.view_url{$v}'>"+lang_viewname($v)+"</a>") + ")</span>\n";
    }

    """<p class="Navigation">$links $website<br />""";
    $this->lay_skip_navigation();
    if ($*counter_code != "") {
        """<p class="Navigation">$*counter_code</p>""";
    }
    "</p>";

    if (size $.linklist > 0 and $*linklist_support) {
       $this->print_linklist();
    }

    $this->print_body();

    $this->lay_bottom_navigation();

    if (viewer_sees_hbox_bottom()) {
        """<div style="text-align: center;">""";
        $this->print_hbox_bottom();
        "</div>";
    }

    if (viewer_sees_vbox()) { "</div>"; }
    if (viewer_sees_control_strip()) { "</div>"; }
    "</body></html>";
}

function print_entry (Page p, Entry e, Color bgcolor, Color fgcolor, bool hide_text)
{
    var string time = $e.time->time_format($*time_format);
    var string userpic = (defined $e.userpic ? "<img src='$e.userpic.url' />" : "");
    if (($p.view != "entry" and $e.new_day) or $p.view == "entry")
    {
        "<h2>" + $e.time->date_format($*date_format) + "</h2>";
    }
    "<div class='H3Holder'>";

    # Altposter / friends / lastn userpic
    if ($p.view == "friends" or
        $p.view == "entry" or
        $*show_entry_userpic == true or
        $e.journal.username != $e.poster.username)
    {
        "<div class='Picture' style='background-color: $bgcolor;'>";
        if ($p.view == "friends")
        {
            "<div><a href='";
            print $e.journal->base_url() + "/";
            "' style='color: $fgcolor;'><small>$e.journal.username</small></a></div>";
        }
        if ($*show_entry_userpic == true or $p.view == "friends" or $p.view == "entry")
        {
            if (defined $e.userpic) { "<div><img src='$e.userpic.url' /></div>"; }
        }
        if ($e.journal.username != $e.poster.username)
        {
            "<div><a href='";
            print $e.poster->base_url() + "/";
            "'>$e.poster.username</a></div>";
        }
        "</div>";
    }
    # Time / Subject / Security
    var string subject = ($e.subject != "" ? " - <em>$e.subject</em>" : "");
    "<h3><span>$time$subject</span> $e.security_icon</h3>";

    if ($p.view == "entry" and $*show_entrynav_icons)
    {
        print "<div style='text-align: center'>";
        $e->print_linkbar();
        print "</div>";
    }

    if (not $hide_text)
    {
        # Entry
        "<p>";
        $e->print_text();
        "</p>";

        # Tags
        if ($e.tags) {
            var int tcount = 0;
            "<div class='ljtags'><strong>Tags:</strong> ";
            foreach var Tag t ($e.tags) {
                """<a rel="tag" href="$t.url">$t.name</a>""";
                $tcount++;
                if ($tcount != size $e.tags) { ", "; }
            }
            "</div>";
        }

        # Metadata
        if (size $e.metadata) {
            foreach var string k ($e.metadata) {
                "<div class='Currents'>";
                var string key = $k;
                var string val = $e.metadata{$k};
                if ($k == "mood") {
                    $key = $*text_meta_mood;
                } elseif ( $k == "music" ) {
                    $key = $*text_meta_music;
                } elseif ( $k == "location" ) {
                    $key = $*text_meta_location;
                } elseif ( $k == "groups") {
                    $key = $*text_meta_groups;
                }
                if ($k == "mood" and defined $e.mood_icon) {
                    var Image i = $e.mood_icon;
                    $val = "<img src='$i.url' width='$i.width' height='$i.height' align='absmiddle' alt='[mood icon]' /> $val";
                }
                "<div><strong>$key:</strong> $val</div>";
                "</div>";
            }
        }
    }

    # Comments
    $e.comments->print();
    "</div>";
}

function CommentInfo::print() {
    if ($.show_readlink or $.show_postlink) {
        print safe "<div class='Comment'>$*text_left_comments";
        if ($.show_readlink) {
            $this->print_readlink();
        }
        if ($.show_postlink and $.show_readlink) {
            if (clean_url($*img_btwn_comments) != "") {
                """ <img src="$*img_btwn_comments" alt="" /> """;
            } else {
                print safe "$*text_btwn_comments";
            }
        }
        if ($.show_postlink) {
            $this->print_postlink();
        }
        print safe "$*text_right_comments</div>";
    }
}

function Page::print_entry (Entry e)
{
    print_entry($this, $e, null Color, null Color, false);
}

function RecentPage::lay_skip_navigation()
{
    var string nav = "";
    if ($.nav.backward_url != "") {
        $nav = """<a href="$.nav.backward_url">Previous $.nav.backward_count Entries</a>""";
    }
    if ($.nav.forward_url != "" and $.nav.backward_url != "") {
        $nav = "$nav&nbsp;|&nbsp;";
    }
    if ($.nav.forward_url != "") {
        $nav = """$nav<a href="$.nav.forward_url">Next $.nav.forward_count Entries</a>""";
    }
    if ($nav != "") { print "Navigate: ($nav)"; }
}

function RecentPage::lay_bottom_navigation()
{
    "<p class='Bottom'>"; $this->lay_skip_navigation(); "</p>";
}

function RecentPage::print_body
{
    foreach var Entry e ($.entries) {
        $this->print_entry($e);
        if ($e->viewer_sees_ebox()) {
            """<div align="center">""";
            $e->print_ebox();
            "</div>";
        }
    }
}

function FriendsPage::lay_skip_navigation()
{
    var int total = size $.entries;
    var string nav = "";
    if ($.nav.backward_url != "") {
        $nav = """<a href="$.nav.backward_url">Previous $total Friends</a>""";
    }
    if ($.nav.forward_url != "" and $.nav.backward_url != "") {
        $nav = "$nav&nbsp;|&nbsp;";
    }
    if ($.nav.forward_url != "") {
        $nav = """$nav<a href="$.nav.forward_url">Next $total Friends</a>""";
    }
    if ($nav != "") { print "Navigate: ($nav)"; }
}

function FriendsPage::print_entry (Entry e)
{
    var Friend f = $.friends{$e.journal.username};
    print_entry($this, $e, $f.bgcolor, $f.fgcolor, false);
}

function FriendsPage::print_body
{
    foreach var Entry e ($.entries) {
        $this->print_entry($e);
        if ($e->viewer_sees_ebox()) {
            """<div align="center">""";
            $e->print_ebox();
            "</div>";
        }
    }
}

function YearPage::lay_skip_navigation ()
{
    $this->print_year_links();
}

function YearPage::lay_bottom_navigation() { }

function YearPage::print_body() {
    "<h2>$.year</h2>";
    foreach var YearMonth m ($.months) {
        $this->print_month($m);
    }
}

function YearPage::print_year_links ()
{
    "Navigate: ";
    foreach var YearYear y ($.years) {
        if ($y.displayed) {
            " (<span class='Active'>$y.year</span>) ";
        } else {
            " (<a href='$y.url'>$y.year</a>) ";
        }
    }
}

function YearPage::print_month(YearMonth m)
{
    if (not $m.has_entries) { return; }
    "<table class='Month'>";
    "<tr><th class='MonthHeader' colspan='7'>";
    "<a href='$m.url'>"; print $m->month_format(); "</a></th></tr>\n";
    "<tr>";
    foreach var int d (weekdays())
    {
        "<th>"+$*lang_dayname_short[$d]+ "</th>\n";
    }
    "</tr>";
    foreach var YearWeek w ($m.weeks)
    {
        $w->print();
    }
    "</table>\n";
}

function YearWeek::print() {
    "<tr valign='top'>";
    if ($.pre_empty) { "<td class='empty' colspan='$.pre_empty'></td></td>"; }
    foreach var YearDay d ($.days)
    {
        "<td>$d.day";
        if ($d.num_entries)
        {
            "<div align='center'><a href='$d.url'><strong>$d.num_entries</strong></a></div>";
        } else {
            "<br /><br />";
        }
        "</td>";
    }
    if ($.post_empty) { "<td class='empty' colspan='$.post_empty'></td></td>"; }
    "</tr>";
}

function DayPage::lay_skip_navigation()
{
    "Navigate: (<a href='$.prev_url'>Previous Day</a>&nbsp;|&nbsp;<a href='$.next_url'>Next Day</a>)";
}

function DayPage::lay_bottom_navigation()
{
    """
<table style="border-top: thin solid $*headerbar_bevel_color;" width="100%">
  <tr>
    <td width="33%">&larr; <a href="$.prev_url">Previous day</a></td>
    <td width="34%" align="center">(<a href="$.base_url/calendar">Calendar</a>)</td>
    <td width="33%" align="right"><a href="$.next_url">Next day</a> &rarr;</td>
  </tr>
</table>
    """;
}

function DayPage::print_body ()
{
    if (not $.has_entries) {
        "<h2>"; print $.date->date_format($*date_format); "</h2>";
        print "<p>(No journal entries for this day.)</p>";
    } else {
        foreach var Entry e ($.entries) {
            $this->print_entry($e);
            if ($e->viewer_sees_ebox()) {
                """<div align="center">""";
                $e->print_ebox();
                "</div>";
            }
        }
    }
}

function EntryPage::print_body ()
{
        set_handler("unscreen_comment_#", [
                                           [ "style_bgcolor", "cmtbar#", "$*comment_bar_one_bgcolor", ],
                                           [ "style_color", "cmtbar#", "$*comment_bar_one_fgcolor", ],
                                           ]);
        set_handler("screen_comment_#", [
                                         [ "style_bgcolor", "cmtbar#", "$*comment_bar_screened_bgcolor", ],
                                         [ "style_color", "cmtbar#", "$*comment_bar_screened_fgcolor", ],
                                         ]);


    print_entry($this, $.entry, null Color, null Color, $.viewing_thread);
    if ($.entry.comments.enabled and $.comment_pages.total_subitems > 0)
    {
        $this->print_multiform_start();
        print "<h2>Comments:</h2><div class='Comments'><div style='margin-left: 30px;'>";
        if ($.comment_pages.total_subitems > 0) {
            $.comment_pages->print();
            $this->print_comments($.comments);
        }
        "</div></div>";
        if ($this.multiform_on) {
            "<h2>Mass Action</h2><div class='Comments'><div style='margin-left: 30px;'>";
            $this->print_multiform_actionline();
            $this->print_multiform_end();
            "</div></div>";
        }
    }
}

function EntryPage::print_comment (Comment c) {
    var Color background; var Color color;
    if ($c.screened) {
        $background = $*comment_bar_screened_bgcolor;
        $color = $*comment_bar_screened_fgcolor;
    } elseif ($c.depth % 2) {
        $background = $*comment_bar_one_bgcolor;
        $color = $*comment_bar_one_fgcolor;
    } else {
        $background = $*comment_bar_two_bgcolor;
        $color = $*comment_bar_two_fgcolor;
    }
    var string poster = defined $c.poster ? $c.poster->as_string() : "<i>(Anonymous)</i>";
    var string sub_icon;
    if (defined $c.subject_icon) {
        $sub_icon = $c.subject_icon->as_string();
    }
    "<a name='$c.anchor'></a><div id='cmtbar$c.talkid' style='background-color: $background; color: $color; margin-top: 10px; width: 100%'>";
    "<table cellpadding='2' cellspacing='0' summary='0' style='width: 100%'><tr valign='top'>";
    if (defined $c.userpic and $*comment_userpic_style != "off") {
        var int w = $c.userpic.width;
        var int h = $c.userpic.height;
        # WARNING: this will later be done by the system (it'll be a
        # constructional property), so don't copy this hack into your
        # layout layers or you'll be messed up later.
        if ($*comment_userpic_style == "small") {
            $w = $w / 2;
            $h = $h / 2;
        }
        print "<td style='width: 102px'><img src='$c.userpic.url' width='$w' height='$h' alt='[User Picture]' /></td>";
    }

    "<td style='width: 100%'><table style='width: 100%'><tr>";

    ### From, date, etc
    "<td align='left' style='width: 50%'>";
      print "<table>";
      print "<tr><th align='right'>From:</th><td>$poster</td></tr>\n";
      print "<tr><th align='right'>Date:</th><td style='white-space: nowrap'>";
        print $c->time_display($*datetime_comments_format, "none") + "</td></tr>";
      if ($c.metadata{"poster_ip"}) { print "<tr><th align='right'>IP Address:</th><td>(" + $c.metadata{"poster_ip"} + ")</td></tr>"; }
    "</table></td>";

    ### Gadgets
    "<td align='right' style='width: 50%'>";
    if ($this.multiform_on) {
        " <label for='ljcomsel_$c.talkid'>$*text_multiform_check</label>";
        $c->print_multiform_check();
    }
    $c->print_linkbar();
    "</td></tr>";

    ### Subject / icon
    print "<tr valign='top'><td style='width: 50%'>";
    print (defined $c.subject_icon or $c.subject != "") ? "<h3>$c.subject_icon $c.subject</h3>" : "";
    print "</td>";

    ### Permalink
    print "<td style='width: 50%' align='right'><strong>(<a href='$c.permalink_url'>Link</a>)</strong></td></tr>";

    print "</table></td></tr></table></div>";
    print "<div style='margin-left: 5px'>"; $c->print_text(); "</div>";
    print "<div style='margin-top: 3px; font-size: smaller'>";
    if ($c.frozen) {
        print """(Replies frozen) """;
    } else {
        print """(<a href='$c.reply_url'>Reply to this</a>) """;
    }
    if ($c.parent_url != "") { "(<a href='$c.parent_url'>Parent</a>) "; }
    if ($c.thread_url != "") { 
		"(<a href='$c.thread_url'>Thread</a>) "; 
		var Link expand_link = $c->get_link("expand_comments");
		if (defined $expand_link) {
			println """(<a href="$c.thread_url" onClick="Expander.make(this,'$c.thread_url','$c.talkid'); return false;">$*text_expand_link</a>)""";
		}		
	}
    "</div>";
}

function EntryPage::print_comment_partial (Comment c) {
    var string poster = defined $c.poster ? $c.poster->as_string() : "<i>$*text_poster_anonymous</i>";
    var string subj = $c.subject != "" ? $c.subject : $*text_nosubject;
    print safe "<a href='$c.permalink_url'>$subj</a> - $poster";
    var Link expand_link = $c->get_link("expand_comments");
    if (defined $expand_link) {
        """ <a href="$c.thread_url" onClick="Expander.make(this,'$c.thread_url','$c.talkid'); return false;">$*text_expand_link</a>""";
    }
}

function ReplyPage::print_body ()
{
    var string time = $.replyto.time->time_format($*time_format);

    if (not $.entry.comments.enabled)
    {
        print "<h2>$*text_reply_nocomments_header</h2><p>$*text_reply_nocomments</p>";
        return;
    }

    if ($.replyto isa Entry) {
        var Entry en = $.replyto as Entry;

        "<h2>" + $.replyto.time->date_format($*date_format) + "</h2>";
        print_entry($this, $en, null Color, null Color, false);
    } else {
        "<h2>" + $.replyto.time->date_format($*date_format) + "</h2>";

        "<div class='H3Holder'>";

        "<div class='Picture'>";
        print defined $.replyto.poster ? $.replyto.poster->as_string() : "<i>(Anonymous)</i>";
        if (defined $.replyto.userpic) { "<div><img src='$.replyto.userpic.url' /></div>"; }
        "</div>";

        # Time / Subject / Security
        var string subject = ($.replyto.subject ? " - <em>$.replyto.subject</em>" : "");
        "<h3><span>$time$subject</span></h3>";

        "<p>"; $.replyto->print_text(); "</p>";
        "<div class='Comment'><a href='$.entry.comments.read_url'>Read Comments</a></div>";
        "</div>";
    }

    print "<h2>Reply:</h2>";
    $.form->print();
}

function MonthPage::print_body {
    """<div class="Listing">""";
    "<form method='post' action='$.redir.url'><center>";
    $.redir->print_hiddens();
    if ($.prev_url != "") { "[<a href='$.prev_url'>&lt;&lt;&lt;</a>]\n"; }
    if (size $.months > 1) {
        "<select name='redir_key'>\n";
        foreach var MonthEntryInfo mei ($.months) {
            var string sel;
            if ($mei.date.year == $.date.year and $mei.date.month == $.date.month) {
                $sel = " selected='selected'";
            }
            "<option value='$mei.redir_key'$sel>" + $mei.date->date_format($*lang_fmt_month_long) + "</option>";
        }
        "</select>\n<input type='submit' value='View' />";
    }
    if ($.next_url != "") { "\n[<a href='$.next_url'>&gt;&gt;&gt;</a>]\n"; }
    "</center></form>\n<dl>";
    foreach var MonthDay d ($.days) {
        if ($d.has_entries) {
            "<dt><a href=\"$d.url\"><b>";
            print lang_ordinal($d.day);
            "</b></a></dt>\n<dd>";
            $d->print_subjectlist();
            "</dd>\n";
        }
    }
    "</dl>\n";
    "</div>\n";
}


function print_theme_preview ()
{
  """<table width='100%' bgcolor='$*main_bgcolor' cellpadding='3' border='0'><tr valign='top'>
<td width='30' bgcolor='$*sidebar_color'>&nbsp;</td>
<td width='30'>&nbsp;</td>
<td>
<h2 style='background-color: $*headerbar_bgcolor; color: $*headerbar_fgcolor; border-bottom: thin solid $*headerbar_bevel_color; font: normal 1.3em Georgia, serif; line-height: 1.3;'>Dec. 22nd, 2002</h2>
<div style='clear: both; padding-left: 2ex; border-left: thin solid $*border_color; border-bottom: thin solid $*border_color; margin-bottom: 1em; '>
<h3 style='color: $*highlight_fgcolor; font: medium sans-serif'><span style='background-color: $*highlight_bgcolor; border-right: thin solid $*border_color; border-bottom: thin solid $*border_color; padding-right: 0.5ex;'>08:46 pm - <em style='color: $*meta_color; font-style: normal;'>subject</em></span></h3>
<p style='margin-top: 0; text-align: justify; font-family: serif; font-size: 12pt; color: $*main_fgcolor;'>Words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words words</p>

<div style='font-size: 0.7em; margin-top: -1em; text-align: right; font-size: 8pt; color: $*main_fgcolor;'>(<a style='color: $*link_color;' href='#'>1 comment</a>&nbsp;|&nbsp;<a style='color: $*link_color;' href='#'>Leave a comment</a>)</div>
</div>

</td></tr>
</table>""";
}
