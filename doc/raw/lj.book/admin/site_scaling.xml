<chapter id="lj.site_scaling">

<title>Running a Busy Site</title>

<para><emphasis role="strong">Tips on growing from a small website</emphasis></para>

<blockquote><para>As the chapter on installation requirements explains:
There are no specific hardware requirements for a &lj; installation,
but &apache;/&modperl; and &mysql; can utilize a lot of memory very quickly.
Determining the right amount of processor speed, storage space, and
<acronym>RAM</acronym> depends on how busy your &lj; installation will be.
A simple rule of thumb to remember is that posts and comments drive site traffic, not
necessarily the presence of more users.</para></blockquote>

<para>As your site grows, move &mysql; onto its own (physical) server.
&mysql; will benefit from the extra memory, as will &apache;/&modperl;.</para>

<para>Consider putting static content, such as images, on a subdomain
 attached to another server: static.example.com. Look at using a webserver
 like <ulink url="http://www.acme.com/software/thttpd/">thttpd</ulink>,
<ulink url="http://www.lighttpd.net/">lighttpd</ulink>, &perlbal; or a
minimal &apache; setup without &modperl;, (for serving the static
content residing on a separate server; &lj; requires &apache;). 
There is little benefit in running <acronym>CPU</acronym>-expensive &modperl; 
&amp; &apache; processes just for serving images. </para>

<para>If you are not able to do that, tweak your &lj; configuration
so images are under a different port,
 like <uri><replaceable>www.example.com:81</replaceable></uri>,
and run another <systemitem class="daemon">webserver</systemitem> daemon
instance on that port (not just a virtual host inside
a <parameter>&lt;VirtualHost&gt;</parameter> container, another instance of
the &apache; daemon &mdash; virtual hosts would use &modperl;).</para>

<para>Use appropriate values for &apache; directives like
<parameter>MaxRequestsPerChild</parameter> and
 <parameter>MaxClients</parameter>, based on your hardware
and traffic.</para>

<!-- both are small 'sections', so within one section for now -->

<para><emphasis role="strong">Scaling for large sites</emphasis></para>
<para>Maintaining a busy database-backed website involves more skills than you
need if you are running a small installation for development-only or for a small
group of friends. You should consider employing a systems administrator to look
after the servers. This chapter is intended to point to a few resources for
information on running a large, scalable installation.</para>

<para>Brad Fitzpatrick, the original creator of &lj;, has given presentations
about &lj;/&ljcom; infrastructure and scaling, at technical conferences. You
can find slides/other materials on the <ulink url="http://danga.com/words/">&danga;</ulink> website.</para>

<para>You can find information about database master-master cluster replication
through a search engine; some introductory information is 
<ulink url="http://www.howtoforge.com/mysql_master_master_replication">&mysql; Master-Master Replication Tutorial</ulink>.</para>

<para>&memcached; was created so instead of relying on disk reads which are
expensive (slow), the installation could use memory more (cheap, fast).
Unsurprisingly, &memcached; requires <hardware>memory</hardware>
(<acronym>RAM</acronym>). To give you an idea, the amount of RAM available on
&ljcom; for &memcached; was 40GB, in late 2003. The amount of accounts
<quote>active in some way</quote> at that time was in excess of 1.9 million,
from a total of approximately 4.8 million total accounts. The default
&memcached; setting for maximum amount of memory to use for object storage is 64
megabytes. Smaller needs call for less memory.</para>

<para>Information about &memcached; is available on the &dangaweb; site.</para>

</chapter>

