<variablelist><title>Administrative Console Commands</title>
<varlistentry>
  <term><literal role="console.command">allow_open_proxy</literal></term>
  <listitem><para>
Marks an IP address as not being an open proxy for the next 24 hours.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>ip</title>
      <para>The IP address to mark as clear.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>forever</title>
      <para>Set to 'forever' if this proxy should be allowed forever.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">ban_list</literal></term>
  <listitem><para>
List banned users.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>Optional; list bans in a community you maintain, or any user if you have the 'finduser' priv.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">ban_set</literal></term>
  <listitem><para>
Ban another user from posting in your journal.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>This is the user which the logged in user wants to ban.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>community</title>
      <para>Optional, to ban a user from a community you run.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">ban_unset</literal></term>
  <listitem><para>
Remove a ban on a user.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>The user that will be unbanned by the logged in user.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>community</title>
      <para>Optional, to unban a user from a community you run.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">change_community_admin</literal></term>
  <listitem><para>
Change the ownership of a community.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>community</title>
      <para>The username of the community.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>new_owner</title>
      <para>The username of the new owner of the community.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">change_journal_status</literal></term>
  <listitem><para>
Change the status of an account.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>account</title>
      <para>The account to update.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>status</title>
      <para>One of 'normal', 'memorial', 'locked'.  Memorial accounts allow new comments to entries, locked accounts do not allow further comments.  Entries are blocked either way.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">change_journal_type</literal></term>
  <listitem><para>
Change a journal's type.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>journal</title>
      <para>The username of the journal that type is changing.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>type</title>
      <para>Either 'person', 'shared', or 'community'.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>owner</title>
      <para>This is required when converting a personal journal to a community or shared journal, or the reverse. If converting to a community/shared journal, 'owner' will become the maintainer. Otherwise, the account will adopt the email address and password of the 'owner'. Only users with the 'changejournaltype' priv can specify an owner for an account.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">comment</literal></term>
  <listitem><para>
Manage comments in a user's account.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>action</title>
      <para>The action to take on the comment: screen, unscreen, freeze, unfreeze, delete, delete_thread.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>url</title>
      <para>The URL to the comment. (Use the permanent link that shows this comment topmost.)</para>
      </formalpara></listitem>
      <listitem><formalpara><title>reason</title>
      <para>Reason this action is being taken.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">community</literal></term>
  <listitem><para>
Add or remove a member from a community.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>community</title>
      <para>The username of the community.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>action</title>
      <para>Only <emphasis role='bold'>remove</emphasis> is supported right now.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>user</title>
      <para>The user you want to remove from the community.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">deletetalk</literal></term>
  <listitem><para>
Delete a comment.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>The username of the journal comment is in.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>itemid</title>
      <para>The itemid of the post to have a comment deleted from it.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>talkid</title>
      <para>The talkid of the comment to be deleted.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">disable_comm_promo</literal></term>
  <listitem><para>
Sets the disabled status of community promos for a given community
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>Username of community for which status should be modified</para>
      </formalpara></listitem>
      <listitem><formalpara><title>status</title>
      <para>'on' to disable community promos, 'off' enable community promos</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">expunge_userpic</literal></term>
  <listitem><para>
Expunge a user picture icon from the site.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>The username of the picture owner.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>picid</title>
      <para>The id of the picture to expunge.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">faqcat</literal></term>
  <listitem><para>
Tool for managing FAQ categories.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>command</title>
      <para>One of: list, delete, add, move.  'list' shows all the defined FAQ
categories, including their catkey, name, and sortorder.  Also, it
shows all the distinct catkeys that are in use by FAQ.  'add' creates
or modifies a FAQ category.  'delete' removes a FAQ category (but not
the questions that are in it). 'move' moves a FAQ category up or down
in the list.
</para>
      </formalpara></listitem>
      <listitem><formalpara><title>commandargs</title>
      <para>'add' takes 3 arguments: a catkey, a catname, and a sort order field.
'delete' takes one argument: the catkey value.  'move' takes two
arguments: the catkey and either the word "up" or "down".
</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">find_user_cluster</literal></term>
  <listitem><para>
Finds the cluster that the given user's journal is on.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>The user to locate.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">finduser</literal></term>
  <listitem><para>
Find a user by a criteria.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>criteria</title>
      <para>Currently the only known criterias are 'email', 'userid', or 'user'</para>
      </formalpara></listitem>
      <listitem><formalpara><title>data</title>
      <para>The thing you know about the user, either their username, userid, or their email address.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">friend</literal></term>
  <listitem><para>
List your friends, add a friend, or remove a friend.  Optionally, add friends to friend groups.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>command</title>
      <para>Either 'list' to list friend, 'add' to add a friend, or 'remove' to remove a friend.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>username</title>
      <para>The username of the person to add or remove when using the add or remove command.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>group</title>
      <para>When using command 'add', this optional parameter can list the name of a friend group to add the friend to.  The group must already exist.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>fgcolor</title>
      <para>When using command 'add', this optional parameter specifies the foreground color associated with this friend. The parameter must have the form "fgcolor=#num" where 'num' is a 6-digit hexadecimal number.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>bgcolor</title>
      <para>When using command 'add', this optional parameter specifies the background color associated with this friend. The parameter must have the form "bgcolor=#num" where 'num' is a 6-digit hexadecimal number.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">get_maintainer</literal></term>
  <listitem><para>
Finds out the current maintainer(s) of a community or the communities that a user maintains.  If you pass a community as the argument, the maintainer(s) will be listed.  Otherwise, if you pass a user account, the account(s) they maintain will be listed.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>community or user name</title>
      <para>The username of the account you want to lookup.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">get_moderator</literal></term>
  <listitem><para>
Finds out the current moderator(s) of a community or the communities that a user moderates.  If you pass a community as the argument, the moderator(s) will be listed.  Otherwise, if you pass a user account, the account(s) they moderate will be listed.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>community or user name</title>
      <para>The username of the account you want to lookup.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">getemail</literal></term>
  <listitem><para>
Get a user's email address. (for emailing them about TOS violations)
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>The username of the person whose email address you'd like to see.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">help</literal></term>
  <listitem><para>
Get help on admin console commands
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>command</title>
      <para>The command to get help on.  If ommitted, prints a list of commands.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">infohistory</literal></term>
  <listitem><para>
Retrieve the infohistory of a given user
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>user</title>
      <para>The user whose infohistory is being retrieved.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">moodtheme_create</literal></term>
  <listitem><para>
Create a new mood icon set.  Return value from this command is the moodthemeid that you'll need to define pictures for this theme.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>name</title>
      <para>Name of this theme, to appear in various places on the site</para>
      </formalpara></listitem>
      <listitem><formalpara><title>des</title>
      <para>Some description of the theme</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">moodtheme_list</literal></term>
  <listitem><para>
List mood themes, or data about a mood theme
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>themeid</title>
      <para>Optional mood theme ID.  If given, you view the data for that theme, otherwise you see just a list of the available mood themes</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">moodtheme_public</literal></term>
  <listitem><para>
Make a mood theme public or not.  You have to be a moodthememanager to do this.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>themeid</title>
      <para>Mood theme ID number.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>setting</title>
      <para>Either 'Y' or 'N' to make it public or not public, respectively.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">moodtheme_setpic</literal></term>
  <listitem><para>
Change data for a mood theme.  If picurl, width, or height is empty or zero, the data is deleted.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>themeid</title>
      <para>Mood theme ID number.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>moodid</title>
      <para>Mood ID number.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>picurl</title>
      <para>URL to picture to show for this moodid in this themeid.  If a public one, use /img/mood/themename/file.gif</para>
      </formalpara></listitem>
      <listitem><formalpara><title>width</title>
      <para>Width of picture</para>
      </formalpara></listitem>
      <listitem><formalpara><title>height</title>
      <para>Height of picture</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">print</literal></term>
  <listitem><para>
This is a debugging function.  Given an arbitrary number of meaningless arguments, it'll print each one back to you.  If an argument begins with a bang (!) then it'll be printed to the error stream instead.
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">priv</literal></term>
  <listitem><para>
Grant or revoke user privileges.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>action</title>
      <para>'grant', 'revoke', or 'revoke_all' to revoke all args for a given priv</para>
      </formalpara></listitem>
      <listitem><formalpara><title>privs</title>
      <para>Comma-delimited list of priv names or priv:arg pairs, or package names (prefixed like '#mypkg')</para>
      </formalpara></listitem>
      <listitem><formalpara><title>usernames</title>
      <para>Comma-delimited list of usernames</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">priv_package</literal></term>
  <listitem><para>
Moderate packages of admin privs.  Basic workflow: priv_package create mypkg "Test Package", priv_package add mypkg admin:*, priv_package list.  To actually grant a package to someone, priv grant #mypkg username.  Works for revoke as well.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>command</title>
      <para>One of "list", "create", "add", "remove", "delete".</para>
      </formalpara></listitem>
      <listitem><formalpara><title>package</title>
      <para>The package to operate on.  Use the short name.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>arg</title>
      <para>If command is "list", no argument to see all packages, or provide a package to see the privs inside.  For "create" and "delete" of a package, no argument.  For "add" and "remove", arg is the privilege being granted in "privname:privarg" format.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">reset_email</literal></term>
  <listitem><para>
Resets the email address for a given account
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>username</title>
      <para>The account to reset the email address for.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>value</title>
      <para>Email address to set the account to.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>reason</title>
      <para>Reason for the reset</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">reset_password</literal></term>
  <listitem><para>
Resets the password for a given account
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>username</title>
      <para>The account to reset the email address for.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>reason</title>
      <para>Reason for the password reset.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">set</literal></term>
  <listitem><para>
Set a userprop.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>community</title>
      <para>Community to set property for, if you're a maintainer.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>propname</title>
      <para>Property name to set.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>value</title>
      <para>Value to set property to.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">set_badpassword</literal></term>
  <listitem><para>
Change a journal's badpassword prop.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>journal</title>
      <para>The username of the journal that type is changing.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>on/off</title>
      <para>Either 'on' or 'off' which is whether to mark them as having a bad password or not.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>note</title>
      <para>Required information about why you are setting this status.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">shared</literal></term>
  <listitem><para>
Add or remove access for a user to post in a shared journal.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>sharedjournal</title>
      <para>The username of the shared journal.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>action</title>
      <para>Either <emphasis role='bold'>add</emphasis> or <emphasis role='bold'>remove</emphasis>.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>user</title>
      <para>The user you want to add or remove from posting in the shared journal.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">suspend</literal></term>
  <listitem><para>
Suspend a user's account.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>username or email address</title>
      <para>The username of the person to suspend, or an email address to suspend all accounts at that address.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>reason</title>
      <para>Why you're suspending the account.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">syn_editurl</literal></term>
  <listitem><para>
Changes the syndication URL for a syndicated account.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>username</title>
      <para>The username of the syndicated journal.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>newurl</title>
      <para>The new URL to syndicate the journal from.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">syn_merge</literal></term>
  <listitem><para>
Merge two syndicated accounts into one, keeping an optionally specified URL for the final. Sets up redirection between from_user and to_user, swapping feed URLs if there will be a conflict.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>from_user</title>
      <para>syndicated account to merge into another.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>to_user</title>
      <para>syndicated account to merge 'from_user' into.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>url</title>
      <para>URL to use for 'to_user' once merge is complete. You should use the direct URL to the feed, not the URL to a blog even if it supports auto-discovery.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">tag_display</literal></term>
  <listitem><para>
Set tag visibility to S2.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>tag</title>
      <para>The tag to change the display value of.  This must be quoted if it contains any spaces.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>value</title>
      <para>A boolean value: 1/on/true/yes or 0/off/false/no.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">tag_permissions</literal></term>
  <listitem><para>
Set permission levels for the tag system.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>add level</title>
      <para>Accounts at this level are allowed to assign pre-existing tags to entries.  Accounts are not allowed to define new tags or remove tags from entries.  The value can be one of "public", "private", "friends", or the name of a friend group already defined.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>control level</title>
      <para>Accounts at this level have full control over tags and can define new ones, delete old ones, rename, merge, and perform all other functions of the tags system.  Potential values are the same as in the add level.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><literal role="console.command">unsuspend</literal></term>
  <listitem><para>
Unsuspend a user's account.
    <itemizedlist>
      <title>Arguments:</title>
      <listitem><formalpara><title>username or email address</title>
      <para>The username of the person to unsuspend, or an email address to unsuspend all accounts at that address.</para>
      </formalpara></listitem>
      <listitem><formalpara><title>reason</title>
      <para>Why you're unsuspending the account.</para>
      </formalpara></listitem>
    </itemizedlist>
  </para></listitem>
</varlistentry>
</variablelist>
