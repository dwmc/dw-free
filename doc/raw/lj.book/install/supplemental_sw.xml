<chapter id="lj.install.supplemental_sw" status="prelim">
  <title>Supplemental Software</title>

<blockquote><abstract><para>
<emphasis role="strong">These parts are grouped together separately because
for some setups, like those for small groups, those running on limited
hardware, or those for development-only, you may not want them.</emphasis></para>
<para>
<emphasis role="strong">If you are running an installation for a small group
of people, or a development installation, you can probably skip this
chapter.</emphasis></para>

<para>The list of additional modules/packages to install and setup tasks
described here cover items like:</para>
<!-- not using entities here for some of these components, because the callout
element is only allowed inside certain elements (like systemitem) -->
<para><itemizedlist>
<listitem><para><systemitem><acronym>SSL</acronym> <co id="COssltask" linkends="ssltaskCO" /></systemitem></para></listitem>
<listitem><para><systemitem><application>Perlbal</application> <co id="COperlbaltask" linkends="perlbaltaskCO" /></systemitem></para></listitem>
<listitem><para>&memcached;</para></listitem>
<listitem><para>&mogfs;</para></listitem>
<listitem><para><systemitem><application>FotoBilder</application> integration <co id="COfbintengration" linkends="fbintengrationCO" /></systemitem></para></listitem>
</itemizedlist></para>

  <para><calloutlist>
      <callout arearefs="COssltask" id="ssltaskCO">
            <para>Only needed if you are setting up a separate
            &ssl;-enabled secure site area. This requires its own
            <acronym>IP</acronym>.</para>
      </callout>
      <callout arearefs="COperlbaltask" id="perlbaltaskCO">
            <para>A <quote>load balancer</quote>, for distributing
            load over a number of servers.</para>
      </callout>
      <callout arearefs="COfbintengration" id="fbintengrationCO">
            <para>A picture hosting web-application, with
            its own, separate, manual and codebase. &fb; configuration
            notes here only cover integrating a &fb; install with
            a &lj; install.</para></callout>
  </calloutlist></para>
</abstract></blockquote>

    <section id="lj.install.supplemental_sw.dependencies">
        <title>Install extra required packages and modules</title>

<para>
You need to install some extra Perl modules and system components for
supplemental software such as &perlbal; and &mogfs;. These are not needed by the core
&lj; software, and are not checked for by the &lj; configuration checking tool
 (<filename>checkconfig.pl</filename>).</para>

<para><screen><prompt>#</prompt><userinput> <command>cd</command> &envarljhome;</userinput>
<prompt>#</prompt><userinput> <command>apt-get <option>install</option></command> <package>memcached</package> <package>openssl</package> <package>postfix</package></userinput></screen></para>

<note><title>Installing &memcached;</title><para>
Many &linux; installations have &memcached; packages available.
If you are using &debian;, you can install it as above. </para>
<para>
If you prefer to install and set it up yourself, please see the &dangaweb;
website for installation advice. For convenience, the server and client &api; code
is automatically checked out from the &svn; repository into your &lj; <acronym>cvs</acronym>
subdirectories: <filename class="directory">/memcached/server</filename> and
<filename class="directory">memcached/api/perl</filename>, respectively.</para>
<para>The <package>Cache::Memcached</package> module on &cpan; is
just the client side. This often confuses people. You also need to make sure you are
running the <emphasis>server</emphasis> component (provides
the <systemitem class="daemon">memcached</systemitem> daemon).</para></note>

<para>
As before, installing installing binary packages of modules provided through your &linux; distribution
is probably easiest. Modules for which no binary package is available can be obtained through &cpan;, as discussed
at <xref linkend="lj.install.perl_setup.modules" />.</para>

<informaltable id='table-lj-supplemental_deps' frame='none'>
    <tgroup cols='3'><tbody>
    <row><entry><package>BSD::Resource</package></entry><entry>Required for &perlbal;.</entry><entry><package>libbsd-resource-perl</package></entry></row>
    <row><entry><package>Cache::Memcached</package></entry><entry>&memcached; client &api; module</entry><entry><package>libcache-memcached-perl</package></entry></row>
    <row><entry><package>Crypt::SSLeay</package></entry><entry>Required for &ssl; support.</entry><entry><package>libnet-ssleay-perl</package></entry></row>    
    <row><entry><package>Data::Queue::Persistent</package></entry><entry>Required for persistent queues for &mogfs;.</entry><entry></entry></row>
    <row><entry><package>DateTime::TimeZone</package></entry><entry>Required for S2 timezone support.</entry><entry><package>libdatetime-timezone-perl</package></entry></row>
    <row><entry><package>Danga::Socket</package></entry><entry>Required for &perlbal;, and &mogfs; daemons.</entry><entry><package>libdanga-socket-perl</package></entry></row>
    <row><entry><package>IO::AIO</package></entry><entry>(version 1.6 or greater)</entry><entry>libio-aio-perl</entry></row>
    <row><entry><package>IO::Socket::SSL</package></entry><entry>(version 0.97 or greater)</entry><entry><package>libio-socket-ssl-perl</package></entry></row>
    <row><entry><package>JSON::Any</package></entry><entry>Required for &thesch; server/workers</entry><entry>libjson-any-perl</entry></row>
    <row><entry><package>JSON</package></entry><entry>Required for &thesch; server/workers</entry><entry><package>libjson-perl</package></entry></row>    
    <row><entry><package>Net::SSLeay</package></entry><entry>Required for &ssl; support.</entry><entry><package>libnet-ssleay-perl</package></entry></row>
    <row><entry><package>Net::Netmask</package></entry><entry>Required for &perlbal; reverse-proxying.</entry><entry><package>libnet-netmask-perl</package></entry></row>
    <row><entry><package>Perlbal</package></entry><entry></entry><entry></entry></row>
    <row><entry><package>Sys::Syscall</package></entry><entry>Required for &perlbal;.</entry><entry><package>libsys-syscall-perl</package></entry></row>
    <row><entry><package>Text::SimpleTable</package></entry><entry>Required for &thesch; job submission reports.</entry><entry><package>libtext-simpletable-perl</package></entry></row>    
    </tbody></tgroup>
</informaltable>

<para>
&perlbal; / &gearman; can optionally use <package>Devel::Gladiator</package>,
and <package>Devel::Cycle</package> for memory tracking and debugging.
If you wish to install these, they are available through the &svn;
repository: <uri>http://code.sixapart.com/svn/Devel-Gladiator/</uri> and
&cpan; (or <package>libdevel-cycle-perl</package> on &debian;), respectively.</para>

    </section>

    <section id="lj.install.supplemental_sw.multiple_db">
        <title>Setting up multiple database servers</title>

<para>
If you want your installation to use multiple &mysql; &db; servers, you need
to create databases for these. This is in addition to the 
main <quote><database>livejournal</database></quote> database you created earlier.</para>

<para><screen><prompt>$</prompt> <userinput>mysql -uroot -p</userinput>
<prompt>mysql></prompt> <userinput>CREATE DATABASE lj_c1;</userinput>
<prompt>mysql></prompt> <userinput>CREATE DATABASE lj_c2;</userinput>

<prompt>mysql></prompt> <userinput>GRANT ALL PRIVILEGES ON lj_c1.* TO </userinput>
<prompt>     ></prompt> <userinput>lj@'localhost' IDENTIFIED BY 'ljpass';</userinput>
<prompt>mysql></prompt> <userinput>GRANT ALL PRIVILEGES ON lj_c2.* TO </userinput>
<prompt>     ></prompt> <userinput>lj@'localhost' IDENTIFIED BY 'ljpass';</userinput>
<prompt>     ></prompt> <userinput>\q</userinput></screen></para>

<para>
Now, adjust the
 <link linkend="ljconfig.dbinfo"><literal role="variable">%LJ::DBINFO</literal></link> hash
 in <filename>ljconfig.pl</filename> to fit your needs.</para>

<para>Here is an example of multiple &mysql; &db; servers running
on <systemitem class="systemname">localhost</systemitem>:</para>

<programlisting><literal role="variable">%DBINFO</literal> = (
    # master must be named 'master'
        'master' =&gt; {
            'host' =&gt; 'localhost',
            'user' =&gt; 'lj',
            'pass' =&gt; 'ljpass',
        },
        'c1' =&gt; {
            'host' =&gt; 'localhost',
            'user' =&gt; 'lj',
            'pass' =&gt; 'ljpass',
            'dbname' =&gt; 'lj_c1',
            'role' =&gt; {
                'cluster1' =&gt; 1,
            },
        },
        'c2' =&gt; {
            'host' =&gt; 'localhost',
            'user' =&gt; 'lj',
            'pass' =&gt; 'ljpass',
            'dbname' =&gt; 'lj_c2',
            'role' =&gt; {
                'cluster2' =&gt; 1,
            },
        },
);</programlisting>

<para>
You also need to set 
 <link linkend="ljconfig.clusters"><literal role="variable">@LJ::CLUSTERS</literal></link>
 and <link linkend="ljconfig.default_cluster"><literal role="variable">$LJ::DEFAULT_CLUSTER</literal></link>,
to something like:</para>
<para><informalexample>
<programlisting><literal role="variable">@CLUSTERS</literal> = (1, 2);
<literal role="variable">$DEFAULT_CLUSTER</literal> = [ 1, 2 ];</programlisting>
</informalexample> </para>

<para>
You can tweak the <literal>host</literal> key configuration within the
<literal role="variable">%LJ::DBINFO</literal> hash to get them configured on
multiple machines.</para>

    </section>

    <section id="lj.install.supplemental_sw.memcached_ssl">
    <title>Configure &memcached; and &ssl;</title>

<para>
This part assumes you have installed the relevant software listed in
<link linkend="lj.install.supplemental_sw.dependencies">section 1</link> of
this chapter.</para>
<para>
Some parts of the site, like the account creation page
- <filename>create.bml</filename>, can use &ssl; if it is available. If
you do not set up an &ssl;-enabled area of the site, other security
like challenge-response authentication is used. As we mentioned in the abstract of
this chapter, &ssl; requires its own <acronym>IP</acronym>. You cannot
use an &apache; name-based <literal>VirtualHost</literal> for &ssl;.</para>

<para>
Through &memcached;, your installation will rely on memory more
instead of slower disk reads. You can learn more about &memcached; on
the &dangaweb; website.</para>

<para>
In <filename>ljconfig.pl</filename>, set up the location of &memcached; servers,
and enable support for &ssl;:</para>
<informalexample>
<programlisting>
<literal role="variable">@LJ::MEMCACHE_SERVERS</literal> = ("127.0.0.1:11211");
<literal role="variable">$LJ::DEV_HAS_REAL_SSL</literal> = 1;   # for development installs. (will be configured later with &perlbal;)
<literal role="variable">$LJ::USE_SSL</literal> = 1;
</programlisting>
</informalexample>

<para>
You also need to set your &ssl; &url; base prefix, in
 <link linkend="ljconfig.sslroot"><literal role="variable">$LJ::SSLROOT</literal></link></para>

<para>If you require users to agree to Terms of Service, and you have a
 <filename>tos-mini.bml</filename> file, you can copy it from the
 <filename class="directory">htdocs</filename> subdirectory to the equivalent
 &ssl; subdirectory: <filename class="directory">ssldocs/legal</filename>.</para>

    </section>

    <section id="lj.install.supplemental_sw.perlbal">
      <title>Configure &perlbal;</title>

<para>
&perlbal; is a Perl-based reverse-proxying load balancer and web server.
It helps distribute site load over a number of servers. A backend can
instruct &perlbal; to fetch the user&apos;s data from a completely separate
server and port and &url;, 100&percnt; transparent to the user. You might use this
to serve images elsewhere (like an image caching service, as part of a content
delivery network).</para>

<para>
One way &lj; can use this is with <quote><systemitem>palimg</systemitem></quote>
files. <systemitem>Palimg</systemitem> files can be used in user styles to
dynamically alter the palette of a <filename class="extension">PNG</filename> or
  <filename class="extension">GIF</filename> image, according to user
customizations. Doing this through the &perlbal; plugin instead of using
&modperl; is more efficient.</para>

    <section id="lj.install.supplemental_sw.perlbal-install">
      <title>Install &perlbal;</title>

<formalpara><title>Settings.</title><para>
You will need the &perlbal; server code from &svn;
(<uri>http://code.sixapart.com/svn/perlbal/trunk/</uri>). It is is
automatically checked out into your cvs subdirectory then
placed in <filename class="directory">&envarljhome;/src/perlbal</filename>
for you. To set it up, build and install the code as before:</para></formalpara>
<para>
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/perlbal</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>
</section>

    <section id="lj.install.supplemental_sw.perlbal-setup">
        <title>Set up &perlbal;</title>
<para>
You will need to create a directory for your configuration file. If you know
what you are doing, you may find it useful to combine the contents of the
 <filename>perlbal.conf</filename> and <filename>ssl.conf</filename> files
under <filename class="directory">&envarljhome;/cvs/perlbal/conf/</filename> into
a single file, and place that under <filename class="directory">/etc/perlbal</filename>.
Alternatively, an example <filename>perlbal.conf</filename> follows.</para>

<para>
<screen><prompt>#</prompt> <userinput><command>mkdir</command> <filename class="directory">/etc/perlbal</filename></userinput>
<prompt>#</prompt> <userinput><command>cp</command> <filename>&envarljhome;/cvs/perlbal/conf/perlbal.conf</filename> <filename class="directory">/etc/perlbal/</filename></userinput></screen></para>
</section>

 <section id="lj.install.supplemental_sw.perlbal.setup-example">
    <title>Example <filename>perlbal.conf</filename></title>
<para>
Now, edit the configuration file.
<screen><prompt>#</prompt> <userinput><command>nano</command> <filename>/etc/perlbal/perlbal.conf</filename></userinput></screen></para>
<para>
Replace <literal>EXAMPLEHOSTNAME.lj</literal> with the full hostname of your domain, or
virtual machine if you are using one (and verify all hostname configurations).
If you will <emphasis>not</emphasis> be using &ssl;, comment out all &ssl; lines.
Similarly, if you are not storing static files (like site images and stylesheets) under
their own subdomain, you can amend or comment out all &apos;stat&apos; lines.</para>

    <programlisting>load palimg
load Vhosts
load AccessControl

SERVER aio_mode = ioaio

CREATE SERVICE uptrack
  SET role = upload_tracker
  SET listen = 127.0.0.1:7002
ENABLE uptrack

CREATE SERVICE ss
  SET listen = 0.0.0.0:80
  SET role = selector
  SET plugins = vhosts
  VHOST *.EXAMPLEHOSTNAME.lj = web_proxy
  VHOST stat.EXAMPLEHOSTNAME.lj = web_stat
ENABLE ss

CREATE POOL web_proxy_pool
  POOL web_proxy_pool ADD 127.0.0.1:8081

CREATE SERVICE web_proxy
  SET role = reverse_proxy
  SET pool = web_proxy_pool
  SET persist_backend = on
  SET max_backend_uses = 10
  SET backend_persist_cache = 2
  SET verify_backend = on
  SET balance_method = random
  SET enable_reproxy = on
  SET upload_status_listeners = 127.0.0.1:7002
  SET buffer_uploads = off
ENABLE web_proxy

CREATE SERVICE ssl_proxy
  SET role = reverse_proxy
  SET pool = web_proxy_pool
  SET listen = 0.0.0.0:443
  SET enable_ssl = on
  SET persist_backend = on
  SET max_backend_uses = 10
  SET backend_persist_cache = 2
  SET verify_backend = on
  SET balance_method = random
  SET enable_reproxy = on
  SET ssl_key_file   = /etc/perlbal/certs/server-key.pem
  SET ssl_cert_file  = /etc/perlbal/certs/server-cert.pem
ENABLE ssl_proxy

CREATE SERVICE web_stat
  SET role = web_server
  SET docroot = /home/lj/htdocs/stc
  SET dirindexing = on
ENABLE web_stat

CREATE SERVICE mgmt
  SET role = management
  SET listen = 127.0.0.1:8065
ENABLE mgmt</programlisting>
</section>

    <section id="lj.install.supplemental_sw.perlbal-complete">
    <title>&ssl; steps and startup</title>
<para>
Create a self-signed certificate and key for &ssl; next. You only need to add
this if you <emphasis>are</emphasis> using &ssl;. If you have already purchased
a signed certificate and have a key, then of course you can use that instead.</para>

<para>
<screen><prompt>$</prompt> <userinput>sudo openssl req -x509 -newkey rsa:1024 -keyout server-key.pem -out server-cert.pem -days 365 -nodes</userinput>
<prompt>$</prompt> <userinput><command>sudo mkdir</command> <filename class="directory">/etc/perlbal/certs</filename></userinput>
<prompt>$</prompt> <userinput><command>sudo mv</command> <filename>server-*.pem</filename> <filename class="directory">/etc/perlbal/certs/</filename></userinput></screen></para>

<para>
Last, start the &perlbal; daemon:
<screen><prompt>#</prompt> <userinput><command>/usr/bin/perlbal <option>-d</option></command></userinput></screen></para>
<para>
If it reports the listening socket is already in use, edit your &apache;
<filename>httpd.conf</filename> file:</para>

<itemizedlist spacing="compact">
<listitem><para>
Replace <parameter>Port</parameter> 80 with <parameter>Listen</parameter> <replaceable>192.170.2.1</replaceable>:8081 for &lj;</para></listitem>
<listitem><para>
Replace <parameter>&lt;VirtualHost</parameter> <replaceable>192.170.2.1</replaceable>:80&gt; with &lt;<parameter>VirtualHost</parameter> <replaceable>192.170.2.1</replaceable>:8081&gt;</para></listitem>
</itemizedlist>

    </section>
    </section>

    <section id="lj.install.supplemental_sw.mogfs">
      <title>Configure &mogfs;</title>

<para>
A &mogfs; setup comprises three components: storage nodes, trackers
(<systemitem class="daemon">mogilefsd</systemitem>), and the
tracker&apos;s database(s). It is a distributed filesystem, allowing file storage
and retrieval, and file replication across devices on different host machines.
All three components can be run on multiple machines, so there is no
single point of failure. A minimum of two machines is recommended. The time
on all machines must be set accurately and kept in sync among the machines.
You can run it on one machine, perhaps for a &lj;  development installation.</para>

<section id="lj.install.supplemental_sw.mogfs-install">
      <title>Install &mogfs;</title>

<para>
First you need the &mogfs; server code from
&svn; (<uri>http://code.sixapart.com/svn/mogilefs/trunk/</uri>). 
This provides the tracker and storage daemon. It is is automatically downloaded
for you into your cvs subdirectory
<filename class="directory">&envarljhome;/cvs/mogilefs/server</filename>.
You can build the code so it is ready for installation, with:</para> 

<para>
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/mogilefs/server</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput></screen></para>
<para>
Assuming everything went well continue to the next step. If you received errors about missing module dependencies when running <command>make <option>test</option></command>, obtain the missing dependencies through your &linux; distribution or &cpan;. Run the next command to install.</para>
<para>
<screen><prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>

<para>
You also need the &mogfs; utilities, these are automatically checked out into
your cvs subdirectory <filename class="directory">&envarljhome;/cvs/mogilefs/utils</filename>.
The utilities themselves (<command>mogadm</command> and <command>mogtool</command>)
are installed into your <filename class="directory">&envarljhome;/bin</filename> directory. 
To set up the necessary libraries for the utilities, build and install the code as before:</para>
<para>
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/mogilefs/utils</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>

<para>
Next, you neeed the &mogfs; client &api; (<package>MogileFS::Client</package>).
from &svn; (<uri>http://code.sixapart.com/svn/mogilefs/trunk/api/perl</uri>). This is
required for the utilities. It is automatically checked out into your cvs subdirectory
<filename class="directory">&envarljhome;/cvs/mogilefs/utils</filename>
and mapped into <filename class="directory">&envarljhome;cgi-bin/MogileFS</filename>.
To set up the necessary libraries, build and install the code as before:</para>
<para>
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/mogilefs/api/perl/MogileFS-Client</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>

</section>

<section id="lj.install.supplemental_sw.mogfs-install-setup">
      <title>Set up &mogfs;</title>
<para>
First set up some directories for your &mogfs; installation:</para>
<para>
<screen><prompt>#</prompt> <userinput><command>mkdir</command> <filename class="directory">/var/mogdata</filename></userinput>
<prompt>#</prompt> <userinput><command>mkdir</command> <filename class="directory">/var/mogdata/dev1</filename></userinput>
<prompt>#</prompt> <userinput><command>chown <option>-R</option></command> <replaceable>lj:lj</replaceable> <filename class="directory">/var/mogdata</filename></userinput></screen></para>

<para>If you are using &perlbal;, you should now set up some further links between directories:
<screen><prompt>$</prompt> <userinput><command>ln <option>-s</option></command> <filename class="directory">&envarljhome;/cvs/perlbal/lib/Perlbal</filename> <filename class="directory">&envarljhome;/cvs/mogilefs/server/lib/Perlbal</filename></userinput>
<prompt>$</prompt> <userinput><command>ln <option>-s</option></command> <filename>&envarljhome;/cvs/perlbal/lib/Perlbal.pm</filename> <filename>&envarljhome;/cvs/mogilefs/server/lib/Perlbal.pm</filename></userinput></screen>
</para>

<para>
Next, enable &mogfs; in <filename>ljconfig.pl</filename>, by uncommenting the
 <link linkend="ljconfig.mogilefs_config"><literal role="variable">%LJ::MOGILEFS_CONFIG</literal></link>
 hash. The default setup in that hash is okay to use. Make sure you explicitly
set the hosts key (it can be an arrayref of <acronym>ip</acronym>:port
combinations) to point to your local &mogfs; server. Add the classes for
serving things like userpics over &mogfs;, at the same time.</para>

<para><programlisting><literal role="variable">%LJ::MOGILEFS_CONFIG</literal> = (
    domain =&gt; 'example.com::lj',   # arbitrary namespace, not DNS domain
    hosts  =&gt; ['127.0.0.1:6001'],
    root =&gt; '/var/mogdata',
    classes =&gt; { userpics => 3,
        captcha =&gt; 2,
        # 'your_class' =&gt; 3,       # define any special &mogfs; classes you need
        },
);

<literal role="variable">$LJ::CAPTCHA_MOGILEFS</literal> = 1;
<literal role="variable">$LJ::USERPIC_MOGILEFS</literal> = 1;</programlisting></para>

<para>
Next, set up database permissions for &mogfs;.</para>
<para>
<screen><prompt>$</prompt> <userinput>mysql -uroot -p</userinput>
<prompt>mysql></prompt> <userinput>GRANT ALL PRIVILEGES ON mogilefs.* TO </userinput>
<prompt>     ></prompt> <userinput>mog@'localhost' IDENTIFIED BY 'mogpass';</userinput>
<prompt>     ></prompt> <userinput>\q</userinput></screen></para>

<para>
Now you should edit the tracker configuration file. You can copy the example file as a starting point.
<screen><prompt>$</prompt> <userinput><command>cp</command> <filename>&envarljhome;/cvs/mogilefs/server/conf/mogilefsd.conf</filename> <filename class="directory">&envarljhome;/etc/</filename></userinput>
<prompt>$</prompt> <userinput><command>nano</command> <filename>&envarljhome;/etc/mogilefsd.conf</filename></userinput></screen></para>

<para>
You should change the values such as <literal>db_user</literal> and
 <literal>db_pass</literal>, to match the values you entered setting up the database in the previous step.</para>
<programlisting># daemonize = 1
db_dsn = DBI:mysql:mogilefs:host=localhost
db_user = mog
db_pass = mogpass
listen = 127.0.0.1:7001
conf_port = 7001
mog_root = /var/mogdata
listener_jobs = 2
delete_jobs = 1
replicate_jobs = 2
reaper_jobs = 1</programlisting>

<para>
Place the necessary directories in your path
<footnote id="mogfs_path"><simpara>The export command is
one long line. It is separated onto multiple lines here for
readability.</simpara></footnote>, and start up the daemons.</para>
<para>
<screen><prompt>$</prompt> <userinput>export PERL5LIB=/home/lj/cvs/Sys-Syscall/lib:
/home/lj/cvs/Danga-Socket/lib:/home/lj/cvs/perlbal/lib:
/home/lj/cvs/gearman/api/perl/Gearman-Client-Async/lib:
/home/lj/cvs/gearman/api/perl/Gearman/lib:
/home/lj/cvs/mogilefs/server/lib:
/home/lj/cvs/mogilefs/api/perl/MogileFS-Client/lib</userinput></screen></para>

<para>
<screen><prompt>$</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/mogilefs/server</filename></userinput>
<prompt>$</prompt> <userinput><command>./mogdbsetup <option>--yes</option></command></userinput>
<prompt>$</prompt> <userinput><command>./mogstored <option>-d</option></command></userinput>
<prompt>$</prompt> <userinput><command>./mogilefsd <option>--daemon</option></command> <option>--config=&envarljhome;<filename><replaceable>/etc/mogilefsd.conf</replaceable></filename></option></userinput>

<prompt>$</prompt> <userinput><command>sleep <option>1</option></command></userinput><footnote id="mogfs_sleep"><simpara>The sleep command is only needed if you are using these commands in a script.</simpara></footnote>
<prompt>$</prompt> <userinput><command>cd</command> <literal>..</literal></userinput>
<prompt>$</prompt> <userinput><command>utils/mogadm</command> <option>--lib=api/perl <replaceable>--trackers=127.0.0.1:7001 host add local --ip=127.0.0.1 --status=alive</replaceable></option></userinput>
<prompt>$</prompt> <userinput><command>utils/mogadm</command> <option>--lib=api/perl <replaceable>--trackers=127.0.0.1:7001 device add local 1</replaceable></option></userinput>
<prompt>$</prompt> <userinput><command>utils/mogadm</command> <option>--lib=api/perl <replaceable>--trackers=127.0.0.1:7001 domain add example.com::lj</replaceable></option></userinput></screen></para>

<para>
You may find it easier to create a script to set the path and execute that sequence of commands,
for starting-up the &mogfs; daemons in future. You are free to figure that out yourself. The domain part in the last line needs to match what you put in your <literal role="variable">%LJ::MOGILEFS_CONFIG</literal> hash for the value of the domain key.</para>

<para>
Last, update the database for &mogfs;, to reflect your setup in <literal role="variable">%LJ::MOGILEFS_CONFIG</literal>.
<screen><prompt>$</prompt> <userinput><command>bin/upgrading/update-db.pl <option>-p</option></command></userinput></screen></para>

</section>
</section>

    <section id="lj.install.supplemental_sw.fb">
      <title>Set up <abbrev>LJ</abbrev> &lt;=&gt; &fb; Integration</title>

<para>
&fb; has its own, separate,
<ulink url="http://www.picpix.com/doc/manual/">manual</ulink> and
<ulink url="http://code.sixapart.com/svn/fotobilder/trunk/">codebase</ulink>.
Its codebase is being integrated into &lj;; it will be discontinued as a separate
project eventually. If you <emphasis>do</emphasis> want to install it,
you also need to set up &perlbal;.</para>

<para>
First, make sure the necessary directories are in place. You also need to set up
<envar>FBHOME</envar>. You can place this into your startup files, as
with <xref linkend="lj.install.ljhome" /></para>
<para>
<screen><prompt>$</prompt> <userinput><command>cd</command> &envarljhome;</userinput>
<prompt>$</prompt> <userinput><command>mkdir</command> <filename class="directory">fb</filename></userinput>
<prompt>$</prompt> <userinput><command>export</command> <envar>FBHOME</envar>=<filename class="directory">/home/lj/fb</filename></userinput>
<prompt>$</prompt> <userinput><command>mkdir</command> <filename class="directory">fb/cvs</filename></userinput>
<prompt>$</prompt> <userinput><command>cd</command> <filename class="directory">fb/cvs</filename></userinput></screen></para>

<para>
Next, get the code from the repository:</para>
<screen><prompt>$</prompt> <userinput><command>svn <option>co</option></command> <uri>http://code.sixapart.com/svn/fotobilder/trunk</uri> <package>fb</package></userinput>
<prompt>$</prompt> <userinput><command>/home/lj/bin/vcv</command> <option>--conf=fb/cvs/multicvs.conf --checkout</option></userinput>
<prompt>$</prompt> <userinput><command>/home/lj/bin/vcv</command> <option>--conf=fb/cvs/multicvs.conf -s</option></userinput>
<prompt>$</prompt> <userinput><command>cd</command> <literal>../</literal></userinput>
<prompt>$</prompt> <userinput><command>./bin/cvsreport.pl <option>-s</option></command></userinput></screen>

<para>
Now set up the database:</para>
<screen><prompt>$</prompt> <userinput>mysql -uroot -p</userinput>
<prompt>mysql></prompt> <userinput>CREATE DATABASE ON fotobilder.* TO </userinput>
<prompt>     ></prompt> <userinput>fb@'localhost' IDENTIFIED BY 'fbpass';</userinput>
<prompt>     ></prompt> <userinput>\q</userinput></screen>

<para>
Run <command>bin/checkconfig.pl</command>. If it reports any missing
packages, install them then re-run that command again.</para>

<para>
Now you need to copy across the configuration file and update the database.
<screen><prompt>$</prompt> <userinput><command>cp</command> <filename>doc/fbconfig.pl</filename> <filename class="directory">etc/</filename></userinput>
<prompt>$</prompt> <userinput><command>mkdir</command> <filename class="directory">logs</filename></userinput>
<prompt>$</prompt> <userinput><command>./bin/upgrading/update-db.pl <option>-r -p</option></command></userinput>
<prompt>$</prompt> <userinput><command>bin/upgrading/texttool.pl <option>load <replaceable>en en_YS</replaceable></option></command></userinput></screen></para>

<para>
You can make the following updates in <filename>ljconfig.pl</filename> to integrate
the two installations:
<programlisting>{
    <literal role="variable">%FOTOBILDER_IP</literal> = (
            '127.0.0.1' =&gt; 1,
            '192.170.2.5' =&gt; 1, # change for your <acronym>IP</acronym>
            );

    <literal role="variable">$FB_DOMAIN</literal> = "pics.$DOMAIN";
    <literal role="variable">$FB_SITEROOT</literal> = "http://$FB_DOMAIN";

    # referrer domain names that &lj; will redirect
    # users to after login. Should usually match <literal role="variable">$LJ::FB_DOMAIN</literal>:
    <literal role="variable">$REDIRECT_ALLOWED{$FB_DOMAIN}</literal> = 1; 

    <literal role="variable">$REDIRECT_ALLOWED{$FB_SITEROOT}</literal> = 1;
<!--    <literal role="variable">$FB_QUOTA_NOTIFY</literal> = 0; # Set <abbrev>LJ</abbrev> to notify <abbrev>FB</abbrev> with
                                                                                                #  an <acronym>RPC</acronym> call, when user purchases disk
                                                                                                #   quota. <systemitem class='library'>ljcom</systemitem>-specific, leave disabled. -->
    <literal role="variable">$REDIRECT_ALLOWED{'127.0.0.1'}</literal> = 1;
    <literal role="variable">$REDIRECT_ALLOWED{'192.170.2.5'}</literal> = 1;     # change for your <acronym>IP</acronym>
    # <literal role="variable">$FOTOBILDER_IP{'127.0.0.1'}</literal> = 1;        # &fb; <acronym>IP</acronym> address(es) trusted to make &xmlrpc; calls
}</programlisting></para>

<para>
Your <filename>&envarljhome;/fb/etc/fbconfig.pl</filename> needs
the following corresponding settings:</para>
<informalexample>
<programlisting>
<literal role="variable">$AUTH_DOMAIN{1}</literal> = [ &quot;LiveJournal&quot;, {                     # auth module name. do not change to your sitename.
    'ljhost' =&gt; '127.0.0.1',                             # this should point to your server
    'domain' =&gt; [ 'yourdomain.example.org' ],            # change to your domain / dev domain
    'vhost' =&gt; [ 'pics.yourdomain.example.org' ],        # change to your domain / dev domain
    # allowed_ips  => [ 127.0.0.1, 192.168.0.1 ],        # trusted <acronym>IP</acronym> addresses <abbrev>LJ</abbrev> server uses for &xmlrpc; calls
}];
</programlisting>
</informalexample>
<para>
The <literal role="variable">$FB::AUTH_DOMAIN{1}</literal> variable controls
cross-authentication between &lj;/&fb;. The <filename>fbconfig.pl</filename>
example above uses the <quote>LiveJournal</quote> plugin, as distinct from the
<quote>LJcom</quote> plugin, which is used for the site-specific 
non-<acronym>GPL</acronym> <systemitem class='library'>ljcom</systemitem>
code and its &fb; counterpart <systemitem class='library'>picpix</systemitem>.</para>

<para>The relevant <link linkend="lj.admin.caps">usercaps</link> are:
<simplelist>
<member><literal>fb_account</literal>: determines whether a &lj; user can have a &fb; account auto-created for them on the fly.</member>
<member><literal>fb_can_upload</literal>: determines whether the user will have the <quote><literal>can_upload</literal></quote> dcap sent in <quote><literal>get_user_info</literal></quote> &xmlrpc; requests from &lj; to &fb;.  For the <emphasis><systemitem class='library'>LJCOM</systemitem></emphasis> auth module, this is what determines when an account enters/leaves a downgraded state.</member>
<member><literal>fb_allstyles</literal>: determines whether the user can use all the available styles.</member></simplelist></para>

<para>
Add the following, amending as necessary, to your <filename>/etc/perlbal/perlbal.conf</filename> file:</para>
<programlisting>
# In service selector (ss) section:
  VHOST pics.EXAMPLEHOSTNAME.lj = fotobilder
  VHOST www.EXAMPLEHOSTNAME.lj;using:pics.EXAMPLEHOSTNAME.lj = fotobilder
<!-- # VHOST pix.EXAMPLEHOSTNAME.lj  = picpix -->
CREATE POOL fb_pool
  POOL fb_pool ADD 127.0.0.1:8082

CREATE SERVICE fotobilder
  SET role = reverse_proxy
  SET pool = fb_pool
  SET persist_backend = on
  SET max_backend_uses = 10
  SET backend_persist_cache = 2
  SET verify_backend = on
  SET enable_reproxy = on
  SET upload_status_listeners = 127.0.0.1:7002
ENABLE fotobilder
</programlisting>

<para>
Make the following updates in <filename>/etc/apache-perl/httpd.conf</filename>:</para>
<para>
Instead of <literal>Port</literal>, use:
<screen><userinput>Listen *:8081 # LiveJournal
Listen *:8082 # FotoBilder</userinput></screen></para>

<para>
Add the following, amending as necessary:</para>
<programlisting>
&lt;VirtualHost *:8082&gt;
ServerName   pics.yourdomain.example.org
PerlSetEnv   LJHOME /home/lj
PerlSetEnv   FBHOME /home/lj/fb
PerlRequire  /home/lj/fb/lib/startup.pl
&lt;/VirtualHost&gt;
</programlisting>

<para>
You might also need to add new spool directories:
<screen><prompt>$</prompt> <userinput><command>cd</command> &envarljhome;</userinput>
<prompt>$</prompt> <userinput><command>mkdir</command> <filename class="directory">fb/var/picroot/1/spool</filename></userinput></screen></para>
    </section>

</chapter>

