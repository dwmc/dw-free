    <chapter id="lj.install.workers_setup">
      <title>Configure &gearman; / &thesch;</title>

<abstract><para>
&gearman; and &thesch; distribute jobs, farming out work, to machines that are
better-suited to tasks, or to do work in parallel.</para>

<para>
As new features are added, it is increasingly likely they will rely on <quote>workers</quote> to handle
behind-the-scenes tasks. Although you can set up both technologies to take advantage of a farm of servers,
you can run the workers with &lj; code on a single machine.</para></abstract>

    <section id="lj.install.workers_setup_install">
      <title>Install &gearman; / &thesch;</title>

<note><title>Installing from packages</title><para>
Alternatively you can install packages from your &linux; distribution
e.g., &debian;, or &cpan;. These are stable (if old) releases that can be
used to get up and running more quickly.
</para>

<informaltable id='table-lj-workers-packages' frame='none'>
    <tgroup cols='3'><tbody>
    <row><entry>Gearman::Client</entry><entry><package>libgearman-client-perl</package></entry></row>
    <row><entry><package>Gearman::Client::Async</package></entry><entry><package>libgearman-client-async-perl</package></entry></row>
    <row><entry>Gearman::Server</entry><entry>gearman-server</entry></row>
    </tbody></tgroup>
</informaltable></note>

<formalpara><title>&gearman; installation</title><para>
First you need the &gearman; server code from &svn;
(<uri>http://code.sixapart.com/svn/gearman/trunk/</uri>). This is automatically
checked out into your cvs subdirectory
<filename class="directory">&envarljhome;/cvs/gearman/server</filename>.
Build and install the code with:</para></formalpara>
<para>
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/gearman/server</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>

<para>
You also need the &gearman; client module. This is automatically
checked out into your cvs subdirectory
<filename class="directory">&envarljhome;/cvs/gearman/api/perl/Gearman</filename>,
and mapped into <filename class="directory">&envarljhome;/cgi-bin/Gearman</filename>.</para>

<para>
You should build and install the libraries for both the
general synchronous version and asynschronous version. To do this,
run the following commands:</para>
<para>
First, install the general synchronous version.
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/gearman/api/perl/Gearman</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>
<para>
Now, the <abbrev>async</abbrev> version.
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/gearman/api/perl/Gearman-Client-Async</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>

<formalpara><title>&thesch; installation</title><para>
First you need the &thesch; server code from
&svn; (<uri> http://code.sixapart.com/svn/TheSchwartz/trunk/</uri>).
This is automatically checked out into your cvs subdirectory
<filename class="directory">&envarljhome;/cvs/TheSchwartz/lib</filename>.
and mapped into <filename class="directory">&envarljhome;/cgi-bin/TheSchwartz</filename>.
Build and install the code with:</para></formalpara>
<para>
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/TheSchwartz</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>

<para>
You also need the &thesch; &email; worker from
<uri>http://code.sixapart.com/svn/TheSchwartz-Worker-SendEmail/trunk/</uri>.
This is automatically checked out into your cvs subdirectory
<filename class="directory">&envarljhome;/cvs/TheSchwartz-Worker-SendEmail/lib</filename>.
and mapped into <filename class="directory">&envarljhome;/cgi-bin/TheSchwartz/Worker</filename>.
Build and install the code, as before:</para> 
<para>
<screen><prompt>#</prompt> <userinput><command>cd</command> <filename class="directory">&envarljhome;/cvs/TheSchwartz-Worker-SendEmail</filename></userinput>
<prompt>#</prompt> <userinput><command>perl Makefile.PL</command></userinput>
<prompt>#</prompt> <userinput><command>make</command></userinput>
<prompt>#</prompt> <userinput><command>make <option>test</option></command></userinput>
<prompt>#</prompt> <userinput><command>make <option>install</option></command></userinput></screen></para>

</section>

    <section id="lj.install.workers_setup_config">
      <title>Set up &gearman; / &thesch;</title>

<para>
The workers all live in <filename class="directory">bin/worker/<replaceable>*</replaceable></filename>.
There should be <systemitem class="daemon">gearmand</systemitem> - the main
executable for the &gearman; server, &thesch; &db;, and at least one copy of each
worker running, in order to get full functionality from the &lj; application.
The filename for each worker gives you an idea what it does. If you have disabled a particular feature in
<filename>ljconfig.pl</filename>, it generally follows you do not need to start that particular worker.</para>


<formalpara><title>Setting up &gearman;</title>
<para>
First, make sure the necessary directories are in place.
<screen><prompt>#</prompt> <userinput><command>mkdir</command> <filename class="directory">/var/run/gearman</filename></userinput></screen>
</para></formalpara>

<para>
Next, create the configuration file for the workers.
<screen><prompt>$</prompt> <userinput><command>touch</command> <filename>&envarljhome;/cgi-bin/workers.conf</filename></userinput>
<prompt>$</prompt> <userinput><command>nano</command> <filename>&envarljhome;/cgi-bin/workers.conf</filename></userinput></screen></para>

<para>Enter tasks for the workers in the file you just created, using the following
format: <replaceable>hostname</replaceable> / <replaceable>jobname</replaceable> = <replaceable>num_to_run</replaceable>.
The output of <command>hostname</command> needs to match the value in <filename>workers.conf</filename>,
so the search-updater worker works correctly.
For example:
<informalexample>
<programlisting>localhost / process-esn = 1
localhost / process-sms = 1
localhost / send-email  = 1</programlisting></informalexample></para>
        
<para>You need to configure <systemitem class="daemon">gearmand</systemitem> servers in <filename>ljconfig.pl</filename>,
so you can run workers. It is a good idea to set particular features to use &gearman; at the same time.
<informalexample>
<programlisting>@LJ::GEARMAN_SERVERS
('foo.example.com:7003')
$LJ::LOADTAGS_USING_GEARMAN =1;
$LJ::LOADFRIENDS_USING_GEARMAN =1;
$LJ::LOADSYSBAN_USING_GEARMAN =1;</programlisting></informalexample></para>

<para>
Last, start up the worker processes,
in <filename class="directory">&envarljhome;/bin/worker</filename>.</para>

<formalpara><title>Setting up &thesch;</title>
<para>
First, configure <filename>ljconfig.pl</filename> so &thesch; can connect to your database:</para></formalpara>
<informalexample>
<programlisting>my $mast = $LJ::DBINFO{master};
        my $dbname = $mast-&gt;{dbname} || &quot;livejournal&quot;;
        @LJ::THESCHWARTZ_DBS = ({
            dsn  =&gt; &quot;dbi:mysql:$dbname;host=$mast-&gt;{host}&quot;,
            user =&gt; $mast-&gt;{user},
            pass =&gt; $mast-&gt;{pass},
            prefix =&gt; &quot;sch_&quot;,
        });</programlisting>
</informalexample>
<para>
The database tables are created for you <quote>automatically</quote>, by the <filename>update-db.pl</filename> tool.</para>

<para>Now start up &thesch; worker processes from <filename class="directory">bin/worker/</filename>.
To use the workers you can start them from a shell script, or manually at a command prompt.
If you want to use &thesch; for incoming &email; create a file named
<filename>.forward</filename> in your &envarljhome; directory to pipe into
<filename>incoming-mail-inject.pl</filename>:
<informalexample>
<programlisting>|/home/lj/bin/incoming-mail-inject.pl</programlisting></informalexample></para>
<tip><para>
To make worker processes run in the background, add a &unix; switch to the command:
<screen><command>bin/worker/process-esn <option>&amp;</option></command></screen></para></tip>
</section>
    </chapter>

