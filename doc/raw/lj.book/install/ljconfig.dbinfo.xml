<section id="lj.install.ljconfig.dbinfo">

  <title>Configuring <literal>%LJ::DBINFO</literal></title>
  <para>
    <literal role="variable">%LJ::DBINFO</literal> is a hash that contains the necessary information for &lj; to connect to your database.
    For installations that require more than one database server, the directives to define each cluster database are also defined here. 
  </para>
  <formalpara><title>Connection keys</title><para>
    <literal role="variable">%LJ::DBINFO</literal> requires a master key that is labelled &apos;master&apos;, and
    also requires the correct address for connection to the database itself.
    If you are using a <acronym>TCP</acronym> based connection, you can specify a host key with the value of the
    location of the server (either the name, such as <systemitem class="systemname">localhost</systemitem>,
    or the <acronym>IP</acronym> address, such as <systemitem class="ipaddress">127.0.0.1</systemitem>),
    and a port key for the database port (typically 3306). If instead you are using a socket based connection, you can
    specify a sock key with the value set to the socket file. Specify a user key for your database username, and a
    password key for your database password.
    <footnote id="dbinfo_pass"><para>You should replace &apos;<replaceable>ljpass</replaceable>&apos; with
    your <emphasis>actual</emphasis> password. Similarly, amend other fields as appropriate. Security permissions
    for the configuration files is handled through your operating system.</para></footnote> </para></formalpara>
    <para>
    If you used a different database name than the suggested <quote>livejournal</quote>, specify a dbname key
    with the value of the database name.</para>
  <formalpara><title>Roles</title><para>
    The role key in <literal role="variable">%LJ::DBINFO</literal> is a hash that sets different <quote>role</quote> keys to the current configuration with boolean values.
    Roles are basically tasks assigned to the configuration. For example, to set up a server that will host your directory (which can get pretty intensive with a fair amount of users), you would do the following:
    <programlisting>'role' =&gt; {
    'directory' =&gt; 1,
},</programlisting>
  </para></formalpara>
  <example id="example-lj-dbinfo_hash">
    <title>Sample <literal role="variable">%LJ::DBINFO</literal> hash</title>
 <programlisting>%DBINFO = (
    # master must be named 'master'
        'master' =&gt; {
            'host' =&gt; 'localhost',
            'port' =&gt; 3306,

            # or, leave out host/port and use a socket to connect:
            # 'sock' =&gt; <quote>/var/run/mysqld.sock</quote>;

            # optional dbname, if not 'livejournal':
            # 'dbname' =&gt; 'livejournal', 

            'user' =&gt; 'lj',
            'pass' =&gt; 'ljpass',
            'role' =&gt; {
                'cluster1' =&gt; 1,

                # optionally, have &apache; write its access logs to a &mysql; database
                # 'logs' =&gt; 1,
            },
        },
);</programlisting>
  </example>
  <para>
    That's the basic configuration for an installation with only one database
    server. Details about using more than one database server are covered later,
    in <xref linkend="lj.install.supplemental_sw.multiple_db" />.</para>

</section>

