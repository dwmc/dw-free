<chapter id="lj.install.apache_setup">
  <title>&apache;</title>
  <abstract>
    <simpara>&apache; is the most popular &http; server software used today, and it&apos;s completely free.
    We use &apache; for our projects because there is simply no equivalent. In this chapter we&apos;ll
    briefly explain how to setup and configure an &apache; installation.</simpara>
  </abstract>
  <section id="lj.install.apache_setup.install">
    <title>Installation</title>
    <section id="lj.install.apache_setup.install.mod_perl">
      <title>&modperl;</title>
      <para>
      &lj; requires &modperl;. It is widely used, so you might already
      have it on your machine. If not, you can find the official installation
      docs at <ulink url="http://perl.apache.org/docs/1.0/guide/install.html" />.
      </para>
      <caution><para>
        We&apos;ve found that more people have success when &modperl; is statically
        linked (<quote>compiled-in</quote> to the &apache; module), rather than using a <acronym>DSO</acronym>.
        <footnote id="dso"><simpara>
          Consult <citetitle pubwork="article">
          <ulink url="http://perl.apache.org/docs/1.0/guide/install.html#When_DSO_can_be_Used">
          &modperl; Installation User Guide: When <acronym>DSO</acronym> Can Be Used</ulink></citetitle>
          for more information. 
        </simpara></footnote> This is because it is difficult to build <package>mod_perl</package> reliably
        as a <acronym>DSO</acronym>.</para></caution>
      <tip><title>&debian;</title>
        <simpara>Typically, if you already have a working &apache; installation in &debian;
          and would like to install &modperl; support, then installing the package
          <package>libapache-mod-perl</package> should suit your needs. Otherwise,
          you should install the package <package>apache-perl</package>.
          The <package>apache-perl</package> package provides the advantage of easier
          setup, because it is compiled with &modperl; support already.
      </simpara></tip>
    </section>
    <section id="lj.install.apache_setup.install.suexec">
      <title>&apache; suEXEC Support</title>
      <para>
        If you want the &lj; code to run as a user other than
        what your webserver runs as, then you&apos;ll need suEXEC<footnote id="suexec">
          <simpara><ulink url="http://httpd.apache.org/docs/suexec.html">Official
          &apache; suEXEC documentation</ulink></simpara></footnote> support in
        &apache;.  You are free to figure that out yourself.  We will assume
        your webserver is running as user <systemitem class="username">lj</systemitem>,
        though it does not have to run as any specific user to work.
      </para>
      <para>
        In fact, the &lj; code never writes to disk. So, as long
        as it can write to the database (which is essential, obviously),
        you can run the code as any user, including
        <systemitem class="username">nobody</systemitem> or
        <systemitem class="username">www-data</systemitem>, both
        of which are common in out-of-the-box configurations.
      </para>
    </section>
    <section id="lj.install.apache_setup.install.vhosts">
      <title>Virtual Hosts</title>
      <para>
        You can run the &lj; code inside or outside of a
        <literal>&lt;VirtualHost&gt;</literal> section in &apache;&apos;s
        <filename>httpd.conf</filename> file.  However, you are not able
        (yet) to have two VirtualHosts running parallel copies of the
        code.  In the future we will fix that, but for now if you really
        need two installations on the same machine, you will need to run
        two sets of &apache; processes, listening on different ports.
      </para>
    </section>
  </section>
  <section id="lj.install.apache_setup.example">
    <title>Example <filename>httpd.conf</filename></title>
    <programlisting><![CDATA[ServerType standalone
ServerRoot "/etc/apache-perl"
PidFile /var/run/apache-perl.pid
Timeout 30
KeepAlive Off

MinSpareServers 5
MaxSpareServers 40
StartServers 10
MaxClients 20
MaxRequestsPerChild 250

Port 80
User lj
Group lj

UseCanonicalName off
SendBufferSize 163840

ServerName   www.example.com
ServerAlias  example.com
PerlSetEnv   LJHOME /home/lj
PerlRequire  /home/lj/cgi-bin/modperl.pl
]]></programlisting>
    <note>
    <para>
      This will work by itself (assuming &modperl; statically linked),
      or you can just tack on parts to your existing config.
    </para>
      <para><filename class="directory">/home/lj</filename> is only an example directory. 
      You&apos;ll want to use the same directory used in <xref linkend="lj.install.ljhome" />.</para>
    <para>
      If you wish, you can put those last four lines in a <literal>VirtualHost</literal> block.
    </para>
    </note>
<tip><para>You may find it helpful to use separate &apache; logfiles for your &lj; installation.
As before, you can place the relevant lines inside a <literal>VirtualHost</literal> block.
Example: <programlisting><![CDATA[ErrorLog     /var/log/apache-perl/ljerror.log
LogFormat    "%h %l %u %t \"%!414r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"" combined
CustomLog    /var/log/apache-perl/ljaccess.log combined
]]></programlisting></para></tip>
  </section>
</chapter>
<!--
Local Variables:
mode:sgml
sgml-parent-document: ("index.xml" "part" "chapter")
End:
-->

