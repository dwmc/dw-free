<chapter id="lj.customize.hooks">
  <title id="hooksdef" xreflabel="hooks guide">Setting and using Hooks</title>
  <subtitle>Setting Site-Specific Hooks</subtitle>
  <abstract>
    <para>
      The &lj; code provides a number of hooks, which you can use to
      alter or extend the functionality of the code, tailored for your own site.
      You are free to implement as few or as many as you want.
      <tip><para>
        If there is a hook you want but don&apos;t see, &email; us at <email>dev@livejournal.com</email>
        or post an entry to the &ljdevweb; community and we will be more than happy to add it in.
      </para></tip>
    </para>
    <para>
      One of the reasons for implementing hooks on &lj; came from a 
      need to make distinctions between account status types, without leaving
      a lot of kludge in the code base, and without having to write extensive
      code libraries in the ljcom <acronym>CVS</acronym> repository.
    </para>
    <para>
      Hooks are code references, subroutines that perform functions or return information
      based on objects passed to the subroutine. Some programming knowledge is necessary
      to write your own hooks.
    </para>
  </abstract>
  <section id="lj.customize.hooks.setup">
    <title>Writing Hooks</title>
    <para>
      Hooks are written either in <filename>cgi-bin/ljlib.pl</filename> file, or in a separate
      site-specific library file. Site-specific hooks are defined by the function <function>LJ::register_hook()</function>,
      which takes two arguments: the name of the hook, and the hook&apos;s perl coderef.
    </para>
    <para>
      Most hook coderefs are passed a single hash of various objects as their argument, though there are a few
      exceptions. Consult <xref linkend="lj.customize.hooks.ref" /> for more information.
    </para>
    <example id="example-lj-hook">
      <title>Sample hook: userinfo_html_by_user</title>
      <simpara>
        To give you an idea of how a hook is set up, a smaller hook is sampled below:
      </simpara>
      <programlisting><![CDATA[LJ::register_hook("userinfo_html_by_user", sub {
    my $o = shift;
    my $r = $o->{'ret'};
    my $u = $o->{'u'};
    return unless (LJ::get_cap($u, "normal"));
    $$r .= "<img src='$LJ::IMGPREFIX/talk/sm08_star.gif' width='20' height='18' alt='&#8902;' style='vertical-align: middle; border: 0;' />";
        });]]></programlisting>
      <simpara>
        <varname>$o</varname> is the argument hash that is passed to the hook&apos;s subroutine,
        and consists of the scalar reference member <varname>$o->{'r'}</varname> and the user object
        member <varname>$o->{'u'}</varname>. The subroutine then checks to see if the user
        is part of the capability class <quote>normal</quote>, and if so it will pass the
        &html; image directive as the scalar reference. Now when someone loads
        a user information page for a <quote>normal</quote> user, a small star will appear
        next to their username and userid.
      </simpara>
    </example>
  </section>
  <section id="lj.customize.hooks.ref">
    <title>Hooks Reference</title>
    &lj.customize.hooks.ref;
  </section>
</chapter>