<chapter id="lj.customize.local_svn">
  <title>Using your own &svn; directory</title>
  <para>
    &svn; is a version control system for source code.  We don't care
    whether or not you actually use it to control your site-local
    modifications.  However, even if you don't, it's still important
    you put your modifications under a directory in <filename class="directory"><envar>$LJHOME</envar>/cvs</filename>.
    The <filename class="directory">&hellip;/cvs</filename> directory is a holdover, 
    from when the &lj; project used <acronym>CVS</acronym> for version control.
  </para>
  <para>
    At this point, <link linkend='lj.install.install_files'>you already have</link> a directory named
    <filename class="directory">cvs</filename> underneath
    your <link linkend='lj.install.ljhome'>&envarljhome;</link>
    directory.  Further, that directory already has under it a directory called <filename class="directory">livejournal</filename>,
    which holds the <quote>general</quote> files.
  </para>
  <para>
    What you want to do now is make a directory that holds the
    <quote>local</quote> files.  The &lj; tools look for your
    files in a directory beside <filename class="directory">livejournal</filename> named
    <filename class="directory">local</filename>, but <filename class="directory">local</filename> can
    actually be a symlink to your real directory.
    <footnote id="local_mods">
      <para>&ljcom; uses the directory name
        <filename class="directory">ljcom</filename> for its site-local modifications, so
        the <filename class="directory">livejournal</filename> directory is entirely free
        of &ljcom;-specific code.  If you're helping with
        &ljcom; development, you'll want to symlink <filename class="directory">ljcom</filename> to
        <filename class="directory">local</filename>.</para>
    </footnote>
  </para>

  <section id='lj.customize.local_svn.cvsreport'>
    <title><application>cvsreport.pl</application> (&vcv;) : Adding &amp; Overlaying</title>
    <para>
      In <filename class="directory">&envarljhome;/bin</filename>
      there&apos;s a tool named &vcv; (<quote>version control views</quote>).
      This tool, named <application>cvsreport.pl</application> in its original
      incarnation, manages (among other things) merging together the general files
      and your site-local files into the live area
      under &envarljhome;. It uses a file
      named <filename>multicvs.conf</filename> for mapping instructions, to
      find out where to place the different files.
      The <application>cvsreport.pl</application> utility is just a front-end to the &vcv; tool.</para>
    <para>
      The command you'll need most of the time is:

<screen><prompt>$</prompt> <userinput>bin/cvsreport.pl -u -c -s</userinput></screen>
      <parameter>-u</parameter> is short for <parameter>--update</parameter> 
      (the files in the local <filename class="directory">cvs</filename> directory from the external 
      &svn; repositories), <parameter>-c</parameter> is short for <parameter>--cvsonly</parameter>
      (only copies from the <filename class="directory">cvs</filename> directory back to the live area, not
      vice-versa) and <parameter>-s</parameter> is short for <parameter>--sync</parameter>
      (which means actually do the copying, don&apos;t just print out what it would have done,
      which is the default without <parameter>-s</parameter>).
    </para>
    <para>
      So, say you want to override the provided
      <filename>htdocs/index.bml</filename> file.  Create the
      <filename>htdocs</filename> under
      <filename class="directory">&envarljhome;/cvs/local</filename> and
      put an <filename>index.bml</filename> file in it, then run
      <application>cvsreport.pl</application> <parameter>-c -s</parameter> and you are set.
    </para>
    <para>
      More commonly, you will be adding new files, rather than replacing
      provided ones.  In general, you should never really need to
      replace files, since you should already be able to change all
      the text, images, and layout of any given page.  Replacing a
      file would mean duplicating functionality, and that&apos;s bad.
    </para>
    <para>
      One popular strategy with the general code libraries is to look
      for a similarly named file with <filename>-local</filename> in it
      and load that also.  That way you inherit all the functionality
      that is provided, and change only what you want.  When general
      changes, you don't have to update right away&hellip; you can change
      things later if you want, or keep the newly added stuff as it
      was given to you.
    </para>
  </section>
  
</chapter>
<!--
Local Variables:
mode:sgml
sgml-parent-document: ("index.xml" "part" "chapter")
End:
-->
