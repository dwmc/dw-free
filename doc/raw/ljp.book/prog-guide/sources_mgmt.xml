<chapter id="ljp.prog-guide.source" status="prelim">
  <title>Working with the Sources</title>
  
<formalpara><title>How does it all work?</title><para>
&lj; source code is stored in several separate &svn; repositories. The files
from these are merged into a single live tree. The live tree is your home
directory. It contains the code that actually runs on your server. This is the
code you edit and play with. The &svn; trees are all stored below
<filename class="directory">&envarljhome;/cvs/</filename>. The
<filename class="directory">&hellip;/cvs</filename> directory is a holdover,
from when the &lj; project used <acronym>CVS</acronym> for version
control.</para></formalpara>

<para>The <filename>cvsreport.pl</filename> script lets you update the &svn;
trees with the newest code, copy new files from there to the live tree, create
patch files for submission, and more.</para>

<para>Typically, you keep your &svn; trees up-to-date, updating them every now
and then. You use <command>cvsreport.pl</command> to copy new stuff from the &svn; trees into the
live tree, while being careful not to overwrite files in the live tree that
you have been working on. You edit source in the live tree, test it on your
server, edit again, test again and so on. At some point you create a diff of
your changed/added files in the live tree against the up-to-date &svn; trees,
and you submit it. All these actions are explained in detail below.</para>

<para>Use your preferred text editor to edit your source code. Make sure you
use &unix; style line-endings, <acronym>UTF</acronym>-8 encoding, and spaces
not tabs.</para>

<formalpara><title>Resetting your database.</title><para>
If you have totally messed-up your database and want to re-create it from scratch, do:
<screen>
    <prompt>$</prompt> <command>mysqladmin <option>drop</option> <database>livejournal</database></command>
    <prompt>$</prompt> <command>mysqladmin <option>create</option> <database>livejournal</database></command>
    <prompt>$</prompt> <command>&envarljhome;/bin/upgrading/update-db.pl <option>-r</option> <option>-p</option></command>
    <prompt>$</prompt> <command>&envarljhome;/bin/upgrading/texttool.pl <option>load</option></command></screen>
</para></formalpara>

<formalpara><title>Staying up to date with &svn;.</title><para>
It&apos;s important to make sure you&apos;re developing against the latest
<quote>trunk</quote> code, when making changes and contributing patches.
Every so often, update from &svn;:
<prompt>$</prompt> <command>cvsreport.pl <option>-u</option></command></para>
</formalpara>

<para>&hellip; but that&apos;s not all.</para>

<para>The above only updates your
<filename class="directory">&envarljhome;/cvs</filename> directory to be
current. It does not affect your live tree. For that, you also use
<command>cvsreport.pl</command>.</para>

<formalpara><title>Merging your live and <filename class="directory">cvs</filename> trees.</title><para>
See what&apos;s changed where: 
<prompt>$</prompt> <command>bin/cvsreport.pl</command></para></formalpara>
<para><informalexample><simplelist>
<member>main -&gt; cvs          cgi-bin/ljlib.pl</member>
<member>main &lt;- cvs           htdocs/create.bml</member></simplelist></informalexample></para>

<para>In the example you can see <filename>htdocs/create.bml</filename> is
newest in your &svn; tree, and <filename>cgi-bin/ljlib.pl</filename> is newest
in the live tree (where you should be working).</para>

<para>But maybe you have been working on <filename>htdocs/create.bml</filename>
also and don&apos;t want to lose your changes. So, use
<command>cvsreport.pl</command> to make a diff and store it somewhere.</para>

<para><screen>
<prompt>$</prompt> <command>bin/cvsreport.pl <option>--diff</option> <filename>htdocs/create.bml</filename></command>
<prompt>$</prompt> <command>bin/cvsreport.pl <option>-d</option> <filename>htdocs/create.bml</filename> <filename>cgi-bin/ljlib.pl</filename> (two files in one diff)</command>
<prompt>$</prompt> <command>bin/cvsreport.pl <option>-d</option> (without filenames, puts all changes in all files in one diff)</command>
</screen></para>

<para>Say you want to copy your <filename>cgi-bin/ljlib.pl</filename> to the
&svn; tree (under <filename class="directory">cvs</filename>).</para>

<para><screen>
<prompt>$</prompt> <command>cvsreport.pl <option>--sync</option> <filename>cgi-bin/ljlib.pl</filename></command>
<prompt>$</prompt> <command>cvsreport.pl <option>-s</option> <filename>cgi-bin/ljlib.pl</filename></command>
</screen></para>

<para>Maybe later fifty files change in &svn;, but you have a few files in your
live tree that are not ready to go into your
<filename class="directory">&envarljhome;/cvs/</filename> directory.</para>

<para><prompt>$</prompt> <command>cvsreport.pl <option>-c</option> <option>-s</option></command></para>

<para>(Only syncs stuff from <filename class="directory">&envarljhome;/cvs/</filename> to main).
That&apos;s the command you will probably want to run the most often. There
is usually no reason to copy files from your live tree to
<filename class="directory">&envarljhome;/cvs</filename> tree (you might think
you&apos;d do that to create a diff with <command>svn diff</command>, but
<command>cvsreport.pl <option>-d</option></command> is easier and creates diffs
just the way we like them).</para>

<procedure><title>Sending patches&hellip;</title>
<step>
  <para>Update &svn; first: <prompt>$</prompt> <command>cvsreport.pl <option>-u</option></command></para></step>
<step>
  <para>Now, look at your diff: <prompt>$</prompt> <command>cvsreport.pl <option>-d</option>
  <filename><replaceable>htdocs/some_file.bml</replaceable></filename> | <option>less</option></command></para></step>

<step>
  <para>Look good? Sure &svn; hasn&apos;t changed and your patch doesn&apos;t
  back out any newer changes?  Then send it in.</para></step>
  </procedure>

</chapter>

