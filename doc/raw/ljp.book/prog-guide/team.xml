<chapter id="ljp.prog-guide.team">

<title>Team Player Guidelines</title>
<blockquote><attribution>Curtis Sliwa</attribution><para>
It&apos;s not about <quote>I and me</quote> but <quote>us and we</quote>.</para>
</blockquote>

<section id="ljp.prog-guide.team.camping_rule">

<title>Be a good camper</title>

<para>
Our standards are continually being raised, so by definition any old code is
ugly because new best practices have emerged in the meantime.
That means when you work on old code there&apos;s a tendency to
say, <quote>Well, it&apos;s already ugly, so it&apos;s okay if I&apos;m ugly
when I work in this code&hellip;</quote></para>

<para>
False.</para>

<para>
Obey the camping rule: the camp (<quote>code</quote>) should be cleaner
than when you arrived. You don&apos;t have to clean all of it, but clean up a bit.</para>

<para>
And don&apos;t commit the cleanup with your new functional change.
Please commit the cleanup first so a) it&apos;s obvious you&apos;re being a good camper,
and b) your functional change stands apart and has an easy-to-read diff.</para>

<note><para>
Don&apos;t have &svn; commit access? Obey the camping rule when submitting
patches.</para></note>

</section>

<section id="ljp.prog-guide.team.nearby_code">

<title>Nearby Code</title>

<para>
Follow the conventions of code around you. You want to blend in.
You don&apos;t want us to come along in 6 months and see three
different people&apos;s style, block-by-block.</para>

<para>
However, that doesn&apos;t mean you shouldn&apos;t clean up old/ugly code
using wrong &api;s or disobeying whitespace
rules: <emphasis>Be a good camper</emphasis>.</para>

</section>

<section id="ljp.prog-guide.team.returnearly">

<title>Return early when possible</title>

<para>
Nested control constructures with huge bodies are bad enough, but
it&apos;s particularly unnecessary to scroll down past multiple pages of code
only to find:</para>
<programlisting>
          }
        }
     }
   } else {
      return 0;
   }
</programlisting>

<para>
At that point, who really knows what that return 0 is for? Yes, put your cursor
on a brace and <application>Emacs</application> and will happily show you, but
there is a better approach. Using the approach below also helps to avoid
adding extra indentation.</para>

<para>So, instead of this:</para>

<programlisting>
if ($good) {
     &hellip;code&hellip;
} else {
    return 0;
}
</programlisting>

<para>Please do this:</para>

<programlisting>
return 0 unless $good;
&hellip;code&hellip;
</programlisting>

</section>
</chapter>

