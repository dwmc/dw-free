<chapter id="ljp.prog-guide.broader_view">

<title>Focus on the broad picture</title>

<abstract>
<simpara>Try to keep in mind the bigger picture, when working on a particular part of the code.
Doing things <quote>the right way</quote> helps make sure your changes fit in neatly with related
code and features.</simpara>
</abstract>

<section id="ljp.prog-guide.broader_view.strings_urls">

<title>Don&apos;t hard-code &url;s in translation strings</title>

<para>In the large majority of cases, you should never hard-code &url;s in translation strings.
Use the variable <screen>[[aopts]] (&apos;aopts&apos; =&gt; <quote>href=&apos;$LJ::SITEROOT/page/&apos;</quote>)</screen>
instead. This way, &url;s can be changed (in the code) without having to worry about translations needing
to update their strings to get the new &url;s.</para>

<para><emphasis role="strong">Exception:</emphasis> If a string is on a generic
<systemitem class="library">livejournal page</systemitem> but needs to link to a site-specific page,
then the string without the link should be in <filename>en.dat</filename>, and the string with the hard-coded &url; link
should be in <filename>en_<replaceable>XY</replaceable>.dat</filename> (to avoid putting links to site-specific pages
in generic <systemitem class="library">livejournal</systemitem> pages). </para>

<para>For example, there may be a feature that is only available to paid accounts on &ljcom;, and
a string on a <systemitem class="library">livejournal</systemitem> page that says this. So, in <filename>en.dat</filename>, the
string would be something like, <quote>This feature is not available to your account type.</quote>. In en_<filename>LJ</filename>.dat, the
string would be something like, <quote>This feature is only available
to <uri><replaceable>&lt;a href=&apos;http://www.livejournal.com/paidaccounts/&apos;&gt;Paid Accounts&lt;/a&gt;</replaceable></uri>.</quote>
When the code makes it possible, it's a good idea to use &lt;?siteroot?&gt; instead of, for
example, <quote><uri><replaceable>http://www.livejournal.com/</replaceable></uri></quote>, so development environments 
can get links to local pages and not those on, for example, &ljcom;.</para>

</section>

<section id="ljp.prog-guide.broader_view.changing_strings">

<title>Deleting and changing translation strings</title>

<simpara><emphasis role="strong">Deleting strings: Deadphrase them!</emphasis></simpara>
<simpara>When a string is no longer used anywhere on the site, remove it
from <filename>en.dat</filename> or <filename>en_<replaceable>XY</replaceable>.dat</filename> and add
the dead string to <filename>deadphrases.dat</filename> or <filename>deadphrases-local.dat</filename>, respectively.</simpara>
<simpara>If the string is in both <filename>en.dat</filename> and <filename>en_<replaceable>XY</replaceable>.dat</filename>
(because it is used on a page in the <systemitem class="library">livejournal</systemitem> repository but says something different for &ljcom;),
then delete the string from <filename>en.dat</filename> and add it to <filename>deadphrases.dat</filename>&mdash;you don&apos;t need
to delete it from <filename>en_<replaceable>XY</replaceable>.dat</filename>.</simpara>

<simpara><emphasis role="strong">Changing strings: Create new ones; don't edit them!</emphasis></simpara>
<simpara>If you need to change a string in the translation file and not on <ulink url="/translate/edit.bml?lang=en_LJ">the site</ulink>,
remove the old string, deadphrase it (as described above), and create a new one; don&apos;t edit strings in the translation files.
Editing an existing string in the translation file (that is already live on the site) will not update it on the site.
Even if you are positive it isn&apos;t live on your production site yet, it is bad practice to edit the string since other sites may
have put the <filename>en.dat</filename> file live for themselves. So, just create a new string&mdash;it's the option
least likely to cause problems. This provision primarily applies to &ljcom;.</simpara>

</section>

<section id="ljp.prog-guide.broader_view.schemesmarts">

<title>Be smart to site schemes</title>

<para>When building pages, it&apos;s wise to make them scheme-independent. Rather than
hardcoding colors or stylistic choices that apply to one scheme, you should use scheme-provided properties
and options (e.g., using &lt;?p p?&gt; instead of &lt;p&gt;&lt;/p&gt;).</para>

<para>This helps make sure that pages are easily extended to other schemes, and helps to avoid the situations
where a page looks great in one scheme but terrible in another. (It also means there is no need to cleanup pages that
were styled/colored for a certain scheme, when building new schemes.)</para>

</section>
</chapter>

