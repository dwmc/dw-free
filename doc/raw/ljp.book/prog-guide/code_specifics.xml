<chapter id="ljp.prog-guide.code_specifics">

<title>Coding Specifics</title>

<section id="ljp.prog-guide.code_specifics.accnames">
<title>Accessor names</title>

<para>When doing <acronym>OO</acronym> programming, we don&apos;t use the pseudo-official Perl style getter/setters:</para>

<programlisting>
$val = $obj-&gt;attribute;
$obj-&gt;attribute($val);
</programlisting>

<para>Actually, a lot of Perl people hate that.</para>

<para>We are more explicit:</para>

<programlisting>
$val = $obj-&gt;attribute;        # unchanged, a getter
$obj-&gt;set_attribute($val);    # the setter
</programlisting>

<para>There is no <quote>get_attribute</quote> .</para>
</section>

<section id="ljp.prog-guide.code_specifics.ifelse">

<title>if, unless, else</title>

<para>Perl gives you <literal>unless</literal> in addition to <literal>if</literal>. Use it, but don&apos;t abuse it.</para>
<para>Use <literal>unless</literal> when it makes code more readable, but don't try to use it for everything:</para>

<itemizedlist>
<listitem><para>If the condition gets complex, switch to <literal>if</literal>.</para> </listitem>
<listitem><para>Don't use an <literal>else</literal> with <literal>unless</literal>.</para></listitem>
<listitem><para>Use <literal>if (!$condition)</literal> if that&apos;s more English-sounding in the context of your problem/code.</para> </listitem>
</itemizedlist>
</section>

<section id="ljp.prog-guide.code_specifics.ternary_op">

<title>Ternary Operator</title>

<para>The ternary operator should not be used as an if-else replacement for calling methods&hellip; for example, please do not do this:</para>

<programlisting>$foo ? LJ::do_something() : LJ::do_something_else();</programlisting>

<para>For clarity, please use the following form:</para>

<programlisting>
if ($foo) {
    LJ::do_something()
} else {
    LJ::do_something_else()
}
</programlisting>

<para>The ternary should be used only in constructions that involve relatively straightforward value substitutions. For example, the following would be fine:</para>

<programlisting>LJ::call_a_function($u, $u-&gt;{journaltype} eq &apos;Y&apos; ? 1 : 0);</programlisting>

<para>Which passes through a 1 if the account is syndicated. It is short and easy to read. Please do not use ternaries in mid-line if you're going to end up with a mess, like this:</para>

<programlisting>
LJ::call_another_function($u, $u-&gt;{journaltype} eq &apos;P&apos; &amp;&amp; $u-&gt;{status} eq &apos;A&apos; &amp;&amp; $u-&gt;{statusvis} eq &gt;V&gt; ? ($u-&gt;prop(&apos;opt_gimmenews&apos;) ? 1 : 0) : 0));
</programlisting>

<para>Please instead use the following form, breaking it out for readability:</para>

<programlisting>
my $is_validated_user = $u-&gt;{journaltype} eq &apos;P&apos; &amp;&amp; $u->{status} eq &apos;A&apos; &amp;&amp; $u-&gt;{statusvis} eq &apos;V&apos; ? 1 : 0;
my $wants_news = $is_validated_user &amp;&amp; $u-&gt;prop(&apos;gimmenews&apos;) ? 1 : 0;
LJ::call_another_function($u, $wants_news);
</programlisting>

<para>Avoid nested ternaries while you&apos;re at it.</para>

</section>
</chapter>

