<chapter id="ljp.int.multihomed_userprops">

<title id="mhprops" xreflabel="multihomed userprops">Multihomed Userprops</title>

<para>The &lj; code provides a directory service that enables users to search
for other users based on various criteria, including <acronym>AOL</acronym> Instant Messenger
screen name, <acronym>ICQ</acronym> number, Jabber address, and others.  These values are all
stored as userprops.</para>

<para>Userprops themselves can either be stored on the <database>global</database> 
database or on the user&apos;s cluster.  Putting things on the cluster is generally 
better, especially when the things relate to the user in such an integral way.  However, that
does not work so well with the userprops that are used for searching, because
then you&apos;d have to hit every cluster and repeat the search, which causes a lot
of extra work to be done. Therefore, the properties that are used for
searching have remained on the <database>global</database> database.</para>

<para>This is a problem too, though: while searching is done fairly often,
most of the time properties are loaded for such purposes as displaying the
user&apos;s profile page. This doesn&apos;t require a search through all data, so
should really be done using just the user&apos;s cluster.</para>

<para>Thus, multihomed userprops were born. Basically, a multihomed userprop is one
that is stored in two locations for the express purpose of making it easier to
load these properties in the majority of cases. The two locations are on the
<database>global</database> database on the 
<quote><link linkend="ljp.dbschema.userprop">
<database class="table">userprop</database></link></quote>
table and on the user clusters in the 
<quote><link linkend="ljp.dbschema.userproplite2">
<database class="table">userproplite2</database></link></quote> 
tables.</para>

<para>When a property is defined as multihomed 
(<database class="field">multihomed</database> = &apos;1&apos; 
in the <link linkend="ljp.dbschema.userproplist">
<database class="table">userproplist</database></link> table), 
<link linkend="ljp.api.lj.set_userprop">LJ::set_userprop</link> and 
<link linkend="ljp.api.lj.load_user_props">LJ::load_user_props</link> 
know how to deal with it. No differences in coding style are required. 
It is completely transparent to the rest of the system.</para>

<para>Pseudo-logic for saving a multihomed userprop goes like this:</para>
<procedure>
<step><para>Save data to <database>global</database> 
(standard behavior, empty values are not saved)</para></step>
<step><para>Save data to cluster (empty values ARE saved as &quot;)</para></step>
</procedure>

<para>Pseudo-logic for loading a multihomed userprop goes like this:</para>
<procedure>
<step><para>Load data from cluster</para></step>
<step><para>If data not found, try loading from master</para></step>
<step><para>If we had to load from master, save data to cluster 
(empty values saved)</para></step>
</procedure>

<para>The only real difference between the old and new way of doing things is that
empty userprops, which were previously just deleted from the table, are
instead saved.  This is to prevent hitting up the cluster and thinking that we
have not got this property from the <database>global</database> 
before and hitting the <database>global</database> 
repeatedly.  Instead, we save it locally as blank, and don&apos;t hit 
the <database>global</database> ever again.</para>

</chapter>

