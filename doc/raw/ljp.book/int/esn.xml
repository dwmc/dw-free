<chapter id="ljp.int.esn">

<title>&esn; - Event Subscription Notification</title>
    
<para>&esn; - Event/Subscription/Notification - works like this:</para>

<para>Lots of things on the site fire events.  An event is defined
   by the tuple:</para>

<programlisting>
       (journalid,eventtype,e_arg1,e_arg2)
</programlisting>

<para>Where journalid is the primary journal it took place in (the
   journal a new post is in, or the journal a comment is in). In
   some cases, it makes less sense. For example, a befriending:
   just pick which of the two-journal(user) relationship is
   more important, and make that the journalid for that event type.</para>

<para>
   e_arg1 and e_arg2 are eventtype-defined integers.  But that&apos;s
   all you have to completely describe the event that took place.
   Given that it&apos;s not much space, most eventtypes will use one
   or both fields to point to another database record that fully
   describe the event.  e.g, e_arg1 being the primary key
   of a new journal event or journal comment.
</para>

<para>
   People then subscribe to events, subject to privacy/stalking rules.
   Just because an event fires, does not mean it is subscribable.
   A subscription has its own arg1/arg2, but those s_arg1/s_arg2 have
   nothing to do with the e_arg1/e_arg2.
</para>

<para><emphasis role="strong">How events get processed async by &thesch;
(reliable <abbrev>async</abbrev> job system) </emphasis></para>

<orderedlist>
<listitem><para>web context logs one job  <quote>LJ::Worker::FiredEvent</quote> with params:</para></listitem>
       <listitem><para>journalid, etypeid, arg1, arg2</para>
   <para>(just enough to recreate the event)</para></listitem>

<listitem><para>async worker picks it up and ultimately has to create a new job
   for each matching subscription, over all clusters.</para></listitem>
</orderedlist>

<para>Logically, this can be split into the following steps:</para>

<orderedlist>
       <para>foreach cluster,</para>
           <listitem><para>find all subscriptions for that jid/eventtypeid (including wildcards)</para></listitem>
           <listitem><para>filter those down to those that match</para></listitem>
           <listitem><para>enqueue jobs for each subscription to fire those</para></listitem>
</orderedlist>

<para>But we take some fast paths.  Given the following steps:</para>
<para><programlisting><literal>[FiredEvent]</literal> -&gt; <literal>[FindSubsPerCluster]</literal> -&gt; <literal>[FilterSubs]</literal> -&gt; <literal>[ProcessSub]</literal>
</programlisting></para>
   <para> We can often skip from FireEvent directly to N x ProcessSub jobs if
   a) clusters are up, b) N is small. Note that &thesch; has a
   <quote>replace_with</quote> operation that atomically closes on jobs as
   completely if N other jobs take its place.  We use this operation
   to expand the original 1 FiredEvent job into N ProcessSub jobs,
   where N is potentially huge, in the hundreds of thousands to more.
   In those non-fast paths is where we split the job into parts at a
   much slower rate, utilizing all four steps above, not jumping from
   FiredEvent to ProcessSub.  Also, if any cluster is down, we always
   split the job into FindSubsPerCluster * # clusters. </para>

<para>So the different paths:</para>

<para>Using 5,000 for <literal>$MAX_FILTER_AT_A_TIME</literal></para>
<itemizedlist><listitem><para>[FiredEvent] => 1-5000x [ProcessSub]</para></listitem>
<listitem><para>[FiredEvent] => 7x [FindSubsPerCluster] => 1-5000x [ProcessSub]</para></listitem>
<listitem><para>[FiredEvent] => 7x [FindSubsPerCluster] => 57x [FilterSubs] => 1-5000x [ProcessSub]</para></listitem>
</itemizedlist>

</chapter>

