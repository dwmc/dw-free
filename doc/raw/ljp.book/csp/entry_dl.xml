<chapter id="ljp.csp.entry_downloading">

<title>Downloading Entries</title>

<para>
Client authors frequently deal with downloading entries the wrong 
way. There are various ways of getting entries from the servers, each with
different merits.</para>

<tip><title>Language Support</title><para>
First, <link linkend="ljp.csp.versions">support Unicode</link> (<acronym>UTF</acronym>-8).
If you write a client and release it at all, it will be used by people who
need Unicode support. &ljcom;, and other &lj; installations, have a large
community of users that do not necessarily keep their journal in English.
The Russian community is huge, for example, and their journals require Unicode
to post/view the entries.</para></tip>

<para>An example journal backup tool named 
<ulink url="http://code.sixapart.com/svn/livejournal/trunk/src/jbackup/jbackup.pl"><filename>jbackup.pl</filename></ulink>
is available in the &svn; repository. It shows how to download entries
and comments from the servers correctly and safely.</para>

<para>
In general, there are four methods of downloading entries with the
<function>getevents</function> protocol mode: <methodname>lastn</methodname>,
<methodname>syncitems</methodname>, <methodname>one</methodname>,
and <methodname>day</methodname>. These four methods are specified in the
<varname>selecttype</varname> variable of the <function>getevents</function>
call.</para>

<formalpara><title><methodname>lastn</methodname></title><para>
This is most effectively used when you are providing the user a snapshot of
their recent entries, or when you just want to get their most recently posted
entry, to verify the entry you just posted was posted, or you want to allow
the user to edit their most recent entry.</para></formalpara>

<para>
You should not use this mode to download an entire journal. You cannot
specify a huge number (such as a number greater than fifty) that would give
you their entire journal (unless their journal was a few dozen entries only).</para>

<formalpara><title><methodname>day</methodname></title><para>
This is useful for people who are writing calendars and want to get entries on
a day that the user has clicked on. This should be used in conjunction with the
<function>getdaycounts</function> protocol mode to figure out when the user
has posted and then to get entries on that particular date.</para></formalpara>

<para>
You should <emphasis role="strong">never</emphasis> use this mode for
enumerating someone&apos;s journal and downloading their entries., nor
when you are going to re-upload the data. Always use <methodname>syncitems</methodname>.</para>

<para>
If you do not specify a <link linkend="ljp.csp.versions">version</link>, the
server will assume the client does not understand Unicode.
If, for some reason (non-Unicode client, for example), the server is unable
to send you a particular entry, it will instead send you text indicating the
entry&apos;s subject and body <quote><computeroutput>(cannot be shown)</computeroutput></quote>.
It does not <emphasis>tell</emphasis> you it has done this,
so you may end up thinking that is the user&apos;s real entry and overwrite
whatever they had.</para>

<formalpara><title><methodname>one</methodname></title><para>
When you want to download a handful of entries scattered about, you can use 
this mode to get them. It is usually safe to download an entry with this 
mode and then to re-submit it to the server. Example: you use
<function>getdaycounts</function> to show a calendar, then you use the
<methodname>day</methodname> mode to show entries for that day,
then you use this mode to get the real entry for editing.</para></formalpara>

<formalpara><title><methodname>syncitems</methodname></title><para>
If you are trying to download someone&apos;s entire journal,
<emphasis>this</emphasis> is the mode to use. This mode is the only way you
can account for edits that the user has made to their entries without using
your client. This is also the most efficient way of downloading entries,
because the server will send you a bunch at a time (say, 100). This
mode is used in conjunction with the appropriately titled
<function>syncitems</function> client protocol mode.</para></formalpara>

<para>
The <function>syncitems</function> client protocol mode returns a list of
events modified/created/deleted after <varname>lastsync</varname> time, while
<function>getevents</function> using <varname>selecttype</varname>
<methodname>syncitems</methodname> returns the actual events.</para>

<para>
The entries are returned in order of modification. So, in 2007 if you go back
and edit an entry from 1999, it will show up when you do a sync and specify a
<varname>lastsync</varname> of 2007. This is the only way to account for edits
that the user makes on the web site or with another client.</para>

<para>
If you want to download and re-submit a particular group of entries, perhaps
within a particular time period, use <methodname>syncitems</methodname>.
Download the entire journal, then re-upload the subset you want to change.
A user may have used the site for a few years, writing many entries.
You will be hitting the server once per day for every day that the user has
had a journal, whether or not they posted. A day-by-day download might take
over a thousand separate requests, while a full
<methodname>syncitems</methodname> download would only be about ten.
It will substantially reduce the amount of hits to the server.
This is considerate, and also means your bot is not likely to get
itself banned for not being smart.</para>

<para>
Here is a pseudo-code example of how to use this mode properly to
download someone&apos;s entire journal.</para>

<programlisting>send client request <quote>syncitems</quote> with the
<quote>lastsync</quote> variable not specified
get list of items back from request, save items into list for processing later
while size_of_list &lt; sync_total {
    find most recent time in list
    call <quote>syncitems</quote> again, but set <quote>lastsync</quote> to most recent time
    push result items onto lost
}
iterate through list and remove items that do not start with <quote>L-</quote> (L means <quote>log</quote> which is a journal entry)
create hash of journal itemids with data { downloaded =&gt; 0, time =&gt; whatever sync_<symbol>X</symbol>_time was }
while (any item in hash has downloaded == 0) {
    find the oldest <quote>time</quote> in this hash for items that have downloaded == 0
    &hellip;decrement this time by one second.
    mark <emphasis>this</emphasis> item as downloaded (so we don&apos;t use the same time twice and loop forever)
    send client request <quote>getevents</quote> with <varname>selecttype</varname> set to <methodname>syncitems</methodname>, <varname>lastsync</varname> set to oldest time minus 1 second
    mark each item you get back as downloaded in your hash
    put the entries you got into storage somewhere.
}</programlisting>

<para>
You will have to call <function>syncitems</function> and
<function>getevents</function> several times each to get the data you need.
This is not a problem if you do it smartly. Also note that the server keeps
track of the times you use when you call <function>getevents</function>, and if
you start specifying the same time repeatedly (infinite loop) then
your client will be given an error message <quote><computeroutput>Perhaps the
client is broken?</computeroutput></quote>, or similar. Last, remember to set
<varname>ver</varname> to <parameter>1</parameter>!</para>

</chapter>

