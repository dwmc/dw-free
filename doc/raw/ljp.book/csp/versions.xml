<chapter id="ljp.csp.versions">
  <title>Protocol Versions</title>
  <para>
    The &lj; protocol (so far) has been more or less static; while new
    modes have been added, the basic operation has not changed much.
    Introduction of Unicode support in &lj; necessitated changes
    in the way text is encoded in protocol requests and responses. To
    allow new clients to take advantage of Unicode support and at the same time
    avoid breaking existing clients, a versioning scheme was put into the
    protocol. The client sends the number of the highest protocol version it
    supports in every request, inside a <varname>ver</varname> attribute; version
    <parameter>0</parameter> is implicit if the client does not send the 
    <varname>ver</varname> attribute. Currently there are two versions of the 
    protocol, and the Unicode-enabled server code supports both of them.
  </para>
  <itemizedlist>
    <listitem><formalpara><title>Version <parameter>0</parameter></title>
    <para>
      If a client does not send a <varname>ver</varname> key on a request, 
      it&apos;s assumed to support protocol Version <parameter>0</parameter>. In protocol
      Version <parameter>0</parameter>, textual information transmitted from or to
      the server is always assumed to be a stream of 8-bit bytes, not necessarily
      <acronym>ASCII</acronym>, but without any guarantee that the 
      non-<acronym>ASCII</acronym> bytes are presented in any particular encoding.
      You can only upload such unknown8bit entries to personal journals. You cannot
      post an entry to a non-person account (a community) with international or
      special characters at all &mdash; unless you set Version <parameter>1</parameter>.
    </para></formalpara></listitem>
    <listitem><formalpara><title>Version <parameter>1</parameter></title>
    <para>
      Version <parameter>1</parameter> differs from Version <parameter>0</parameter> only
      by imposing additional requirements on the text transmitted through requests
      and responses; there aren&apos;t any changes in protocol modes. The additional
      requirements are that in a Version <parameter>1</parameter> request, the client
      <emphasis>must</emphasis> transmit all textual information as a stream of 
      Unicode data encoded in <acronym>UTF</acronym>-8; the server <emphasis>must</emphasis>
      respond to Version <parameter>1</parameter> requests with Version <parameter>1</parameter>
      responses; in such Version <parameter>1</parameter> responses, the server 
      <emphasis>must</emphasis> also transmit all textual information encoded in 
      <acronym>UTF</acronym>-8; and the client <emphasis>must</emphasis> expect that
      and handle such responses correctly. In other words, all information transmitted
      via protocol when Version <parameter>1</parameter> is used is always encoded in 
      <acronym>UTF</acronym>-8. <acronym>UTF</acronym>-8 is a representation of Unicode
      in a bytestream format compatible with <acronym>ASCII</acronym>. 
      <footnote id="unicode"><para>See the <ulink url="http://www.unicode.org/">Unicode Consortium</ulink> website
      for more information on Unicode and <acronym>UTF</acronym>-8.</para></footnote>
   </para></formalpara></listitem>
  </itemizedlist>
</chapter>

